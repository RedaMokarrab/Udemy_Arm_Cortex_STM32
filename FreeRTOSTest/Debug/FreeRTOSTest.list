
FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080053bc  080053bc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053bc  080053bc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001498  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000150c  2000150c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5d0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b35  00000000  00000000  0003d674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  000411b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d8  00000000  00000000  00042810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff3e  00000000  00000000  00043ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a6d0  00000000  00000000  00063c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0cf2  00000000  00000000  0007e2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013efe8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006194  00000000  00000000  0013f03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800524c 	.word	0x0800524c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800524c 	.word	0x0800524c

080001d0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr

080001e6 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80001ea:	bf00      	nop
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr

080001f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001f4:	b480      	push	{r7}
 80001f6:	b085      	sub	sp, #20
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	4a07      	ldr	r2, [pc, #28]	; (8000220 <vApplicationGetIdleTaskMemory+0x2c>)
 8000204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	4a06      	ldr	r2, [pc, #24]	; (8000224 <vApplicationGetIdleTaskMemory+0x30>)
 800020a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2280      	movs	r2, #128	; 0x80
 8000210:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	20000090 	.word	0x20000090
 8000224:	20000144 	.word	0x20000144

08000228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000228:	b5b0      	push	{r4, r5, r7, lr}
 800022a:	b0a2      	sub	sp, #136	; 0x88
 800022c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022e:	f000 fbe7 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000232:	f000 f889 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000236:	f000 f987 	bl	8000548 <MX_GPIO_Init>
  MX_I2C1_Init();
 800023a:	f000 f8e5 	bl	8000408 <MX_I2C1_Init>
  MX_SPI1_Init();
 800023e:	f000 f923 	bl	8000488 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000242:	f000 f95f 	bl	8000504 <MX_USB_PCD_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of SPIlock */
  osMutexDef(SPIlock);
 8000246:	2300      	movs	r3, #0
 8000248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800024c:	2300      	movs	r3, #0
 800024e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  SPIlockHandle = osMutexCreate(osMutex(SPIlock));
 8000252:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000256:	4618      	mov	r0, r3
 8000258:	f002 ffa5 	bl	80031a6 <osMutexCreate>
 800025c:	4603      	mov	r3, r0
 800025e:	4a2f      	ldr	r2, [pc, #188]	; (800031c <main+0xf4>)
 8000260:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQStaticDef(myQueue01, 16, uint16_t, myQueue01Buffer, &myQueue01ControlBlock);
 8000262:	4b2f      	ldr	r3, [pc, #188]	; (8000320 <main+0xf8>)
 8000264:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000268:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800026a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800026e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000272:	2100      	movs	r1, #0
 8000274:	4618      	mov	r0, r3
 8000276:	f002 ffae 	bl	80031d6 <osMessageCreate>
 800027a:	4603      	mov	r3, r0
 800027c:	4a29      	ldr	r2, [pc, #164]	; (8000324 <main+0xfc>)
 800027e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MCAL_Task */
  osThreadDef(MCAL_Task, StartMCAL_Task, osPriorityNormal, 0, 128);
 8000280:	4b29      	ldr	r3, [pc, #164]	; (8000328 <main+0x100>)
 8000282:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000286:	461d      	mov	r5, r3
 8000288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MCAL_TaskHandle = osThreadCreate(osThread(MCAL_Task), NULL);
 8000294:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f002 ff23 	bl	80030e6 <osThreadCreate>
 80002a0:	4603      	mov	r3, r0
 80002a2:	4a22      	ldr	r2, [pc, #136]	; (800032c <main+0x104>)
 80002a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Watchdog */
  osThreadDef(Watchdog, StartWdgTask, osPriorityIdle, 0, 128);
 80002a6:	4b22      	ldr	r3, [pc, #136]	; (8000330 <main+0x108>)
 80002a8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80002ac:	461d      	mov	r5, r3
 80002ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WatchdogHandle = osThreadCreate(osThread(Watchdog), NULL);
 80002ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002be:	2100      	movs	r1, #0
 80002c0:	4618      	mov	r0, r3
 80002c2:	f002 ff10 	bl	80030e6 <osThreadCreate>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4a1a      	ldr	r2, [pc, #104]	; (8000334 <main+0x10c>)
 80002ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of ApplicationHigh */
  osThreadDef(ApplicationHigh, StartApplicationHigh, osPriorityNormal, 0, 128);
 80002cc:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <main+0x110>)
 80002ce:	f107 041c 	add.w	r4, r7, #28
 80002d2:	461d      	mov	r5, r3
 80002d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ApplicationHighHandle = osThreadCreate(osThread(ApplicationHigh), NULL);
 80002e0:	f107 031c 	add.w	r3, r7, #28
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fefd 	bl	80030e6 <osThreadCreate>
 80002ec:	4603      	mov	r3, r0
 80002ee:	4a13      	ldr	r2, [pc, #76]	; (800033c <main+0x114>)
 80002f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Application_low */
  osThreadDef(Application_low, StartApplicationlow, osPriorityIdle, 0, 128);
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <main+0x118>)
 80002f4:	463c      	mov	r4, r7
 80002f6:	461d      	mov	r5, r3
 80002f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Application_lowHandle = osThreadCreate(osThread(Application_low), NULL);
 8000304:	463b      	mov	r3, r7
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f002 feec 	bl	80030e6 <osThreadCreate>
 800030e:	4603      	mov	r3, r0
 8000310:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <main+0x11c>)
 8000312:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000314:	f002 fee0 	bl	80030d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000318:	e7fe      	b.n	8000318 <main+0xf0>
 800031a:	bf00      	nop
 800031c:	2000110c 	.word	0x2000110c
 8000320:	0800529c 	.word	0x0800529c
 8000324:	20001178 	.word	0x20001178
 8000328:	080052ac 	.word	0x080052ac
 800032c:	20001094 	.word	0x20001094
 8000330:	080052c8 	.word	0x080052c8
 8000334:	20001108 	.word	0x20001108
 8000338:	080052e4 	.word	0x080052e4
 800033c:	20001110 	.word	0x20001110
 8000340:	08005300 	.word	0x08005300
 8000344:	20001104 	.word	0x20001104

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b09e      	sub	sp, #120	; 0x78
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000352:	2228      	movs	r2, #40	; 0x28
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f004 feaa 	bl	80050b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800036c:	463b      	mov	r3, r7
 800036e:	223c      	movs	r2, #60	; 0x3c
 8000370:	2100      	movs	r1, #0
 8000372:	4618      	mov	r0, r3
 8000374:	f004 fe9c 	bl	80050b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000378:	2303      	movs	r3, #3
 800037a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000380:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038a:	2310      	movs	r3, #16
 800038c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000396:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000398:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800039c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 ffda 	bl	800135c <HAL_RCC_OscConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003ae:	f000 f97b 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b2:	230f      	movs	r3, #15
 80003b4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b6:	2302      	movs	r3, #2
 80003b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003cc:	2102      	movs	r1, #2
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fecc 	bl	800216c <HAL_RCC_ClockConfig>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003da:	f000 f965 	bl	80006a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <SystemClock_Config+0xbc>)
 80003e0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003e2:	2300      	movs	r3, #0
 80003e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003e6:	2300      	movs	r3, #0
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ea:	463b      	mov	r3, r7
 80003ec:	4618      	mov	r0, r3
 80003ee:	f002 f903 	bl	80025f8 <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80003f8:	f000 f956 	bl	80006a8 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3778      	adds	r7, #120	; 0x78
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	00020020 	.word	0x00020020

08000408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_I2C1_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	; (8000480 <MX_I2C1_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <MX_I2C1_Init+0x74>)
 8000414:	4a1b      	ldr	r2, [pc, #108]	; (8000484 <MX_I2C1_Init+0x7c>)
 8000416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_I2C1_Init+0x74>)
 8000420:	2201      	movs	r2, #1
 8000422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_I2C1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_I2C1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000442:	480e      	ldr	r0, [pc, #56]	; (800047c <MX_I2C1_Init+0x74>)
 8000444:	f000 fd86 	bl	8000f54 <HAL_I2C_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800044e:	f000 f92b 	bl	80006a8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000452:	2100      	movs	r1, #0
 8000454:	4809      	ldr	r0, [pc, #36]	; (800047c <MX_I2C1_Init+0x74>)
 8000456:	f000 fe0c 	bl	8001072 <HAL_I2CEx_ConfigAnalogFilter>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000460:	f000 f922 	bl	80006a8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000464:	2100      	movs	r1, #0
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_I2C1_Init+0x74>)
 8000468:	f000 fe4e 	bl	8001108 <HAL_I2CEx_ConfigDigitalFilter>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000472:	f000 f919 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200010b8 	.word	0x200010b8
 8000480:	40005400 	.word	0x40005400
 8000484:	2000090e 	.word	0x2000090e

08000488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800048c:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <MX_SPI1_Init+0x74>)
 800048e:	4a1c      	ldr	r2, [pc, #112]	; (8000500 <MX_SPI1_Init+0x78>)
 8000490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000492:	4b1a      	ldr	r3, [pc, #104]	; (80004fc <MX_SPI1_Init+0x74>)
 8000494:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004a0:	4b16      	ldr	r3, [pc, #88]	; (80004fc <MX_SPI1_Init+0x74>)
 80004a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80004a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a8:	4b14      	ldr	r3, [pc, #80]	; (80004fc <MX_SPI1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ae:	4b13      	ldr	r3, [pc, #76]	; (80004fc <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_SPI1_Init+0x74>)
 80004b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_SPI1_Init+0x74>)
 80004be:	2208      	movs	r2, #8
 80004c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_SPI1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_SPI1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_SPI1_Init+0x74>)
 80004d6:	2207      	movs	r2, #7
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_SPI1_Init+0x74>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_SPI1_Init+0x74>)
 80004e8:	f002 fa36 	bl	8002958 <HAL_SPI_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004f2:	f000 f8d9 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20001114 	.word	0x20001114
 8000500:	40013000 	.word	0x40013000

08000504 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <MX_USB_PCD_Init+0x40>)
 800050c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 8000510:	2208      	movs	r2, #8
 8000512:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 8000516:	2202      	movs	r2, #2
 8000518:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 800051c:	2202      	movs	r2, #2
 800051e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800052c:	4804      	ldr	r0, [pc, #16]	; (8000540 <MX_USB_PCD_Init+0x3c>)
 800052e:	f000 fe37 	bl	80011a0 <HAL_PCD_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000538:	f000 f8b6 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000117c 	.word	0x2000117c
 8000544:	40005c00 	.word	0x40005c00

08000548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055e:	4b37      	ldr	r3, [pc, #220]	; (800063c <MX_GPIO_Init+0xf4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a36      	ldr	r2, [pc, #216]	; (800063c <MX_GPIO_Init+0xf4>)
 8000564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b34      	ldr	r3, [pc, #208]	; (800063c <MX_GPIO_Init+0xf4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b31      	ldr	r3, [pc, #196]	; (800063c <MX_GPIO_Init+0xf4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <MX_GPIO_Init+0xf4>)
 800057c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b2e      	ldr	r3, [pc, #184]	; (800063c <MX_GPIO_Init+0xf4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <MX_GPIO_Init+0xf4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <MX_GPIO_Init+0xf4>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <MX_GPIO_Init+0xf4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <MX_GPIO_Init+0xf4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <MX_GPIO_Init+0xf4>)
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b0:	6153      	str	r3, [r2, #20]
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_GPIO_Init+0xf4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_GPIO_Init+0xf4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <MX_GPIO_Init+0xf4>)
 80005c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_GPIO_Init+0xf4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005d6:	2200      	movs	r2, #0
 80005d8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005dc:	4818      	ldr	r0, [pc, #96]	; (8000640 <MX_GPIO_Init+0xf8>)
 80005de:	f000 fca1 	bl	8000f24 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005e2:	2337      	movs	r3, #55	; 0x37
 80005e4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005e6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4619      	mov	r1, r3
 80005f6:	4812      	ldr	r0, [pc, #72]	; (8000640 <MX_GPIO_Init+0xf8>)
 80005f8:	f000 fb1a 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005fc:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000600:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <MX_GPIO_Init+0xf8>)
 8000616:	f000 fb0b 	bl	8000c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f000 fafe 	bl	8000c30 <HAL_GPIO_Init>

}
 8000634:	bf00      	nop
 8000636:	3728      	adds	r7, #40	; 0x28
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	48001000 	.word	0x48001000

08000644 <StartMCAL_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMCAL_Task */
void StartMCAL_Task(void const * argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f002 fd96 	bl	800317e <osDelay>
 8000652:	e7fb      	b.n	800064c <StartMCAL_Task+0x8>

08000654 <StartWdgTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWdgTask */
void StartWdgTask(void const * argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWdgTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f002 fd8e 	bl	800317e <osDelay>
 8000662:	e7fb      	b.n	800065c <StartWdgTask+0x8>

08000664 <StartApplicationHigh>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartApplicationHigh */
void StartApplicationHigh(void const * argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartApplicationHigh */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f002 fd86 	bl	800317e <osDelay>
 8000672:	e7fb      	b.n	800066c <StartApplicationHigh+0x8>

08000674 <StartApplicationlow>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartApplicationlow */
void StartApplicationlow(void const * argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartApplicationlow */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f002 fd7e 	bl	800317e <osDelay>
 8000682:	e7fb      	b.n	800067c <StartApplicationlow+0x8>

08000684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000696:	f000 f9c9 	bl	8000a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40001400 	.word	0x40001400

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_MspInit+0x4c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_MspInit+0x4c>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_MspInit+0x4c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <HAL_MspInit+0x4c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	210f      	movs	r1, #15
 80006ee:	f06f 0001 	mvn.w	r0, #1
 80006f2:	f000 fa73 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0x7c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d127      	bne.n	8000776 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a16      	ldr	r2, [pc, #88]	; (8000784 <HAL_I2C_MspInit+0x80>)
 800072c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800073e:	23c0      	movs	r3, #192	; 0xc0
 8000740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000742:	2312      	movs	r3, #18
 8000744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000746:	2301      	movs	r3, #1
 8000748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800074e:	2304      	movs	r3, #4
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <HAL_I2C_MspInit+0x84>)
 800075a:	f000 fa69 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_I2C_MspInit+0x80>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_I2C_MspInit+0x80>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000776:	bf00      	nop
 8000778:	3728      	adds	r7, #40	; 0x28
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005400 	.word	0x40005400
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400

0800078c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0314 	add.w	r3, r7, #20
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x7c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d128      	bne.n	8000800 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4b11      	ldr	r3, [pc, #68]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	4a10      	ldr	r2, [pc, #64]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	6153      	str	r3, [r2, #20]
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_SPI_MspInit+0x80>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007de:	23e0      	movs	r3, #224	; 0xe0
 80007e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ee:	2305      	movs	r3, #5
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f000 fa18 	bl	8000c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40013000 	.word	0x40013000
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a18      	ldr	r2, [pc, #96]	; (8000890 <HAL_PCD_MspInit+0x80>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d129      	bne.n	8000886 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <HAL_PCD_MspInit+0x84>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a17      	ldr	r2, [pc, #92]	; (8000894 <HAL_PCD_MspInit+0x84>)
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	6153      	str	r3, [r2, #20]
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_PCD_MspInit+0x84>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800084a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800085c:	230e      	movs	r3, #14
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f000 f9e1 	bl	8000c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_PCD_MspInit+0x84>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_PCD_MspInit+0x84>)
 8000874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_PCD_MspInit+0x84>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40005c00 	.word	0x40005c00
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	2037      	movs	r0, #55	; 0x37
 80008ae:	f000 f995 	bl	8000bdc <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80008b2:	2037      	movs	r0, #55	; 0x37
 80008b4:	f000 f9ae 	bl	8000c14 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <HAL_InitTick+0xa0>)
 80008ba:	69db      	ldr	r3, [r3, #28]
 80008bc:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <HAL_InitTick+0xa0>)
 80008be:	f043 0320 	orr.w	r3, r3, #32
 80008c2:	61d3      	str	r3, [r2, #28]
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <HAL_InitTick+0xa0>)
 80008c6:	69db      	ldr	r3, [r3, #28]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d0:	f107 0210 	add.w	r2, r7, #16
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4611      	mov	r1, r2
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fe5a 	bl	8002594 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008e0:	f001 fe36 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 80008e4:	4603      	mov	r3, r0
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <HAL_InitTick+0xa4>)
 80008ee:	fba2 2303 	umull	r2, r3, r2, r3
 80008f2:	0c9b      	lsrs	r3, r3, #18
 80008f4:	3b01      	subs	r3, #1
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_InitTick+0xa8>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <HAL_InitTick+0xac>)
 80008fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <HAL_InitTick+0xa8>)
 8000900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000906:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <HAL_InitTick+0xa8>)
 8000908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <HAL_InitTick+0xa8>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <HAL_InitTick+0xa8>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <HAL_InitTick+0xa8>)
 800091a:	f002 f8c8 	bl	8002aae <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d104      	bne.n	800092e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <HAL_InitTick+0xa8>)
 8000926:	f002 f923 	bl	8002b70 <HAL_TIM_Base_Start_IT>
 800092a:	4603      	mov	r3, r0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000
 800093c:	431bde83 	.word	0x431bde83
 8000940:	200014b0 	.word	0x200014b0
 8000944:	40001400 	.word	0x40001400

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM7_IRQHandler+0x10>)
 800097a:	f002 f963 	bl	8002c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200014b0 	.word	0x200014b0

08000988 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f004 fb35 	bl	8005048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009de:	f7ff fc23 	bl	8000228 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009f0:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 80009f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009f8:	2000150c 	.word	0x2000150c

080009fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_2_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x28>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x28>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f8d8 	bl	8000bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	200f      	movs	r0, #15
 8000a18:	f7ff ff3e 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fe4a 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x20>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_IncTick+0x24>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_IncTick+0x24>)
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	200014fc 	.word	0x200014fc

08000a54 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <HAL_GetTick+0x14>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	200014fc 	.word	0x200014fc

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ff4c 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff61 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ffb1 	bl	8000b60 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff80 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff54 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3e:	e154      	b.n	8000eea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f000 8146 	beq.w	8000ee4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d005      	beq.n	8000c70 <HAL_GPIO_Init+0x40>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d017      	beq.n	8000d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2203      	movs	r2, #3
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	689a      	ldr	r2, [r3, #8]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d123      	bne.n	8000d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3208      	adds	r2, #8
 8000d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	220f      	movs	r2, #15
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	f003 0307 	and.w	r3, r3, #7
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 0203 	and.w	r2, r3, #3
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80a0 	beq.w	8000ee4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_GPIO_Init+0x2d8>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbc:	4a53      	ldr	r2, [pc, #332]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	220f      	movs	r2, #15
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000de6:	d019      	beq.n	8000e1c <HAL_GPIO_Init+0x1ec>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a49      	ldr	r2, [pc, #292]	; (8000f10 <HAL_GPIO_Init+0x2e0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d013      	beq.n	8000e18 <HAL_GPIO_Init+0x1e8>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_GPIO_Init+0x2e4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d00d      	beq.n	8000e14 <HAL_GPIO_Init+0x1e4>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a47      	ldr	r2, [pc, #284]	; (8000f18 <HAL_GPIO_Init+0x2e8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <HAL_GPIO_Init+0x1e0>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a46      	ldr	r2, [pc, #280]	; (8000f1c <HAL_GPIO_Init+0x2ec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <HAL_GPIO_Init+0x1dc>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e008      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2305      	movs	r3, #5
 8000e0e:	e006      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e10:	2303      	movs	r3, #3
 8000e12:	e004      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <HAL_GPIO_Init+0x1ee>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	f002 0203 	and.w	r2, r2, #3
 8000e24:	0092      	lsls	r2, r2, #2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2e:	4937      	ldr	r1, [pc, #220]	; (8000f0c <HAL_GPIO_Init+0x2dc>)
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e8a:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb4:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <HAL_GPIO_Init+0x2f0>)
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f47f aea3 	bne.w	8000c40 <HAL_GPIO_Init+0x10>
  }
}
 8000efa:	bf00      	nop
 8000efc:	bf00      	nop
 8000efe:	371c      	adds	r7, #28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	48000c00 	.word	0x48000c00
 8000f1c:	48001000 	.word	0x48001000
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
 8000f30:	4613      	mov	r3, r2
 8000f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f34:	787b      	ldrb	r3, [r7, #1]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f42:	887a      	ldrh	r2, [r7, #2]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e081      	b.n	800106a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fbc2 	bl	8000704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2224      	movs	r2, #36	; 0x24
 8000f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fa4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d107      	bne.n	8000fce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	e006      	b.n	8000fdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d104      	bne.n	8000fee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69d9      	ldr	r1, [r3, #28]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b20      	cmp	r3, #32
 8001086:	d138      	bne.n	80010fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001092:	2302      	movs	r3, #2
 8001094:	e032      	b.n	80010fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2224      	movs	r2, #36	; 0x24
 80010a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0201 	orr.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2220      	movs	r2, #32
 80010ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010fa:	2302      	movs	r3, #2
  }
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b20      	cmp	r3, #32
 800111c:	d139      	bne.n	8001192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001128:	2302      	movs	r3, #2
 800112a:	e033      	b.n	8001194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2224      	movs	r2, #36	; 0x24
 8001138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800115a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2220      	movs	r2, #32
 8001182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001192:	2302      	movs	r3, #2
  }
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af06      	add	r7, sp, #24
 80011a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0d0      	b.n	8001354 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fb22 	bl	8000810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2203      	movs	r2, #3
 80011d0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f001 ff29 	bl	8003030 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
 80011e2:	e04c      	b.n	800127e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	3301      	adds	r3, #1
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	b298      	uxth	r0, r3
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	440b      	add	r3, r1
 8001220:	3336      	adds	r3, #54	; 0x36
 8001222:	4602      	mov	r2, r0
 8001224:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3303      	adds	r3, #3
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	3338      	adds	r3, #56	; 0x38
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	333c      	adds	r3, #60	; 0x3c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3340      	adds	r3, #64	; 0x40
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3ad      	bcc.n	80011e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e044      	b.n	8001318 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012ba:	7bfa      	ldrb	r2, [r7, #15]
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	440b      	add	r3, r1
 80012c8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	440b      	add	r3, r1
 80012de:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012e6:	7bfa      	ldrb	r2, [r7, #15]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3b5      	bcc.n	800128e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	687e      	ldr	r6, [r7, #4]
 800132a:	466d      	mov	r5, sp
 800132c:	f106 0410 	add.w	r4, r6, #16
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	1d33      	adds	r3, r6, #4
 800133a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f001 fe92 	bl	8003066 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800135c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001362:	af00      	add	r7, sp, #0
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	f000 bef4 	b.w	800215e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 816a 	beq.w	800165a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001386:	4bb3      	ldr	r3, [pc, #716]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b04      	cmp	r3, #4
 8001390:	d00c      	beq.n	80013ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001392:	4bb0      	ldr	r3, [pc, #704]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b08      	cmp	r3, #8
 800139c:	d159      	bne.n	8001452 <HAL_RCC_OscConfig+0xf6>
 800139e:	4bad      	ldr	r3, [pc, #692]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d152      	bne.n	8001452 <HAL_RCC_OscConfig+0xf6>
 80013ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	095b      	lsrs	r3, r3, #5
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d102      	bne.n	80013de <HAL_RCC_OscConfig+0x82>
 80013d8:	4b9e      	ldr	r3, [pc, #632]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0xae>
 80013de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013f6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013fa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013fe:	fa93 f3a3 	rbit	r3, r3
 8001402:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001406:	4b93      	ldr	r3, [pc, #588]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800140e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001412:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001416:	fa92 f2a2 	rbit	r2, r2
 800141a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800141e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001422:	fab2 f282 	clz	r2, r2
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	f042 0220 	orr.w	r2, r2, #32
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	f002 021f 	and.w	r2, r2, #31
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	4013      	ands	r3, r2
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 810c 	beq.w	8001658 <HAL_RCC_OscConfig+0x2fc>
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8106 	bne.w	8001658 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	f000 be86 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x110>
 800145e:	4b7d      	ldr	r3, [pc, #500]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7c      	ldr	r2, [pc, #496]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e030      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x134>
 8001476:	4b77      	ldr	r3, [pc, #476]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a76      	ldr	r2, [pc, #472]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800147c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b74      	ldr	r3, [pc, #464]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a73      	ldr	r2, [pc, #460]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e01e      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0x15a>
 800149c:	4b6d      	ldr	r3, [pc, #436]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6c      	ldr	r2, [pc, #432]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b6a      	ldr	r3, [pc, #424]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a69      	ldr	r2, [pc, #420]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e00b      	b.n	80014ce <HAL_RCC_OscConfig+0x172>
 80014b6:	4b67      	ldr	r3, [pc, #412]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a66      	ldr	r2, [pc, #408]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a63      	ldr	r2, [pc, #396]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014cc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f023 020f 	bic.w	r2, r3, #15
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	495d      	ldr	r1, [pc, #372]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d059      	beq.n	80015a0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fab2 	bl	8000a54 <HAL_GetTick>
 80014f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f6:	f7ff faad 	bl	8000a54 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	; 0x64
 8001504:	d902      	bls.n	800150c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	f000 be29 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 800150c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001510:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001514:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001520:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	095b      	lsrs	r3, r3, #5
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x1e2>
 8001538:	4b46      	ldr	r3, [pc, #280]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x20e>
 800153e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001542:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001552:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001556:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800155a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800156e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001572:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001576:	fa92 f2a2 	rbit	r2, r2
 800157a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800157e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001582:	fab2 f282 	clz	r2, r2
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	f042 0220 	orr.w	r2, r2, #32
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	f002 021f 	and.w	r2, r2, #31
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	4013      	ands	r3, r2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ab      	beq.n	80014f6 <HAL_RCC_OscConfig+0x19a>
 800159e:	e05c      	b.n	800165a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa58 	bl	8000a54 <HAL_GetTick>
 80015a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa53 	bl	8000a54 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d902      	bls.n	80015c0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f000 bdcf 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80015c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015c4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80015d4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d8:	fab3 f383 	clz	r3, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d102      	bne.n	80015f2 <HAL_RCC_OscConfig+0x296>
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e015      	b.n	800161e <HAL_RCC_OscConfig+0x2c2>
 80015f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800160a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800160e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001612:	fa93 f3a3 	rbit	r3, r3
 8001616:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_RCC_OscConfig+0x2f8>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001622:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001626:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800162a:	fa92 f2a2 	rbit	r2, r2
 800162e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001632:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001636:	fab2 f282 	clz	r2, r2
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	f042 0220 	orr.w	r2, r2, #32
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	f002 021f 	and.w	r2, r2, #31
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4013      	ands	r3, r2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ab      	bne.n	80015aa <HAL_RCC_OscConfig+0x24e>
 8001652:	e002      	b.n	800165a <HAL_RCC_OscConfig+0x2fe>
 8001654:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 816f 	beq.w	8001948 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800166a:	4bd0      	ldr	r3, [pc, #832]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001676:	4bcd      	ldr	r3, [pc, #820]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d16c      	bne.n	800175c <HAL_RCC_OscConfig+0x400>
 8001682:	4bca      	ldr	r3, [pc, #808]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d166      	bne.n	800175c <HAL_RCC_OscConfig+0x400>
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001694:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80016a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a4:	fab3 f383 	clz	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	095b      	lsrs	r3, r3, #5
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x362>
 80016b8:	4bbc      	ldr	r3, [pc, #752]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	e013      	b.n	80016e6 <HAL_RCC_OscConfig+0x38a>
 80016be:	2302      	movs	r3, #2
 80016c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80016e2:	4bb2      	ldr	r3, [pc, #712]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2202      	movs	r2, #2
 80016e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80016ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016f0:	fa92 f2a2 	rbit	r2, r2
 80016f4:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f042 0220 	orr.w	r2, r2, #32
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	f002 021f 	and.w	r2, r2, #31
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f202 	lsl.w	r2, r1, r2
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_RCC_OscConfig+0x3cc>
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	f000 bd1b 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4ba0      	ldr	r3, [pc, #640]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	21f8      	movs	r1, #248	; 0xf8
 8001738:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001740:	fa91 f1a1 	rbit	r1, r1
 8001744:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001748:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800174c:	fab1 f181 	clz	r1, r1
 8001750:	b2c9      	uxtb	r1, r1
 8001752:	408b      	lsls	r3, r1
 8001754:	4995      	ldr	r1, [pc, #596]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e0f5      	b.n	8001948 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8085 	beq.w	8001872 <HAL_RCC_OscConfig+0x516>
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800177a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	fab3 f383 	clz	r3, r3
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001788:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	461a      	mov	r2, r3
 8001790:	2301      	movs	r3, #1
 8001792:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff f95e 	bl	8000a54 <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179e:	f7ff f959 	bl	8000a54 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d902      	bls.n	80017b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f000 bcd5 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80017c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x488>
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e013      	b.n	800180c <HAL_RCC_OscConfig+0x4b0>
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	2202      	movs	r2, #2
 800180e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001812:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001816:	fa92 f2a2 	rbit	r2, r2
 800181a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800181e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f002 021f 	and.w	r2, r2, #31
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f202 	lsl.w	r2, r1, r2
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0af      	beq.n	800179e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	21f8      	movs	r1, #248	; 0xf8
 800184e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001856:	fa91 f1a1 	rbit	r1, r1
 800185a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800185e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001862:	fab1 f181 	clz	r1, r1
 8001866:	b2c9      	uxtb	r1, r1
 8001868:	408b      	lsls	r3, r1
 800186a:	4950      	ldr	r1, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]
 8001870:	e06a      	b.n	8001948 <HAL_RCC_OscConfig+0x5ec>
 8001872:	2301      	movs	r3, #1
 8001874:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800187c:	fa93 f3a3 	rbit	r3, r3
 8001880:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001884:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001888:	fab3 f383 	clz	r3, r3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001892:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	461a      	mov	r2, r3
 800189a:	2300      	movs	r3, #0
 800189c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff f8d9 	bl	8000a54 <HAL_GetTick>
 80018a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff f8d4 	bl	8000a54 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d902      	bls.n	80018be <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	f000 bc50 	b.w	800215e <HAL_RCC_OscConfig+0xe02>
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80018c8:	fa93 f3a3 	rbit	r3, r3
 80018cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80018d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_OscConfig+0x592>
 80018e8:	4b30      	ldr	r3, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e013      	b.n	8001916 <HAL_RCC_OscConfig+0x5ba>
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001906:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x650>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	2202      	movs	r2, #2
 8001918:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800191c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001920:	fa92 f2a2 	rbit	r2, r2
 8001924:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001928:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800192c:	fab2 f282 	clz	r2, r2
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	f042 0220 	orr.w	r2, r2, #32
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f002 021f 	and.w	r2, r2, #31
 800193c:	2101      	movs	r1, #1
 800193e:	fa01 f202 	lsl.w	r2, r1, r2
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1af      	bne.n	80018a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80da 	beq.w	8001b0c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d069      	beq.n	8001a36 <HAL_RCC_OscConfig+0x6da>
 8001962:	2301      	movs	r3, #1
 8001964:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800196c:	fa93 f3a3 	rbit	r3, r3
 8001970:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x654>)
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	461a      	mov	r2, r3
 8001988:	2301      	movs	r3, #1
 800198a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff f862 	bl	8000a54 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f85d 	bl	8000a54 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d906      	bls.n	80019b4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e3d9      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	10908120 	.word	0x10908120
 80019b4:	2302      	movs	r3, #2
 80019b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019c6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019ca:	2202      	movs	r2, #2
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fa93 f2a3 	rbit	r2, r3
 80019d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	4ba5      	ldr	r3, [pc, #660]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 80019f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019fe:	2102      	movs	r1, #2
 8001a00:	6019      	str	r1, [r3, #0]
 8001a02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f1a3 	rbit	r1, r3
 8001a0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a10:	6019      	str	r1, [r3, #0]
  return result;
 8001a12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2101      	movs	r1, #1
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0b0      	beq.n	8001996 <HAL_RCC_OscConfig+0x63a>
 8001a34:	e06a      	b.n	8001b0c <HAL_RCC_OscConfig+0x7b0>
 8001a36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	fa93 f2a3 	rbit	r2, r3
 8001a48:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a4c:	601a      	str	r2, [r3, #0]
  return result;
 8001a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a52:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4b8c      	ldr	r3, [pc, #560]	; (8001c90 <HAL_RCC_OscConfig+0x934>)
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461a      	mov	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7fe fff4 	bl	8000a54 <HAL_GetTick>
 8001a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a72:	f7fe ffef 	bl	8000a54 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e36b      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001a86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	fa93 f2a3 	rbit	r2, r3
 8001ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001acc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	6019      	str	r1, [r3, #0]
 8001ada:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	fa93 f1a3 	rbit	r1, r3
 8001ae4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ae8:	6019      	str	r1, [r3, #0]
  return result;
 8001aea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2101      	movs	r1, #1
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1b2      	bne.n	8001a72 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8158 	beq.w	8001dcc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d112      	bne.n	8001b54 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a56      	ldr	r2, [pc, #344]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b54      	ldr	r3, [pc, #336]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b42:	f107 0308 	add.w	r3, r7, #8
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11a      	bne.n	8001b96 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4b      	ldr	r2, [pc, #300]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6c:	f7fe ff72 	bl	8000a54 <HAL_GetTick>
 8001b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7fe ff6d 	bl	8000a54 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	; 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e2e9      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCC_OscConfig+0x938>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ef      	beq.n	8001b76 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x852>
 8001ba0:	4b3a      	ldr	r3, [pc, #232]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a39      	ldr	r2, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e02f      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10c      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x876>
 8001bb8:	4b34      	ldr	r3, [pc, #208]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bbe:	f023 0301 	bic.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a30      	ldr	r2, [pc, #192]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e01d      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x89a>
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a27      	ldr	r2, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x8b2>
 8001bf6:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d06b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c18:	f7fe ff1c 	bl	8000a54 <HAL_GetTick>
 8001c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00b      	b.n	8001c3a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff17 	bl	8000a54 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e291      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001c3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c3e:	2202      	movs	r2, #2
 8001c40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	fa93 f2a3 	rbit	r2, r3
 8001c4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c68:	601a      	str	r2, [r3, #0]
  return result;
 8001c6a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c6e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	fab3 f383 	clz	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x93c>
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <HAL_RCC_OscConfig+0x930>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	e014      	b.n	8001cb4 <HAL_RCC_OscConfig+0x958>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	10908120 	.word	0x10908120
 8001c94:	40007000 	.word	0x40007000
 8001c98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	fa93 f2a3 	rbit	r2, r3
 8001caa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	4bbb      	ldr	r3, [pc, #748]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cb8:	2102      	movs	r1, #2
 8001cba:	6011      	str	r1, [r2, #0]
 8001cbc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	fa92 f1a2 	rbit	r1, r2
 8001cc6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cca:	6011      	str	r1, [r2, #0]
  return result;
 8001ccc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	fab2 f282 	clz	r2, r2
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	f002 021f 	and.w	r2, r2, #31
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d099      	beq.n	8001c22 <HAL_RCC_OscConfig+0x8c6>
 8001cee:	e063      	b.n	8001db8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf0:	f7fe feb0 	bl	8000a54 <HAL_GetTick>
 8001cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7fe feab 	bl	8000a54 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e225      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001d12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d16:	2202      	movs	r2, #2
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d2e:	2202      	movs	r2, #2
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	fa93 f2a3 	rbit	r2, r3
 8001d3c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d40:	601a      	str	r2, [r3, #0]
  return result;
 8001d42:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d46:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0302 	orr.w	r3, r3, #2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0xa06>
 8001d5c:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	e00d      	b.n	8001d7e <HAL_RCC_OscConfig+0xa22>
 8001d62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d66:	2202      	movs	r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	fa93 f2a3 	rbit	r2, r3
 8001d74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	4b89      	ldr	r3, [pc, #548]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d82:	2102      	movs	r1, #2
 8001d84:	6011      	str	r1, [r2, #0]
 8001d86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	fa92 f1a2 	rbit	r1, r2
 8001d90:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d94:	6011      	str	r1, [r2, #0]
  return result;
 8001d96:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	fab2 f282 	clz	r2, r2
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	f002 021f 	and.w	r2, r2, #31
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f202 	lsl.w	r2, r1, r2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1a0      	bne.n	8001cfa <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001db8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b77      	ldr	r3, [pc, #476]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	4a76      	ldr	r2, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 81c2 	beq.w	800215c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	f000 819c 	beq.w	800211e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	f040 8114 	bne.w	800201a <HAL_RCC_OscConfig+0xcbe>
 8001df2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e0a:	601a      	str	r2, [r3, #0]
  return result;
 8001e0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	fab3 f383 	clz	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	461a      	mov	r2, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe fe14 	bl	8000a54 <HAL_GetTick>
 8001e2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e32:	f7fe fe0f 	bl	8000a54 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e18b      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001e46:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fa93 f2a3 	rbit	r2, r3
 8001e5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e5e:	601a      	str	r2, [r3, #0]
  return result;
 8001e60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e64:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	095b      	lsrs	r3, r3, #5
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d102      	bne.n	8001e80 <HAL_RCC_OscConfig+0xb24>
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	e01b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xb5c>
 8001e80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fa93 f2a3 	rbit	r2, r3
 8001e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	fa93 f2a3 	rbit	r2, r3
 8001eae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ebc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec0:	6011      	str	r1, [r2, #0]
 8001ec2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fa92 f1a2 	rbit	r1, r2
 8001ecc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ed0:	6011      	str	r1, [r2, #0]
  return result;
 8001ed2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	fab2 f282 	clz	r2, r2
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f002 021f 	and.w	r2, r2, #31
 8001ee8:	2101      	movs	r1, #1
 8001eea:	fa01 f202 	lsl.w	r2, r1, r2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d19e      	bne.n	8001e32 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	4925      	ldr	r1, [pc, #148]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
 8001f10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fa93 f2a3 	rbit	r2, r3
 8001f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f28:	601a      	str	r2, [r3, #0]
  return result;
 8001f2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	461a      	mov	r2, r3
 8001f42:	2301      	movs	r3, #1
 8001f44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7fe fd85 	bl	8000a54 <HAL_GetTick>
 8001f4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fd80 	bl	8000a54 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0fc      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 8001f64:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7c:	601a      	str	r2, [r3, #0]
  return result;
 8001f7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xc48>
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <HAL_RCC_OscConfig+0xc44>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e01e      	b.n	8001fdc <HAL_RCC_OscConfig+0xc80>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe4:	6011      	str	r1, [r2, #0]
 8001fe6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fa92 f1a2 	rbit	r1, r2
 8001ff0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ff4:	6011      	str	r1, [r2, #0]
  return result;
 8001ff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b2d2      	uxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f002 021f 	and.w	r2, r2, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f202 	lsl.w	r2, r1, r2
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d09b      	beq.n	8001f50 <HAL_RCC_OscConfig+0xbf4>
 8002018:	e0a0      	b.n	800215c <HAL_RCC_OscConfig+0xe00>
 800201a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800201e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002022:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f2a3 	rbit	r2, r3
 800202e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002032:	601a      	str	r2, [r3, #0]
  return result;
 8002034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	461a      	mov	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7fe fd00 	bl	8000a54 <HAL_GetTick>
 8002054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fcfb 	bl	8000a54 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e077      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
 800206e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002072:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002076:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	fa93 f2a3 	rbit	r2, r3
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	601a      	str	r2, [r3, #0]
  return result;
 8002088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	fab3 f383 	clz	r3, r3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_RCC_OscConfig+0xd4c>
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	e01b      	b.n	80020e0 <HAL_RCC_OscConfig+0xd84>
 80020a8:	f107 0320 	add.w	r3, r7, #32
 80020ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f107 031c 	add.w	r3, r7, #28
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f107 0318 	add.w	r3, r7, #24
 80020c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f107 0210 	add.w	r2, r7, #16
 80020e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020e8:	6011      	str	r1, [r2, #0]
 80020ea:	f107 0210 	add.w	r2, r7, #16
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	fa92 f1a2 	rbit	r1, r2
 80020f4:	f107 020c 	add.w	r2, r7, #12
 80020f8:	6011      	str	r1, [r2, #0]
  return result;
 80020fa:	f107 020c 	add.w	r2, r7, #12
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	fab2 f282 	clz	r2, r2
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	f042 0220 	orr.w	r2, r2, #32
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	f002 021f 	and.w	r2, r2, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f202 	lsl.w	r2, r1, r2
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d19e      	bne.n	800205a <HAL_RCC_OscConfig+0xcfe>
 800211c:	e01e      	b.n	800215c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e018      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_RCC_OscConfig+0xe0c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002134:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002138:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	429a      	cmp	r2, r3
 8002144:	d108      	bne.n	8002158 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002146:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800214a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b09e      	sub	sp, #120	; 0x78
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e162      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d910      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002192:	4b8d      	ldr	r3, [pc, #564]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 0207 	bic.w	r2, r3, #7
 800219a:	498b      	ldr	r1, [pc, #556]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b89      	ldr	r3, [pc, #548]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e14a      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	497f      	ldr	r1, [pc, #508]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80dc 	beq.w	8002398 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d13c      	bne.n	8002262 <HAL_RCC_ClockConfig+0xf6>
 80021e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	fab3 f383 	clz	r3, r3
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d102      	bne.n	8002212 <HAL_RCC_ClockConfig+0xa6>
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e00f      	b.n	8002232 <HAL_RCC_ClockConfig+0xc6>
 8002212:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	667b      	str	r3, [r7, #100]	; 0x64
 8002220:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002224:	663b      	str	r3, [r7, #96]	; 0x60
 8002226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800222e:	4b67      	ldr	r3, [pc, #412]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002236:	65ba      	str	r2, [r7, #88]	; 0x58
 8002238:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f042 0220 	orr.w	r2, r2, #32
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	f002 021f 	and.w	r2, r2, #31
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d17b      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0f3      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d13c      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x178>
 800226a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_ClockConfig+0x128>
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e00f      	b.n	80022b4 <HAL_RCC_ClockConfig+0x148>
 8002294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002298:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	647b      	str	r3, [r7, #68]	; 0x44
 80022a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
 80022a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b0:	4b46      	ldr	r3, [pc, #280]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80022ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022bc:	fa92 f2a2 	rbit	r2, r2
 80022c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d13a      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0b2      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
 80022e4:	2302      	movs	r3, #2
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_RCC_ClockConfig+0x1a0>
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e00d      	b.n	8002328 <HAL_RCC_ClockConfig+0x1bc>
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	2302      	movs	r3, #2
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	2202      	movs	r2, #2
 800232a:	61ba      	str	r2, [r7, #24]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	617a      	str	r2, [r7, #20]
  return result;
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	fab2 f282 	clz	r2, r2
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	f042 0220 	orr.w	r2, r2, #32
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f002 021f 	and.w	r2, r2, #31
 8002346:	2101      	movs	r1, #1
 8002348:	fa01 f202 	lsl.w	r2, r1, r2
 800234c:	4013      	ands	r3, r2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e079      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	491a      	ldr	r1, [pc, #104]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002368:	f7fe fb74 	bl	8000a54 <HAL_GetTick>
 800236c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7fe fb70 	bl	8000a54 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e061      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <HAL_RCC_ClockConfig+0x260>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d214      	bcs.n	80023d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4906      	ldr	r1, [pc, #24]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_RCC_ClockConfig+0x25c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e040      	b.n	800244a <HAL_RCC_ClockConfig+0x2de>
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	491a      	ldr	r1, [pc, #104]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4912      	ldr	r1, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800240e:	f000 f829 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002412:	4601      	mov	r1, r0
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_ClockConfig+0x2e8>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	22f0      	movs	r2, #240	; 0xf0
 800241e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	60fa      	str	r2, [r7, #12]
  return result;
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	40d3      	lsrs	r3, r2
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_RCC_ClockConfig+0x2ec>)
 8002434:	5cd3      	ldrb	r3, [r2, r3]
 8002436:	fa21 f303 	lsr.w	r3, r1, r3
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_RCC_ClockConfig+0x2f0>)
 800243c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <HAL_RCC_ClockConfig+0x2f4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fa28 	bl	8000898 <HAL_InitTick>
  
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3778      	adds	r7, #120	; 0x78
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	08005324 	.word	0x08005324
 800245c:	20000000 	.word	0x20000000
 8002460:	20000004 	.word	0x20000004

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b08b      	sub	sp, #44	; 0x2c
 8002468:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e03c      	b.n	800250e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002496:	623b      	str	r3, [r7, #32]
      break;
 8002498:	e03c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	fa92 f2a2 	rbit	r2, r2
 80024ac:	607a      	str	r2, [r7, #4]
  return result;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	40d3      	lsrs	r3, r2
 80024b8:	4a1c      	ldr	r2, [pc, #112]	; (800252c <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ba:	5cd3      	ldrb	r3, [r2, r3]
 80024bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	220f      	movs	r2, #15
 80024c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	fa92 f2a2 	rbit	r2, r2
 80024d0:	60fa      	str	r2, [r7, #12]
  return result;
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	fab2 f282 	clz	r2, r2
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	40d3      	lsrs	r3, r2
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	e004      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0c      	ldr	r2, [pc, #48]	; (8002534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	623b      	str	r3, [r7, #32]
      break;
 800250c:	e002      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002510:	623b      	str	r3, [r7, #32]
      break;
 8002512:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002514:	6a3b      	ldr	r3, [r7, #32]
}
 8002516:	4618      	mov	r0, r3
 8002518:	372c      	adds	r7, #44	; 0x2c
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	40021000 	.word	0x40021000
 8002528:	007a1200 	.word	0x007a1200
 800252c:	0800533c 	.word	0x0800533c
 8002530:	0800534c 	.word	0x0800534c
 8002534:	003d0900 	.word	0x003d0900

08002538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_GetHCLKFreq+0x14>)
 800253e:	681b      	ldr	r3, [r3, #0]
}
 8002540:	4618      	mov	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002556:	f7ff ffef 	bl	8002538 <HAL_RCC_GetHCLKFreq>
 800255a:	4601      	mov	r1, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002568:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	fa92 f2a2 	rbit	r2, r2
 8002570:	603a      	str	r2, [r7, #0]
  return result;
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	fab2 f282 	clz	r2, r2
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	40d3      	lsrs	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x40>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08005334 	.word	0x08005334

08002594 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	220f      	movs	r2, #15
 80025a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetClockConfig+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0207 	and.w	r2, r3, #7
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40022000 	.word	0x40022000

080025f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b092      	sub	sp, #72	; 0x48
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80d4 	beq.w	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261c:	4b4e      	ldr	r3, [pc, #312]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002632:	61d3      	str	r3, [r2, #28]
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002646:	4b45      	ldr	r3, [pc, #276]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a41      	ldr	r2, [pc, #260]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800265e:	f7fe f9f9 	bl	8000a54 <HAL_GetTick>
 8002662:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002664:	e008      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe f9f5 	bl	8000a54 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	; 0x64
 8002672:	d901      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e169      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002684:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 8084 	beq.w	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d07c      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b26      	ldr	r3, [pc, #152]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	461a      	mov	r2, r3
 80026ce:	2301      	movs	r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	461a      	mov	r2, r3
 80026f2:	2300      	movs	r3, #0
 80026f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d04b      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002706:	f7fe f9a5 	bl	8000a54 <HAL_GetTick>
 800270a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe f9a1 	bl	8000a54 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e113      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002724:	2302      	movs	r3, #2
 8002726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
 8002730:	2302      	movs	r3, #2
 8002732:	623b      	str	r3, [r7, #32]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	61fb      	str	r3, [r7, #28]
  return result;
 800273c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d108      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002752:	4b01      	ldr	r3, [pc, #4]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	e00d      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	10908100 	.word	0x10908100
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa93 f3a3 	rbit	r3, r3
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	4b78      	ldr	r3, [pc, #480]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	2202      	movs	r2, #2
 8002776:	613a      	str	r2, [r7, #16]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	fa92 f2a2 	rbit	r2, r2
 800277e:	60fa      	str	r2, [r7, #12]
  return result;
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	fab2 f282 	clz	r2, r2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f002 021f 	and.w	r2, r2, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0b7      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800279e:	4b6d      	ldr	r3, [pc, #436]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	496a      	ldr	r1, [pc, #424]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b8:	4b66      	ldr	r3, [pc, #408]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d0:	4b60      	ldr	r3, [pc, #384]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f023 0203 	bic.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	495d      	ldr	r1, [pc, #372]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ee:	4b59      	ldr	r3, [pc, #356]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	4956      	ldr	r1, [pc, #344]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800280c:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	494e      	ldr	r1, [pc, #312]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282a:	4b4a      	ldr	r3, [pc, #296]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f023 0210 	bic.w	r2, r3, #16
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4947      	ldr	r1, [pc, #284]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002848:	4b42      	ldr	r3, [pc, #264]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	493f      	ldr	r1, [pc, #252]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f023 0220 	bic.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4938      	ldr	r1, [pc, #224]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002874:	4313      	orrs	r3, r2
 8002876:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	4930      	ldr	r1, [pc, #192]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d008      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028a2:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	4929      	ldr	r1, [pc, #164]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c0:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028cc:	4921      	ldr	r1, [pc, #132]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	491a      	ldr	r1, [pc, #104]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028fc:	4b15      	ldr	r3, [pc, #84]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	4912      	ldr	r1, [pc, #72]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	490b      	ldr	r1, [pc, #44]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002928:	4313      	orrs	r3, r2
 800292a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3748      	adds	r7, #72	; 0x48
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e09d      	b.n	8002aa6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b00      	cmp	r3, #0
 8002970:	d108      	bne.n	8002984 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800297a:	d009      	beq.n	8002990 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	61da      	str	r2, [r3, #28]
 8002982:	e005      	b.n	8002990 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fd feee 	bl	800078c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d0:	d902      	bls.n	80029d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e002      	b.n	80029de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029e6:	d007      	beq.n	80029f8 <HAL_SPI_Init+0xa0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029f0:	d002      	beq.n	80029f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	ea42 0103 	orr.w	r1, r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f003 0204 	and.w	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a74:	ea42 0103 	orr.w	r1, r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e049      	b.n	8002b54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f841 	bl	8002b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f000 f9f1 	bl	8002ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d001      	beq.n	8002b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e04a      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x6c>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d115      	bne.n	8002c08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d015      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0xaa>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d011      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	e008      	b.n	8002c1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40013400 	.word	0x40013400
 8002c3c:	40014000 	.word	0x40014000
 8002c40:	00010007 	.word	0x00010007

08002c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d122      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d11b      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0202 	mvn.w	r2, #2
 8002c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f905 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002c8c:	e005      	b.n	8002c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8f7 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f908 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d122      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d11b      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0204 	mvn.w	r2, #4
 8002cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f8db 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8cd 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f8de 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d122      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d11b      	bne.n	8002d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0208 	mvn.w	r2, #8
 8002d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8b1 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d34:	e005      	b.n	8002d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8a3 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f8b4 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0310 	and.w	r3, r3, #16
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0210 	mvn.w	r2, #16
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2208      	movs	r2, #8
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f887 	bl	8002e96 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f879 	bl	8002e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f88a 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0201 	mvn.w	r2, #1
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd fc5e 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f90a 	bl	8003008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e02:	d10e      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0e:	2b80      	cmp	r3, #128	; 0x80
 8002e10:	d107      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8fd 	bl	800301c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d10e      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d107      	bne.n	8002e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f838 	bl	8002ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d10e      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d107      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f06f 0220 	mvn.w	r2, #32
 8002e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8bd 	bl	8002ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a39      	ldr	r2, [pc, #228]	; (8002fdc <TIM_Base_SetConfig+0x108>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <TIM_Base_SetConfig+0x10c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x38>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a37      	ldr	r2, [pc, #220]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d017      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2a      	ldr	r2, [pc, #168]	; (8002fdc <TIM_Base_SetConfig+0x108>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a29      	ldr	r2, [pc, #164]	; (8002fe0 <TIM_Base_SetConfig+0x10c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00f      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a28      	ldr	r2, [pc, #160]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a27      	ldr	r2, [pc, #156]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0x8a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a25      	ldr	r2, [pc, #148]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d108      	bne.n	8002f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a10      	ldr	r2, [pc, #64]	; (8002fd8 <TIM_Base_SetConfig+0x104>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <TIM_Base_SetConfig+0x110>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <TIM_Base_SetConfig+0x114>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <TIM_Base_SetConfig+0x118>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0xe8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <TIM_Base_SetConfig+0x11c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d103      	bne.n	8002fc4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	615a      	str	r2, [r3, #20]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800

08002ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003038:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800303c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	b29b      	uxth	r3, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	b29b      	uxth	r3, r3
 800304e:	4013      	ands	r3, r2
 8003050:	b29a      	uxth	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003066:	b084      	sub	sp, #16
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	f107 0014 	add.w	r0, r7, #20
 8003074:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	b004      	add	sp, #16
 80030a6:	4770      	bx	lr

080030a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	2b84      	cmp	r3, #132	; 0x84
 80030bc:	d005      	beq.n	80030ca <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	3303      	adds	r3, #3
 80030c8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030dc:	f000 fe8a 	bl	8003df4 <vTaskStartScheduler>
  
  return osOK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80030e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e8:	b089      	sub	sp, #36	; 0x24
 80030ea:	af04      	add	r7, sp, #16
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <osThreadCreate+0x54>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01c      	beq.n	800313a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685c      	ldr	r4, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681d      	ldr	r5, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691e      	ldr	r6, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ffc8 	bl	80030a8 <makeFreeRtosPriority>
 8003118:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003122:	9202      	str	r2, [sp, #8]
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	9100      	str	r1, [sp, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4632      	mov	r2, r6
 800312c:	4629      	mov	r1, r5
 800312e:	4620      	mov	r0, r4
 8003130:	f000 fc8a 	bl	8003a48 <xTaskCreateStatic>
 8003134:	4603      	mov	r3, r0
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e01c      	b.n	8003174 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685c      	ldr	r4, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003146:	b29e      	uxth	r6, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ffaa 	bl	80030a8 <makeFreeRtosPriority>
 8003154:	4602      	mov	r2, r0
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	9200      	str	r2, [sp, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	4632      	mov	r2, r6
 8003162:	4629      	mov	r1, r5
 8003164:	4620      	mov	r0, r4
 8003166:	f000 fccb 	bl	8003b00 <xTaskCreate>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003174:	68fb      	ldr	r3, [r7, #12]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800317e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b084      	sub	sp, #16
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <osDelay+0x16>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	e000      	b.n	8003196 <osDelay+0x18>
 8003194:	2301      	movs	r3, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fdf8 	bl	8003d8c <vTaskDelay>
  
  return osOK;
 800319c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4619      	mov	r1, r3
 80031bc:	2001      	movs	r0, #1
 80031be:	f000 fa55 	bl	800366c <xQueueCreateMutexStatic>
 80031c2:	4603      	mov	r3, r0
 80031c4:	e003      	b.n	80031ce <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80031c6:	2001      	movs	r0, #1
 80031c8:	f000 fa38 	bl	800363c <xQueueCreateMutex>
 80031cc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80031d6:	b590      	push	{r4, r7, lr}
 80031d8:	b085      	sub	sp, #20
 80031da:	af02      	add	r7, sp, #8
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d011      	beq.n	800320c <osMessageCreate+0x36>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2400      	movs	r4, #0
 8003202:	9400      	str	r4, [sp, #0]
 8003204:	f000 f92c 	bl	8003460 <xQueueGenericCreateStatic>
 8003208:	4603      	mov	r3, r0
 800320a:	e008      	b.n	800321e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	4619      	mov	r1, r3
 8003218:	f000 f999 	bl	800354e <xQueueGenericCreate>
 800321c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bd90      	pop	{r4, r7, pc}

08003226 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f103 0208 	add.w	r2, r3, #8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f04f 32ff 	mov.w	r2, #4294967295
 800323e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f103 0208 	add.w	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f103 0208 	add.w	r2, r3, #8
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	601a      	str	r2, [r3, #0]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032de:	d103      	bne.n	80032e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	e00c      	b.n	8003302 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3308      	adds	r3, #8
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e002      	b.n	80032f6 <vListInsert+0x2e>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d2f6      	bcs.n	80032f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	601a      	str	r2, [r3, #0]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6892      	ldr	r2, [r2, #8]
 8003350:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6852      	ldr	r2, [r2, #4]
 800335a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	429a      	cmp	r2, r3
 8003364:	d103      	bne.n	800336e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a8:	f383 8811 	msr	BASEPRI, r3
 80033ac:	f3bf 8f6f 	isb	sy
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033b6:	bf00      	nop
 80033b8:	e7fe      	b.n	80033b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80033ba:	f001 fb83 	bl	8004ac4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033ca:	fb01 f303 	mul.w	r3, r1, r3
 80033ce:	441a      	add	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	3b01      	subs	r3, #1
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80033f0:	fb01 f303 	mul.w	r3, r1, r3
 80033f4:	441a      	add	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22ff      	movs	r2, #255	; 0xff
 8003406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d114      	bne.n	800343a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01a      	beq.n	800344e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3310      	adds	r3, #16
 800341c:	4618      	mov	r0, r3
 800341e:	f000 ff51 	bl	80042c4 <xTaskRemoveFromEventList>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d012      	beq.n	800344e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <xQueueGenericReset+0xcc>)
 800342a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	e009      	b.n	800344e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3310      	adds	r3, #16
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fef1 	bl	8003226 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3324      	adds	r3, #36	; 0x24
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff feec 	bl	8003226 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f001 fb69 	bl	8004b24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003452:	2301      	movs	r3, #1
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	e000ed04 	.word	0xe000ed04

08003460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08e      	sub	sp, #56	; 0x38
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
 800346c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003486:	bf00      	nop
 8003488:	e7fe      	b.n	8003488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <xQueueGenericCreateStatic+0x52>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <xQueueGenericCreateStatic+0x56>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <xQueueGenericCreateStatic+0x58>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10a      	bne.n	80034d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80034bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	623b      	str	r3, [r7, #32]
}
 80034ce:	bf00      	nop
 80034d0:	e7fe      	b.n	80034d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <xQueueGenericCreateStatic+0x7e>
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <xQueueGenericCreateStatic+0x82>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueGenericCreateStatic+0x84>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61fb      	str	r3, [r7, #28]
}
 80034fa:	bf00      	nop
 80034fc:	e7fe      	b.n	80034fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80034fe:	2348      	movs	r3, #72	; 0x48
 8003500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b48      	cmp	r3, #72	; 0x48
 8003506:	d00a      	beq.n	800351e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61bb      	str	r3, [r7, #24]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003530:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f843 	bl	80035ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003546:	4618      	mov	r0, r3
 8003548:	3730      	adds	r7, #48	; 0x30
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800354e:	b580      	push	{r7, lr}
 8003550:	b08a      	sub	sp, #40	; 0x28
 8003552:	af02      	add	r7, sp, #8
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	4613      	mov	r3, r2
 800355a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	613b      	str	r3, [r7, #16]
}
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800357e:	2300      	movs	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e004      	b.n	800358e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3348      	adds	r3, #72	; 0x48
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fb78 	bl	8004c88 <pvPortMalloc>
 8003598:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00f      	beq.n	80035c0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	3348      	adds	r3, #72	; 0x48
 80035a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035ae:	79fa      	ldrb	r2, [r7, #7]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f805 	bl	80035ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80035c0:	69bb      	ldr	r3, [r7, #24]
	}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	60f8      	str	r0, [r7, #12]
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d103      	bne.n	80035e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e002      	b.n	80035ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035f8:	2101      	movs	r1, #1
 80035fa:	69b8      	ldr	r0, [r7, #24]
 80035fc:	f7ff fec8 	bl	8003390 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003628:	2300      	movs	r3, #0
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f838 	bl	80036a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003634:	bf00      	nop
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	2300      	movs	r3, #0
 800364c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	461a      	mov	r2, r3
 8003652:	6939      	ldr	r1, [r7, #16]
 8003654:	6978      	ldr	r0, [r7, #20]
 8003656:	f7ff ff7a 	bl	800354e <xQueueGenericCreate>
 800365a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ffd3 	bl	8003608 <prvInitialiseMutex>

		return pxNewQueue;
 8003662:	68fb      	ldr	r3, [r7, #12]
	}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	6939      	ldr	r1, [r7, #16]
 800368a:	6978      	ldr	r0, [r7, #20]
 800368c:	f7ff fee8 	bl	8003460 <xQueueGenericCreateStatic>
 8003690:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff ffb8 	bl	8003608 <prvInitialiseMutex>

		return pxNewQueue;
 8003698:	68fb      	ldr	r3, [r7, #12]
	}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08e      	sub	sp, #56	; 0x38
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036b2:	2300      	movs	r3, #0
 80036b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <xQueueGenericSend+0x32>
	__asm volatile
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036d2:	bf00      	nop
 80036d4:	e7fe      	b.n	80036d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <xQueueGenericSend+0x40>
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d101      	bne.n	80036e8 <xQueueGenericSend+0x44>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <xQueueGenericSend+0x46>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10a      	bne.n	8003704 <xQueueGenericSend+0x60>
	__asm volatile
 80036ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003700:	bf00      	nop
 8003702:	e7fe      	b.n	8003702 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d103      	bne.n	8003712 <xQueueGenericSend+0x6e>
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <xQueueGenericSend+0x72>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xQueueGenericSend+0x74>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <xQueueGenericSend+0x8e>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	623b      	str	r3, [r7, #32]
}
 800372e:	bf00      	nop
 8003730:	e7fe      	b.n	8003730 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003732:	f000 ff8d 	bl	8004650 <xTaskGetSchedulerState>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <xQueueGenericSend+0x9e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <xQueueGenericSend+0xa2>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <xQueueGenericSend+0xa4>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericSend+0xbe>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	61fb      	str	r3, [r7, #28]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003762:	f001 f9af 	bl	8004ac4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003768:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <xQueueGenericSend+0xd4>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d129      	bne.n	80037cc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800377e:	f000 f88f 	bl	80038a0 <prvCopyDataToQueue>
 8003782:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d010      	beq.n	80037ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	3324      	adds	r3, #36	; 0x24
 8003790:	4618      	mov	r0, r3
 8003792:	f000 fd97 	bl	80042c4 <xTaskRemoveFromEventList>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800379c:	4b3f      	ldr	r3, [pc, #252]	; (800389c <xQueueGenericSend+0x1f8>)
 800379e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	e00a      	b.n	80037c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <xQueueGenericSend+0x1f8>)
 80037b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80037c4:	f001 f9ae 	bl	8004b24 <vPortExitCritical>
				return pdPASS;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e063      	b.n	8003894 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037d2:	f001 f9a7 	bl	8004b24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e05c      	b.n	8003894 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fdcf 	bl	8004388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037ea:	2301      	movs	r3, #1
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ee:	f001 f999 	bl	8004b24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037f2:	f000 fb69 	bl	8003ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037f6:	f001 f965 	bl	8004ac4 <vPortEnterCritical>
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003800:	b25b      	sxtb	r3, r3
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d103      	bne.n	8003810 <xQueueGenericSend+0x16c>
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	b25b      	sxtb	r3, r3
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d103      	bne.n	8003826 <xQueueGenericSend+0x182>
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003826:	f001 f97d 	bl	8004b24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800382a:	1d3a      	adds	r2, r7, #4
 800382c:	f107 0314 	add.w	r3, r7, #20
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fdbe 	bl	80043b4 <xTaskCheckForTimeOut>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d124      	bne.n	8003888 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800383e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003840:	f000 f8ea 	bl	8003a18 <prvIsQueueFull>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	3310      	adds	r3, #16
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fd12 	bl	800427c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385a:	f000 f88b 	bl	8003974 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800385e:	f000 fb41 	bl	8003ee4 <xTaskResumeAll>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f af7c 	bne.w	8003762 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800386a:	4b0c      	ldr	r3, [pc, #48]	; (800389c <xQueueGenericSend+0x1f8>)
 800386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	e772      	b.n	8003762 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800387c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800387e:	f000 f879 	bl	8003974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003882:	f000 fb2f 	bl	8003ee4 <xTaskResumeAll>
 8003886:	e76c      	b.n	8003762 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800388a:	f000 f873 	bl	8003974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800388e:	f000 fb29 	bl	8003ee4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003892:	2300      	movs	r3, #0
		}
	}
}
 8003894:	4618      	mov	r0, r3
 8003896:	3738      	adds	r7, #56	; 0x38
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10d      	bne.n	80038da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d14d      	bne.n	8003962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fede 	bl	800468c <xTaskPriorityDisinherit>
 80038d0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	e043      	b.n	8003962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d119      	bne.n	8003914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6898      	ldr	r0, [r3, #8]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	461a      	mov	r2, r3
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	f001 fbd2 	bl	8005094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	441a      	add	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	429a      	cmp	r2, r3
 8003908:	d32b      	bcc.n	8003962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	609a      	str	r2, [r3, #8]
 8003912:	e026      	b.n	8003962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	68d8      	ldr	r0, [r3, #12]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	461a      	mov	r2, r3
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	f001 fbb8 	bl	8005094 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	425b      	negs	r3, r3
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d207      	bcs.n	8003950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	425b      	negs	r3, r3
 800394a:	441a      	add	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d105      	bne.n	8003962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	3b01      	subs	r3, #1
 8003960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800396a:	697b      	ldr	r3, [r7, #20]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800397c:	f001 f8a2 	bl	8004ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003986:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003988:	e011      	b.n	80039ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	2b00      	cmp	r3, #0
 8003990:	d012      	beq.n	80039b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3324      	adds	r3, #36	; 0x24
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fc94 	bl	80042c4 <xTaskRemoveFromEventList>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039a2:	f000 fd69 	bl	8004478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	dce9      	bgt.n	800398a <prvUnlockQueue+0x16>
 80039b6:	e000      	b.n	80039ba <prvUnlockQueue+0x46>
					break;
 80039b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	22ff      	movs	r2, #255	; 0xff
 80039be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80039c2:	f001 f8af 	bl	8004b24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039c6:	f001 f87d 	bl	8004ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039d2:	e011      	b.n	80039f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3310      	adds	r3, #16
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc6f 	bl	80042c4 <xTaskRemoveFromEventList>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039ec:	f000 fd44 	bl	8004478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	dce9      	bgt.n	80039d4 <prvUnlockQueue+0x60>
 8003a00:	e000      	b.n	8003a04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	22ff      	movs	r2, #255	; 0xff
 8003a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a0c:	f001 f88a 	bl	8004b24 <vPortExitCritical>
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a20:	f001 f850 	bl	8004ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d102      	bne.n	8003a36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	e001      	b.n	8003a3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a3a:	f001 f873 	bl	8004b24 <vPortExitCritical>

	return xReturn;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	; 0x38
 8003a4c:	af04      	add	r7, sp, #16
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10a      	bne.n	8003a72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	623b      	str	r3, [r7, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	e7fe      	b.n	8003a70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <xTaskCreateStatic+0x46>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	61fb      	str	r3, [r7, #28]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a8e:	23b4      	movs	r3, #180	; 0xb4
 8003a90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	2bb4      	cmp	r3, #180	; 0xb4
 8003a96:	d00a      	beq.n	8003aae <xTaskCreateStatic+0x66>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	61bb      	str	r3, [r7, #24]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01e      	beq.n	8003af2 <xTaskCreateStatic+0xaa>
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01b      	beq.n	8003af2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003acc:	2300      	movs	r3, #0
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	9302      	str	r3, [sp, #8]
 8003ad4:	f107 0314 	add.w	r3, r7, #20
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f851 	bl	8003b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aec:	f000 f8e4 	bl	8003cb8 <prvAddNewTaskToReadyList>
 8003af0:	e001      	b.n	8003af6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003af6:	697b      	ldr	r3, [r7, #20]
	}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3728      	adds	r7, #40	; 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08c      	sub	sp, #48	; 0x30
 8003b04:	af04      	add	r7, sp, #16
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 f8b7 	bl	8004c88 <pvPortMalloc>
 8003b1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b22:	20b4      	movs	r0, #180	; 0xb4
 8003b24:	f001 f8b0 	bl	8004c88 <pvPortMalloc>
 8003b28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
 8003b36:	e005      	b.n	8003b44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b38:	6978      	ldr	r0, [r7, #20]
 8003b3a:	f001 f96f 	bl	8004e1c <vPortFree>
 8003b3e:	e001      	b.n	8003b44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d017      	beq.n	8003b7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	9302      	str	r3, [sp, #8]
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f80f 	bl	8003b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b6e:	69f8      	ldr	r0, [r7, #28]
 8003b70:	f000 f8a2 	bl	8003cb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b74:	2301      	movs	r3, #1
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e002      	b.n	8003b80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b80:	69bb      	ldr	r3, [r7, #24]
	}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3720      	adds	r7, #32
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	f003 0307 	and.w	r3, r3, #7
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	617b      	str	r3, [r7, #20]
}
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	e012      	b.n	8003c00 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	7819      	ldrb	r1, [r3, #0]
 8003be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	3334      	adds	r3, #52	; 0x34
 8003bea:	460a      	mov	r2, r1
 8003bec:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b0f      	cmp	r3, #15
 8003c04:	d9e9      	bls.n	8003bda <prvInitialiseNewTask+0x4e>
 8003c06:	e000      	b.n	8003c0a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003c08:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	2b06      	cmp	r3, #6
 8003c16:	d901      	bls.n	8003c1c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c18:	2306      	movs	r3, #6
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c30:	3304      	adds	r3, #4
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fb17 	bl	8003266 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	3318      	adds	r3, #24
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fb12 	bl	8003266 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	f1c3 0207 	rsb	r2, r3, #7
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	334c      	adds	r3, #76	; 0x4c
 8003c6c:	2260      	movs	r2, #96	; 0x60
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 fa1d 	bl	80050b0 <memset>
 8003c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c78:	4a0c      	ldr	r2, [pc, #48]	; (8003cac <prvInitialiseNewTask+0x120>)
 8003c7a:	651a      	str	r2, [r3, #80]	; 0x50
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <prvInitialiseNewTask+0x124>)
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <prvInitialiseNewTask+0x128>)
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	69b8      	ldr	r0, [r7, #24]
 8003c8e:	f000 fde9 	bl	8004864 <pxPortInitialiseStack>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	0800537c 	.word	0x0800537c
 8003cb0:	0800539c 	.word	0x0800539c
 8003cb4:	0800535c 	.word	0x0800535c

08003cb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003cc0:	f000 ff00 	bl	8004ac4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <prvAddNewTaskToReadyList+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	4a29      	ldr	r2, [pc, #164]	; (8003d70 <prvAddNewTaskToReadyList+0xb8>)
 8003ccc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <prvAddNewTaskToReadyList+0xbc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cd6:	4a27      	ldr	r2, [pc, #156]	; (8003d74 <prvAddNewTaskToReadyList+0xbc>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <prvAddNewTaskToReadyList+0xb8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d110      	bne.n	8003d06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ce4:	f000 fbec 	bl	80044c0 <prvInitialiseTaskLists>
 8003ce8:	e00d      	b.n	8003d06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <prvAddNewTaskToReadyList+0xc0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <prvAddNewTaskToReadyList+0xbc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d802      	bhi.n	8003d06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d00:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <prvAddNewTaskToReadyList+0xbc>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <prvAddNewTaskToReadyList+0xc4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <prvAddNewTaskToReadyList+0xc4>)
 8003d0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	2201      	movs	r2, #1
 8003d16:	409a      	lsls	r2, r3
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <prvAddNewTaskToReadyList+0xc8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <prvAddNewTaskToReadyList+0xc8>)
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <prvAddNewTaskToReadyList+0xcc>)
 8003d30:	441a      	add	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7ff faa1 	bl	8003280 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d3e:	f000 fef1 	bl	8004b24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <prvAddNewTaskToReadyList+0xc0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <prvAddNewTaskToReadyList+0xbc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d207      	bcs.n	8003d68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <prvAddNewTaskToReadyList+0xd0>)
 8003d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000444 	.word	0x20000444
 8003d74:	20000344 	.word	0x20000344
 8003d78:	20000450 	.word	0x20000450
 8003d7c:	20000460 	.word	0x20000460
 8003d80:	2000044c 	.word	0x2000044c
 8003d84:	20000348 	.word	0x20000348
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d017      	beq.n	8003dce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d9e:	4b13      	ldr	r3, [pc, #76]	; (8003dec <vTaskDelay+0x60>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <vTaskDelay+0x30>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	60bb      	str	r3, [r7, #8]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003dbc:	f000 f884 	bl	8003ec8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fce8 	bl	8004798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dc8:	f000 f88c 	bl	8003ee4 <xTaskResumeAll>
 8003dcc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d107      	bne.n	8003de4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <vTaskDelay+0x64>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	2000046c 	.word	0x2000046c
 8003df0:	e000ed04 	.word	0xe000ed04

08003df4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e02:	463a      	mov	r2, r7
 8003e04:	1d39      	adds	r1, r7, #4
 8003e06:	f107 0308 	add.w	r3, r7, #8
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fc f9f2 	bl	80001f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	9202      	str	r2, [sp, #8]
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	460a      	mov	r2, r1
 8003e22:	4921      	ldr	r1, [pc, #132]	; (8003ea8 <vTaskStartScheduler+0xb4>)
 8003e24:	4821      	ldr	r0, [pc, #132]	; (8003eac <vTaskStartScheduler+0xb8>)
 8003e26:	f7ff fe0f 	bl	8003a48 <xTaskCreateStatic>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <vTaskStartScheduler+0xbc>)
 8003e2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e30:	4b1f      	ldr	r3, [pc, #124]	; (8003eb0 <vTaskStartScheduler+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e001      	b.n	8003e42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d11b      	bne.n	8003e80 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	613b      	str	r3, [r7, #16]
}
 8003e5a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e5c:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <vTaskStartScheduler+0xc0>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	334c      	adds	r3, #76	; 0x4c
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <vTaskStartScheduler+0xc4>)
 8003e64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <vTaskStartScheduler+0xc8>)
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e6e:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <vTaskStartScheduler+0xcc>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e74:	4b13      	ldr	r3, [pc, #76]	; (8003ec4 <vTaskStartScheduler+0xd0>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e7a:	f000 fd81 	bl	8004980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e7e:	e00e      	b.n	8003e9e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d10a      	bne.n	8003e9e <vTaskStartScheduler+0xaa>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	60fb      	str	r3, [r7, #12]
}
 8003e9a:	bf00      	nop
 8003e9c:	e7fe      	b.n	8003e9c <vTaskStartScheduler+0xa8>
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	0800531c 	.word	0x0800531c
 8003eac:	08004491 	.word	0x08004491
 8003eb0:	20000468 	.word	0x20000468
 8003eb4:	20000344 	.word	0x20000344
 8003eb8:	20000010 	.word	0x20000010
 8003ebc:	20000464 	.word	0x20000464
 8003ec0:	20000450 	.word	0x20000450
 8003ec4:	20000448 	.word	0x20000448

08003ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <vTaskSuspendAll+0x18>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	4a03      	ldr	r2, [pc, #12]	; (8003ee0 <vTaskSuspendAll+0x18>)
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	2000046c 	.word	0x2000046c

08003ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <xTaskResumeAll+0x114>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <xTaskResumeAll+0x2c>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	603b      	str	r3, [r7, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	e7fe      	b.n	8003f0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f10:	f000 fdd8 	bl	8004ac4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f14:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <xTaskResumeAll+0x114>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <xTaskResumeAll+0x114>)
 8003f1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1e:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <xTaskResumeAll+0x114>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d161      	bne.n	8003fea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f26:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <xTaskResumeAll+0x118>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d05d      	beq.n	8003fea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f2e:	e02e      	b.n	8003f8e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f30:	4b33      	ldr	r3, [pc, #204]	; (8004000 <xTaskResumeAll+0x11c>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3318      	adds	r3, #24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff f9fc 	bl	800333a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff f9f7 	bl	800333a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	2201      	movs	r2, #1
 8003f52:	409a      	lsls	r2, r3
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <xTaskResumeAll+0x120>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <xTaskResumeAll+0x120>)
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4a27      	ldr	r2, [pc, #156]	; (8004008 <xTaskResumeAll+0x124>)
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f7ff f983 	bl	8003280 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7e:	4b23      	ldr	r3, [pc, #140]	; (800400c <xTaskResumeAll+0x128>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d302      	bcc.n	8003f8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <xTaskResumeAll+0x12c>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <xTaskResumeAll+0x11c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1cc      	bne.n	8003f30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f9c:	f000 fb32 	bl	8004604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <xTaskResumeAll+0x130>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fac:	f000 f836 	bl	800401c <xTaskIncrementTick>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <xTaskResumeAll+0x12c>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f1      	bne.n	8003fac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <xTaskResumeAll+0x130>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xTaskResumeAll+0x12c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <xTaskResumeAll+0x134>)
 8003fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fea:	f000 fd9b 	bl	8004b24 <vPortExitCritical>

	return xAlreadyYielded;
 8003fee:	68bb      	ldr	r3, [r7, #8]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	2000046c 	.word	0x2000046c
 8003ffc:	20000444 	.word	0x20000444
 8004000:	20000404 	.word	0x20000404
 8004004:	2000044c 	.word	0x2000044c
 8004008:	20000348 	.word	0x20000348
 800400c:	20000344 	.word	0x20000344
 8004010:	20000458 	.word	0x20000458
 8004014:	20000454 	.word	0x20000454
 8004018:	e000ed04 	.word	0xe000ed04

0800401c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <xTaskIncrementTick+0x150>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	f040 808d 	bne.w	800414a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <xTaskIncrementTick+0x154>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004038:	4a4d      	ldr	r2, [pc, #308]	; (8004170 <xTaskIncrementTick+0x154>)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d120      	bne.n	8004086 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004044:	4b4b      	ldr	r3, [pc, #300]	; (8004174 <xTaskIncrementTick+0x158>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <xTaskIncrementTick+0x48>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	603b      	str	r3, [r7, #0]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xTaskIncrementTick+0x46>
 8004064:	4b43      	ldr	r3, [pc, #268]	; (8004174 <xTaskIncrementTick+0x158>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	4b43      	ldr	r3, [pc, #268]	; (8004178 <xTaskIncrementTick+0x15c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a41      	ldr	r2, [pc, #260]	; (8004174 <xTaskIncrementTick+0x158>)
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	4a41      	ldr	r2, [pc, #260]	; (8004178 <xTaskIncrementTick+0x15c>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b40      	ldr	r3, [pc, #256]	; (800417c <xTaskIncrementTick+0x160>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a3f      	ldr	r2, [pc, #252]	; (800417c <xTaskIncrementTick+0x160>)
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	f000 fabf 	bl	8004604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <xTaskIncrementTick+0x164>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	429a      	cmp	r2, r3
 800408e:	d34d      	bcc.n	800412c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <xTaskIncrementTick+0x158>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <xTaskIncrementTick+0x82>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <xTaskIncrementTick+0x84>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d004      	beq.n	80040ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a4:	4b36      	ldr	r3, [pc, #216]	; (8004180 <xTaskIncrementTick+0x164>)
 80040a6:	f04f 32ff 	mov.w	r2, #4294967295
 80040aa:	601a      	str	r2, [r3, #0]
					break;
 80040ac:	e03e      	b.n	800412c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <xTaskIncrementTick+0x158>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d203      	bcs.n	80040ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c6:	4a2e      	ldr	r2, [pc, #184]	; (8004180 <xTaskIncrementTick+0x164>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6013      	str	r3, [r2, #0]
						break;
 80040cc:	e02e      	b.n	800412c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	3304      	adds	r3, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f931 	bl	800333a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	3318      	adds	r3, #24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f928 	bl	800333a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	2201      	movs	r2, #1
 80040f0:	409a      	lsls	r2, r3
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <xTaskIncrementTick+0x168>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <xTaskIncrementTick+0x168>)
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <xTaskIncrementTick+0x16c>)
 800410a:	441a      	add	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3304      	adds	r3, #4
 8004110:	4619      	mov	r1, r3
 8004112:	4610      	mov	r0, r2
 8004114:	f7ff f8b4 	bl	8003280 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <xTaskIncrementTick+0x170>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	429a      	cmp	r2, r3
 8004124:	d3b4      	bcc.n	8004090 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004126:	2301      	movs	r3, #1
 8004128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412a:	e7b1      	b.n	8004090 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800412c:	4b17      	ldr	r3, [pc, #92]	; (800418c <xTaskIncrementTick+0x170>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4915      	ldr	r1, [pc, #84]	; (8004188 <xTaskIncrementTick+0x16c>)
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d907      	bls.n	8004154 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004144:	2301      	movs	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	e004      	b.n	8004154 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <xTaskIncrementTick+0x174>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	4a0f      	ldr	r2, [pc, #60]	; (8004190 <xTaskIncrementTick+0x174>)
 8004152:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004154:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <xTaskIncrementTick+0x178>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004160:	697b      	ldr	r3, [r7, #20]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	2000046c 	.word	0x2000046c
 8004170:	20000448 	.word	0x20000448
 8004174:	200003fc 	.word	0x200003fc
 8004178:	20000400 	.word	0x20000400
 800417c:	2000045c 	.word	0x2000045c
 8004180:	20000464 	.word	0x20000464
 8004184:	2000044c 	.word	0x2000044c
 8004188:	20000348 	.word	0x20000348
 800418c:	20000344 	.word	0x20000344
 8004190:	20000454 	.word	0x20000454
 8004194:	20000458 	.word	0x20000458

08004198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <vTaskSwitchContext+0xcc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <vTaskSwitchContext+0xd0>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041ac:	e055      	b.n	800425a <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80041ae:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <vTaskSwitchContext+0xd0>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80041b4:	4b2d      	ldr	r3, [pc, #180]	; (800426c <vTaskSwitchContext+0xd4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <vTaskSwitchContext+0xd4>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d808      	bhi.n	80041d6 <vTaskSwitchContext+0x3e>
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <vTaskSwitchContext+0xd4>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b28      	ldr	r3, [pc, #160]	; (800426c <vTaskSwitchContext+0xd4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3334      	adds	r3, #52	; 0x34
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7fb fffd 	bl	80001d0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80041d6:	4b26      	ldr	r3, [pc, #152]	; (8004270 <vTaskSwitchContext+0xd8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80041e4:	7afb      	ldrb	r3, [r7, #11]
 80041e6:	f1c3 031f 	rsb	r3, r3, #31
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	4921      	ldr	r1, [pc, #132]	; (8004274 <vTaskSwitchContext+0xdc>)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <vTaskSwitchContext+0x7e>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	607b      	str	r3, [r7, #4]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <vTaskSwitchContext+0x7c>
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4a14      	ldr	r2, [pc, #80]	; (8004274 <vTaskSwitchContext+0xdc>)
 8004222:	4413      	add	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	3308      	adds	r3, #8
 8004238:	429a      	cmp	r2, r3
 800423a:	d104      	bne.n	8004246 <vTaskSwitchContext+0xae>
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <vTaskSwitchContext+0xd4>)
 800424e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004250:	4b06      	ldr	r3, [pc, #24]	; (800426c <vTaskSwitchContext+0xd4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	334c      	adds	r3, #76	; 0x4c
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <vTaskSwitchContext+0xe0>)
 8004258:	6013      	str	r3, [r2, #0]
}
 800425a:	bf00      	nop
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000046c 	.word	0x2000046c
 8004268:	20000458 	.word	0x20000458
 800426c:	20000344 	.word	0x20000344
 8004270:	2000044c 	.word	0x2000044c
 8004274:	20000348 	.word	0x20000348
 8004278:	20000010 	.word	0x20000010

0800427c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <vTaskPlaceOnEventList+0x44>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3318      	adds	r3, #24
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff f80c 	bl	80032c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042b0:	2101      	movs	r1, #1
 80042b2:	6838      	ldr	r0, [r7, #0]
 80042b4:	f000 fa70 	bl	8004798 <prvAddCurrentTaskToDelayedList>
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000344 	.word	0x20000344

080042c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	60fb      	str	r3, [r7, #12]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	3318      	adds	r3, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f820 	bl	800333a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042fa:	4b1d      	ldr	r3, [pc, #116]	; (8004370 <xTaskRemoveFromEventList+0xac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d11c      	bne.n	800433c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3304      	adds	r3, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff f817 	bl	800333a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	2201      	movs	r2, #1
 8004312:	409a      	lsls	r2, r3
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <xTaskRemoveFromEventList+0xb0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <xTaskRemoveFromEventList+0xb0>)
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <xTaskRemoveFromEventList+0xb4>)
 800432c:	441a      	add	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	3304      	adds	r3, #4
 8004332:	4619      	mov	r1, r3
 8004334:	4610      	mov	r0, r2
 8004336:	f7fe ffa3 	bl	8003280 <vListInsertEnd>
 800433a:	e005      	b.n	8004348 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3318      	adds	r3, #24
 8004340:	4619      	mov	r1, r3
 8004342:	480e      	ldr	r0, [pc, #56]	; (800437c <xTaskRemoveFromEventList+0xb8>)
 8004344:	f7fe ff9c 	bl	8003280 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <xTaskRemoveFromEventList+0xbc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	429a      	cmp	r2, r3
 8004354:	d905      	bls.n	8004362 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004356:	2301      	movs	r3, #1
 8004358:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800435a:	4b0a      	ldr	r3, [pc, #40]	; (8004384 <xTaskRemoveFromEventList+0xc0>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	e001      	b.n	8004366 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004366:	697b      	ldr	r3, [r7, #20]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	2000046c 	.word	0x2000046c
 8004374:	2000044c 	.word	0x2000044c
 8004378:	20000348 	.word	0x20000348
 800437c:	20000404 	.word	0x20000404
 8004380:	20000344 	.word	0x20000344
 8004384:	20000458 	.word	0x20000458

08004388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <vTaskInternalSetTimeOutState+0x24>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <vTaskInternalSetTimeOutState+0x28>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	605a      	str	r2, [r3, #4]
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	2000045c 	.word	0x2000045c
 80043b0:	20000448 	.word	0x20000448

080043b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	613b      	str	r3, [r7, #16]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10a      	bne.n	80043f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
}
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80043f6:	f000 fb65 	bl	8004ac4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <xTaskCheckForTimeOut+0xbc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d102      	bne.n	800441a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	e023      	b.n	8004462 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b15      	ldr	r3, [pc, #84]	; (8004474 <xTaskCheckForTimeOut+0xc0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d007      	beq.n	8004436 <xTaskCheckForTimeOut+0x82>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004430:	2301      	movs	r3, #1
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	e015      	b.n	8004462 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	429a      	cmp	r2, r3
 800443e:	d20b      	bcs.n	8004458 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff9b 	bl	8004388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	e004      	b.n	8004462 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800445e:	2301      	movs	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004462:	f000 fb5f 	bl	8004b24 <vPortExitCritical>

	return xReturn;
 8004466:	69fb      	ldr	r3, [r7, #28]
}
 8004468:	4618      	mov	r0, r3
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000448 	.word	0x20000448
 8004474:	2000045c 	.word	0x2000045c

08004478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <vTaskMissedYield+0x14>)
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
}
 8004482:	bf00      	nop
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	20000458 	.word	0x20000458

08004490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004498:	f000 f852 	bl	8004540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <prvIdleTask+0x28>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d9f9      	bls.n	8004498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <prvIdleTask+0x2c>)
 80044a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044b4:	e7f0      	b.n	8004498 <prvIdleTask+0x8>
 80044b6:	bf00      	nop
 80044b8:	20000348 	.word	0x20000348
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	e00c      	b.n	80044e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <prvInitialiseTaskLists+0x60>)
 80044d8:	4413      	add	r3, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fea3 	bl	8003226 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3301      	adds	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d9ef      	bls.n	80044cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <prvInitialiseTaskLists+0x64>)
 80044ee:	f7fe fe9a 	bl	8003226 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044f2:	480d      	ldr	r0, [pc, #52]	; (8004528 <prvInitialiseTaskLists+0x68>)
 80044f4:	f7fe fe97 	bl	8003226 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044f8:	480c      	ldr	r0, [pc, #48]	; (800452c <prvInitialiseTaskLists+0x6c>)
 80044fa:	f7fe fe94 	bl	8003226 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044fe:	480c      	ldr	r0, [pc, #48]	; (8004530 <prvInitialiseTaskLists+0x70>)
 8004500:	f7fe fe91 	bl	8003226 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <prvInitialiseTaskLists+0x74>)
 8004506:	f7fe fe8e 	bl	8003226 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <prvInitialiseTaskLists+0x78>)
 800450c:	4a05      	ldr	r2, [pc, #20]	; (8004524 <prvInitialiseTaskLists+0x64>)
 800450e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <prvInitialiseTaskLists+0x7c>)
 8004512:	4a05      	ldr	r2, [pc, #20]	; (8004528 <prvInitialiseTaskLists+0x68>)
 8004514:	601a      	str	r2, [r3, #0]
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000348 	.word	0x20000348
 8004524:	200003d4 	.word	0x200003d4
 8004528:	200003e8 	.word	0x200003e8
 800452c:	20000404 	.word	0x20000404
 8004530:	20000418 	.word	0x20000418
 8004534:	20000430 	.word	0x20000430
 8004538:	200003fc 	.word	0x200003fc
 800453c:	20000400 	.word	0x20000400

08004540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004546:	e019      	b.n	800457c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004548:	f000 fabc 	bl	8004ac4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <prvCheckTasksWaitingTermination+0x50>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe feee 	bl	800333a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800455e:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3b01      	subs	r3, #1
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <prvCheckTasksWaitingTermination+0x54>)
 8004566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3b01      	subs	r3, #1
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 8004570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004572:	f000 fad7 	bl	8004b24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f810 	bl	800459c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <prvCheckTasksWaitingTermination+0x58>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e1      	bne.n	8004548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000418 	.word	0x20000418
 8004594:	20000444 	.word	0x20000444
 8004598:	2000042c 	.word	0x2000042c

0800459c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	334c      	adds	r3, #76	; 0x4c
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 fd97 	bl	80050dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fc2d 	bl	8004e1c <vPortFree>
				vPortFree( pxTCB );
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fc2a 	bl	8004e1c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045c8:	e018      	b.n	80045fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d103      	bne.n	80045dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fc21 	bl	8004e1c <vPortFree>
	}
 80045da:	e00f      	b.n	80045fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d00a      	beq.n	80045fc <prvDeleteTCB+0x60>
	__asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60fb      	str	r3, [r7, #12]
}
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <prvDeleteTCB+0x5e>
	}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <prvResetNextTaskUnblockTime+0x44>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <prvResetNextTaskUnblockTime+0x14>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <prvResetNextTaskUnblockTime+0x16>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <prvResetNextTaskUnblockTime+0x48>)
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004626:	e008      	b.n	800463a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <prvResetNextTaskUnblockTime+0x44>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <prvResetNextTaskUnblockTime+0x48>)
 8004638:	6013      	str	r3, [r2, #0]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	200003fc 	.word	0x200003fc
 800464c:	20000464 	.word	0x20000464

08004650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <xTaskGetSchedulerState+0x34>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800465e:	2301      	movs	r3, #1
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	e008      	b.n	8004676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004664:	4b08      	ldr	r3, [pc, #32]	; (8004688 <xTaskGetSchedulerState+0x38>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800466c:	2302      	movs	r3, #2
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	e001      	b.n	8004676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004676:	687b      	ldr	r3, [r7, #4]
	}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	20000450 	.word	0x20000450
 8004688:	2000046c 	.word	0x2000046c

0800468c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d06e      	beq.n	8004780 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046a2:	4b3a      	ldr	r3, [pc, #232]	; (800478c <xTaskPriorityDisinherit+0x100>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d00a      	beq.n	80046c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60bb      	str	r3, [r7, #8]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d044      	beq.n	8004780 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d140      	bne.n	8004780 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fe19 	bl	800333a <uxListRemove>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d115      	bne.n	800473a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	491f      	ldr	r1, [pc, #124]	; (8004790 <xTaskPriorityDisinherit+0x104>)
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xTaskPriorityDisinherit+0xae>
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	43da      	mvns	r2, r3
 8004730:	4b18      	ldr	r3, [pc, #96]	; (8004794 <xTaskPriorityDisinherit+0x108>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4013      	ands	r3, r2
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <xTaskPriorityDisinherit+0x108>)
 8004738:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f1c3 0207 	rsb	r2, r3, #7
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	2201      	movs	r2, #1
 8004754:	409a      	lsls	r2, r3
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <xTaskPriorityDisinherit+0x108>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	4a0d      	ldr	r2, [pc, #52]	; (8004794 <xTaskPriorityDisinherit+0x108>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4a08      	ldr	r2, [pc, #32]	; (8004790 <xTaskPriorityDisinherit+0x104>)
 800476e:	441a      	add	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7fe fd82 	bl	8003280 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004780:	697b      	ldr	r3, [r7, #20]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000344 	.word	0x20000344
 8004790:	20000348 	.word	0x20000348
 8004794:	2000044c 	.word	0x2000044c

08004798 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a8:	4b28      	ldr	r3, [pc, #160]	; (800484c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fdc3 	bl	800333a <uxListRemove>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c0:	2201      	movs	r2, #1
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43da      	mvns	r2, r3
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4013      	ands	r3, r2
 80047ce:	4a20      	ldr	r2, [pc, #128]	; (8004850 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d10a      	bne.n	80047f0 <prvAddCurrentTaskToDelayedList+0x58>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e0:	4b1a      	ldr	r3, [pc, #104]	; (800484c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	481a      	ldr	r0, [pc, #104]	; (8004854 <prvAddCurrentTaskToDelayedList+0xbc>)
 80047ea:	f7fe fd49 	bl	8003280 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ee:	e026      	b.n	800483e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047f8:	4b14      	ldr	r3, [pc, #80]	; (800484c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	429a      	cmp	r2, r3
 8004806:	d209      	bcs.n	800481c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004808:	4b13      	ldr	r3, [pc, #76]	; (8004858 <prvAddCurrentTaskToDelayedList+0xc0>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <prvAddCurrentTaskToDelayedList+0xb4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe fd57 	bl	80032c8 <vListInsert>
}
 800481a:	e010      	b.n	800483e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <prvAddCurrentTaskToDelayedList+0xc4>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3304      	adds	r3, #4
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f7fe fd4d 	bl	80032c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	429a      	cmp	r2, r3
 8004836:	d202      	bcs.n	800483e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004838:	4a09      	ldr	r2, [pc, #36]	; (8004860 <prvAddCurrentTaskToDelayedList+0xc8>)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6013      	str	r3, [r2, #0]
}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000448 	.word	0x20000448
 800484c:	20000344 	.word	0x20000344
 8004850:	2000044c 	.word	0x2000044c
 8004854:	20000430 	.word	0x20000430
 8004858:	20000400 	.word	0x20000400
 800485c:	200003fc 	.word	0x200003fc
 8004860:	20000464 	.word	0x20000464

08004864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3b04      	subs	r3, #4
 8004874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800487c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	3b04      	subs	r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b04      	subs	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004894:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <pxPortInitialiseStack+0x64>)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3b14      	subs	r3, #20
 800489e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f06f 0202 	mvn.w	r2, #2
 80048b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b20      	subs	r3, #32
 80048b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048ba:	68fb      	ldr	r3, [r7, #12]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	080048cd 	.word	0x080048cd

080048cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <prvTaskExitError+0x54>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048de:	d00a      	beq.n	80048f6 <prvTaskExitError+0x2a>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <prvTaskExitError+0x28>
	__asm volatile
 80048f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fa:	f383 8811 	msr	BASEPRI, r3
 80048fe:	f3bf 8f6f 	isb	sy
 8004902:	f3bf 8f4f 	dsb	sy
 8004906:	60bb      	str	r3, [r7, #8]
}
 8004908:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800490a:	bf00      	nop
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0fc      	beq.n	800490c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004912:	bf00      	nop
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	2000000c 	.word	0x2000000c
	...

08004930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004930:	4b07      	ldr	r3, [pc, #28]	; (8004950 <pxCurrentTCBConst2>)
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	6808      	ldr	r0, [r1, #0]
 8004936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	f380 8809 	msr	PSP, r0
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8811 	msr	BASEPRI, r0
 800494a:	4770      	bx	lr
 800494c:	f3af 8000 	nop.w

08004950 <pxCurrentTCBConst2>:
 8004950:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop

08004958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004958:	4808      	ldr	r0, [pc, #32]	; (800497c <prvPortStartFirstTask+0x24>)
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f380 8808 	msr	MSP, r0
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8814 	msr	CONTROL, r0
 800496a:	b662      	cpsie	i
 800496c:	b661      	cpsie	f
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	df00      	svc	0
 8004978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800497a:	bf00      	nop
 800497c:	e000ed08 	.word	0xe000ed08

08004980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004986:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <xPortStartScheduler+0x120>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a46      	ldr	r2, [pc, #280]	; (8004aa4 <xPortStartScheduler+0x124>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d10a      	bne.n	80049a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	613b      	str	r3, [r7, #16]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049a6:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <xPortStartScheduler+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a3f      	ldr	r2, [pc, #252]	; (8004aa8 <xPortStartScheduler+0x128>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10a      	bne.n	80049c6 <xPortStartScheduler+0x46>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	60fb      	str	r3, [r7, #12]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <xPortStartScheduler+0x12c>)
 80049c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	22ff      	movs	r2, #255	; 0xff
 80049d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b31      	ldr	r3, [pc, #196]	; (8004ab0 <xPortStartScheduler+0x130>)
 80049ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049ee:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <xPortStartScheduler+0x134>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049f4:	e009      	b.n	8004a0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80049f6:	4b2f      	ldr	r3, [pc, #188]	; (8004ab4 <xPortStartScheduler+0x134>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	4a2d      	ldr	r2, [pc, #180]	; (8004ab4 <xPortStartScheduler+0x134>)
 80049fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a0a:	78fb      	ldrb	r3, [r7, #3]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	d0ef      	beq.n	80049f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f1c3 0307 	rsb	r3, r3, #7
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00a      	beq.n	8004a38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	60bb      	str	r3, [r7, #8]
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <xPortStartScheduler+0x134>)
 8004a4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a56:	4b18      	ldr	r3, [pc, #96]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <xPortStartScheduler+0x138>)
 8004a68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a6e:	f000 f8dd 	bl	8004c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a72:	4b12      	ldr	r3, [pc, #72]	; (8004abc <xPortStartScheduler+0x13c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a78:	f000 f8fc 	bl	8004c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <xPortStartScheduler+0x140>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a0f      	ldr	r2, [pc, #60]	; (8004ac0 <xPortStartScheduler+0x140>)
 8004a82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004a86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a88:	f7ff ff66 	bl	8004958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a8c:	f7ff fb84 	bl	8004198 <vTaskSwitchContext>
	prvTaskExitError();
 8004a90:	f7ff ff1c 	bl	80048cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000ed00 	.word	0xe000ed00
 8004aa4:	410fc271 	.word	0x410fc271
 8004aa8:	410fc270 	.word	0x410fc270
 8004aac:	e000e400 	.word	0xe000e400
 8004ab0:	20000470 	.word	0x20000470
 8004ab4:	20000474 	.word	0x20000474
 8004ab8:	e000ed20 	.word	0xe000ed20
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	e000ef34 	.word	0xe000ef34

08004ac4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	607b      	str	r3, [r7, #4]
}
 8004adc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <vPortEnterCritical+0x58>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <vPortEnterCritical+0x58>)
 8004ae6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <vPortEnterCritical+0x58>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10f      	bne.n	8004b10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <vPortEnterCritical+0x5c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	603b      	str	r3, [r7, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vPortEnterCritical+0x4a>
	}
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	e000ed04 	.word	0xe000ed04

08004b24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <vPortExitCritical+0x50>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <vPortExitCritical+0x24>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	607b      	str	r3, [r7, #4]
}
 8004b44:	bf00      	nop
 8004b46:	e7fe      	b.n	8004b46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <vPortExitCritical+0x50>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4a09      	ldr	r2, [pc, #36]	; (8004b74 <vPortExitCritical+0x50>)
 8004b50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <vPortExitCritical+0x50>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <vPortExitCritical+0x42>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c
	...

08004b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b80:	f3ef 8009 	mrs	r0, PSP
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <pxCurrentTCBConst>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	f01e 0f10 	tst.w	lr, #16
 8004b90:	bf08      	it	eq
 8004b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b9a:	6010      	str	r0, [r2, #0]
 8004b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ba4:	f380 8811 	msr	BASEPRI, r0
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f7ff faf2 	bl	8004198 <vTaskSwitchContext>
 8004bb4:	f04f 0000 	mov.w	r0, #0
 8004bb8:	f380 8811 	msr	BASEPRI, r0
 8004bbc:	bc09      	pop	{r0, r3}
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	6808      	ldr	r0, [r1, #0]
 8004bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc6:	f01e 0f10 	tst.w	lr, #16
 8004bca:	bf08      	it	eq
 8004bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bd0:	f380 8809 	msr	PSP, r0
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	f3af 8000 	nop.w

08004be0 <pxCurrentTCBConst>:
 8004be0:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	607b      	str	r3, [r7, #4]
}
 8004c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c02:	f7ff fa0b 	bl	800401c <xTaskIncrementTick>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <SysTick_Handler+0x40>)
 8004c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	2300      	movs	r3, #0
 8004c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	f383 8811 	msr	BASEPRI, r3
}
 8004c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <vPortSetupTimerInterrupt+0x34>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <vPortSetupTimerInterrupt+0x38>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <vPortSetupTimerInterrupt+0x3c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0a      	ldr	r2, [pc, #40]	; (8004c6c <vPortSetupTimerInterrupt+0x40>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	4a09      	ldr	r2, [pc, #36]	; (8004c70 <vPortSetupTimerInterrupt+0x44>)
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c4e:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <vPortSetupTimerInterrupt+0x34>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	e000e010 	.word	0xe000e010
 8004c64:	e000e018 	.word	0xe000e018
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	10624dd3 	.word	0x10624dd3
 8004c70:	e000e014 	.word	0xe000e014

08004c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004c84 <vPortEnableVFP+0x10>
 8004c78:	6801      	ldr	r1, [r0, #0]
 8004c7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c7e:	6001      	str	r1, [r0, #0]
 8004c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004c82:	bf00      	nop
 8004c84:	e000ed88 	.word	0xe000ed88

08004c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c94:	f7ff f918 	bl	8003ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c98:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <pvPortMalloc+0x180>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ca0:	f000 f916 	bl	8004ed0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ca4:	4b59      	ldr	r3, [pc, #356]	; (8004e0c <pvPortMalloc+0x184>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f040 808e 	bne.w	8004dce <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01d      	beq.n	8004cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cb8:	2208      	movs	r2, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d014      	beq.n	8004cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f023 0307 	bic.w	r3, r3, #7
 8004cd0:	3308      	adds	r3, #8
 8004cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	617b      	str	r3, [r7, #20]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d069      	beq.n	8004dce <pvPortMalloc+0x146>
 8004cfa:	4b45      	ldr	r3, [pc, #276]	; (8004e10 <pvPortMalloc+0x188>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d864      	bhi.n	8004dce <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d04:	4b43      	ldr	r3, [pc, #268]	; (8004e14 <pvPortMalloc+0x18c>)
 8004d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d08:	4b42      	ldr	r3, [pc, #264]	; (8004e14 <pvPortMalloc+0x18c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d0e:	e004      	b.n	8004d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d903      	bls.n	8004d2c <pvPortMalloc+0xa4>
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f1      	bne.n	8004d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d2c:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <pvPortMalloc+0x180>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d04b      	beq.n	8004dce <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	4413      	add	r3, r2
 8004d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	2308      	movs	r3, #8
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d91f      	bls.n	8004d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <pvPortMalloc+0xf8>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	613b      	str	r3, [r7, #16]
}
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	1ad2      	subs	r2, r2, r3
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d92:	69b8      	ldr	r0, [r7, #24]
 8004d94:	f000 f8fe 	bl	8004f94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <pvPortMalloc+0x188>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <pvPortMalloc+0x188>)
 8004da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004da6:	4b1a      	ldr	r3, [pc, #104]	; (8004e10 <pvPortMalloc+0x188>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <pvPortMalloc+0x190>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d203      	bcs.n	8004dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <pvPortMalloc+0x188>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	; (8004e18 <pvPortMalloc+0x190>)
 8004db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <pvPortMalloc+0x184>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004dce:	f7ff f889 	bl	8003ee4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <pvPortMalloc+0x154>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004dd8:	f7fb fa05 	bl	80001e6 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <pvPortMalloc+0x174>
	__asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60fb      	str	r3, [r7, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <pvPortMalloc+0x172>
	return pvReturn;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3728      	adds	r7, #40	; 0x28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20001080 	.word	0x20001080
 8004e0c:	2000108c 	.word	0x2000108c
 8004e10:	20001084 	.word	0x20001084
 8004e14:	20001078 	.word	0x20001078
 8004e18:	20001088 	.word	0x20001088

08004e1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d048      	beq.n	8004ec0 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e2e:	2308      	movs	r3, #8
 8004e30:	425b      	negs	r3, r3
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	4b21      	ldr	r3, [pc, #132]	; (8004ec8 <vPortFree+0xac>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <vPortFree+0x44>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60fb      	str	r3, [r7, #12]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00a      	beq.n	8004e7e <vPortFree+0x62>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	60bb      	str	r3, [r7, #8]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <vPortFree+0xac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d019      	beq.n	8004ec0 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d115      	bne.n	8004ec0 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <vPortFree+0xac>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ea4:	f7ff f810 	bl	8003ec8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <vPortFree+0xb0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <vPortFree+0xb0>)
 8004eb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004eb6:	6938      	ldr	r0, [r7, #16]
 8004eb8:	f000 f86c 	bl	8004f94 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ebc:	f7ff f812 	bl	8003ee4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ec0:	bf00      	nop
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	2000108c 	.word	0x2000108c
 8004ecc:	20001084 	.word	0x20001084

08004ed0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ed6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004eda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <prvHeapInit+0xac>)
 8004ede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00c      	beq.n	8004f04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3307      	adds	r3, #7
 8004eee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0307 	bic.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	4a1f      	ldr	r2, [pc, #124]	; (8004f7c <prvHeapInit+0xac>)
 8004f00:	4413      	add	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f08:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <prvHeapInit+0xb0>)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <prvHeapInit+0xb0>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	4413      	add	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <prvHeapInit+0xb4>)
 8004f30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <prvHeapInit+0xb4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2200      	movs	r2, #0
 8004f38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <prvHeapInit+0xb4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	1ad2      	subs	r2, r2, r3
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <prvHeapInit+0xb4>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <prvHeapInit+0xb8>)
 8004f5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <prvHeapInit+0xbc>)
 8004f66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f68:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <prvHeapInit+0xc0>)
 8004f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000478 	.word	0x20000478
 8004f80:	20001078 	.word	0x20001078
 8004f84:	20001080 	.word	0x20001080
 8004f88:	20001088 	.word	0x20001088
 8004f8c:	20001084 	.word	0x20001084
 8004f90:	2000108c 	.word	0x2000108c

08004f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f9c:	4b28      	ldr	r3, [pc, #160]	; (8005040 <prvInsertBlockIntoFreeList+0xac>)
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e002      	b.n	8004fa8 <prvInsertBlockIntoFreeList+0x14>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d8f7      	bhi.n	8004fa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d108      	bne.n	8004fd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	441a      	add	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	441a      	add	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d118      	bne.n	800501c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <prvInsertBlockIntoFreeList+0xb0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d00d      	beq.n	8005012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	441a      	add	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e008      	b.n	8005024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005012:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <prvInsertBlockIntoFreeList+0xb0>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	e003      	b.n	8005024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d002      	beq.n	8005032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20001078 	.word	0x20001078
 8005044:	20001080 	.word	0x20001080

08005048 <__libc_init_array>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4d0d      	ldr	r5, [pc, #52]	; (8005080 <__libc_init_array+0x38>)
 800504c:	4c0d      	ldr	r4, [pc, #52]	; (8005084 <__libc_init_array+0x3c>)
 800504e:	1b64      	subs	r4, r4, r5
 8005050:	10a4      	asrs	r4, r4, #2
 8005052:	2600      	movs	r6, #0
 8005054:	42a6      	cmp	r6, r4
 8005056:	d109      	bne.n	800506c <__libc_init_array+0x24>
 8005058:	4d0b      	ldr	r5, [pc, #44]	; (8005088 <__libc_init_array+0x40>)
 800505a:	4c0c      	ldr	r4, [pc, #48]	; (800508c <__libc_init_array+0x44>)
 800505c:	f000 f8f6 	bl	800524c <_init>
 8005060:	1b64      	subs	r4, r4, r5
 8005062:	10a4      	asrs	r4, r4, #2
 8005064:	2600      	movs	r6, #0
 8005066:	42a6      	cmp	r6, r4
 8005068:	d105      	bne.n	8005076 <__libc_init_array+0x2e>
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005070:	4798      	blx	r3
 8005072:	3601      	adds	r6, #1
 8005074:	e7ee      	b.n	8005054 <__libc_init_array+0xc>
 8005076:	f855 3b04 	ldr.w	r3, [r5], #4
 800507a:	4798      	blx	r3
 800507c:	3601      	adds	r6, #1
 800507e:	e7f2      	b.n	8005066 <__libc_init_array+0x1e>
 8005080:	080053bc 	.word	0x080053bc
 8005084:	080053bc 	.word	0x080053bc
 8005088:	080053bc 	.word	0x080053bc
 800508c:	080053c0 	.word	0x080053c0

08005090 <__retarget_lock_acquire_recursive>:
 8005090:	4770      	bx	lr

08005092 <__retarget_lock_release_recursive>:
 8005092:	4770      	bx	lr

08005094 <memcpy>:
 8005094:	440a      	add	r2, r1
 8005096:	4291      	cmp	r1, r2
 8005098:	f100 33ff 	add.w	r3, r0, #4294967295
 800509c:	d100      	bne.n	80050a0 <memcpy+0xc>
 800509e:	4770      	bx	lr
 80050a0:	b510      	push	{r4, lr}
 80050a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050aa:	4291      	cmp	r1, r2
 80050ac:	d1f9      	bne.n	80050a2 <memcpy+0xe>
 80050ae:	bd10      	pop	{r4, pc}

080050b0 <memset>:
 80050b0:	4402      	add	r2, r0
 80050b2:	4603      	mov	r3, r0
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d100      	bne.n	80050ba <memset+0xa>
 80050b8:	4770      	bx	lr
 80050ba:	f803 1b01 	strb.w	r1, [r3], #1
 80050be:	e7f9      	b.n	80050b4 <memset+0x4>

080050c0 <cleanup_glue>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	460c      	mov	r4, r1
 80050c4:	6809      	ldr	r1, [r1, #0]
 80050c6:	4605      	mov	r5, r0
 80050c8:	b109      	cbz	r1, 80050ce <cleanup_glue+0xe>
 80050ca:	f7ff fff9 	bl	80050c0 <cleanup_glue>
 80050ce:	4621      	mov	r1, r4
 80050d0:	4628      	mov	r0, r5
 80050d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050d6:	f000 b869 	b.w	80051ac <_free_r>
	...

080050dc <_reclaim_reent>:
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <_reclaim_reent+0xb4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4283      	cmp	r3, r0
 80050e2:	b570      	push	{r4, r5, r6, lr}
 80050e4:	4604      	mov	r4, r0
 80050e6:	d051      	beq.n	800518c <_reclaim_reent+0xb0>
 80050e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80050ea:	b143      	cbz	r3, 80050fe <_reclaim_reent+0x22>
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d14a      	bne.n	8005188 <_reclaim_reent+0xac>
 80050f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f4:	6819      	ldr	r1, [r3, #0]
 80050f6:	b111      	cbz	r1, 80050fe <_reclaim_reent+0x22>
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 f857 	bl	80051ac <_free_r>
 80050fe:	6961      	ldr	r1, [r4, #20]
 8005100:	b111      	cbz	r1, 8005108 <_reclaim_reent+0x2c>
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f852 	bl	80051ac <_free_r>
 8005108:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800510a:	b111      	cbz	r1, 8005112 <_reclaim_reent+0x36>
 800510c:	4620      	mov	r0, r4
 800510e:	f000 f84d 	bl	80051ac <_free_r>
 8005112:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005114:	b111      	cbz	r1, 800511c <_reclaim_reent+0x40>
 8005116:	4620      	mov	r0, r4
 8005118:	f000 f848 	bl	80051ac <_free_r>
 800511c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800511e:	b111      	cbz	r1, 8005126 <_reclaim_reent+0x4a>
 8005120:	4620      	mov	r0, r4
 8005122:	f000 f843 	bl	80051ac <_free_r>
 8005126:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005128:	b111      	cbz	r1, 8005130 <_reclaim_reent+0x54>
 800512a:	4620      	mov	r0, r4
 800512c:	f000 f83e 	bl	80051ac <_free_r>
 8005130:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005132:	b111      	cbz	r1, 800513a <_reclaim_reent+0x5e>
 8005134:	4620      	mov	r0, r4
 8005136:	f000 f839 	bl	80051ac <_free_r>
 800513a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800513c:	b111      	cbz	r1, 8005144 <_reclaim_reent+0x68>
 800513e:	4620      	mov	r0, r4
 8005140:	f000 f834 	bl	80051ac <_free_r>
 8005144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005146:	b111      	cbz	r1, 800514e <_reclaim_reent+0x72>
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f82f 	bl	80051ac <_free_r>
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	b1e3      	cbz	r3, 800518c <_reclaim_reent+0xb0>
 8005152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005154:	4620      	mov	r0, r4
 8005156:	4798      	blx	r3
 8005158:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800515a:	b1b9      	cbz	r1, 800518c <_reclaim_reent+0xb0>
 800515c:	4620      	mov	r0, r4
 800515e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005162:	f7ff bfad 	b.w	80050c0 <cleanup_glue>
 8005166:	5949      	ldr	r1, [r1, r5]
 8005168:	b941      	cbnz	r1, 800517c <_reclaim_reent+0xa0>
 800516a:	3504      	adds	r5, #4
 800516c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800516e:	2d80      	cmp	r5, #128	; 0x80
 8005170:	68d9      	ldr	r1, [r3, #12]
 8005172:	d1f8      	bne.n	8005166 <_reclaim_reent+0x8a>
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f819 	bl	80051ac <_free_r>
 800517a:	e7ba      	b.n	80050f2 <_reclaim_reent+0x16>
 800517c:	680e      	ldr	r6, [r1, #0]
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f814 	bl	80051ac <_free_r>
 8005184:	4631      	mov	r1, r6
 8005186:	e7ef      	b.n	8005168 <_reclaim_reent+0x8c>
 8005188:	2500      	movs	r5, #0
 800518a:	e7ef      	b.n	800516c <_reclaim_reent+0x90>
 800518c:	bd70      	pop	{r4, r5, r6, pc}
 800518e:	bf00      	nop
 8005190:	20000010 	.word	0x20000010

08005194 <__malloc_lock>:
 8005194:	4801      	ldr	r0, [pc, #4]	; (800519c <__malloc_lock+0x8>)
 8005196:	f7ff bf7b 	b.w	8005090 <__retarget_lock_acquire_recursive>
 800519a:	bf00      	nop
 800519c:	20001504 	.word	0x20001504

080051a0 <__malloc_unlock>:
 80051a0:	4801      	ldr	r0, [pc, #4]	; (80051a8 <__malloc_unlock+0x8>)
 80051a2:	f7ff bf76 	b.w	8005092 <__retarget_lock_release_recursive>
 80051a6:	bf00      	nop
 80051a8:	20001504 	.word	0x20001504

080051ac <_free_r>:
 80051ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ae:	2900      	cmp	r1, #0
 80051b0:	d048      	beq.n	8005244 <_free_r+0x98>
 80051b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051b6:	9001      	str	r0, [sp, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f1a1 0404 	sub.w	r4, r1, #4
 80051be:	bfb8      	it	lt
 80051c0:	18e4      	addlt	r4, r4, r3
 80051c2:	f7ff ffe7 	bl	8005194 <__malloc_lock>
 80051c6:	4a20      	ldr	r2, [pc, #128]	; (8005248 <_free_r+0x9c>)
 80051c8:	9801      	ldr	r0, [sp, #4]
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	4615      	mov	r5, r2
 80051ce:	b933      	cbnz	r3, 80051de <_free_r+0x32>
 80051d0:	6063      	str	r3, [r4, #4]
 80051d2:	6014      	str	r4, [r2, #0]
 80051d4:	b003      	add	sp, #12
 80051d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051da:	f7ff bfe1 	b.w	80051a0 <__malloc_unlock>
 80051de:	42a3      	cmp	r3, r4
 80051e0:	d90b      	bls.n	80051fa <_free_r+0x4e>
 80051e2:	6821      	ldr	r1, [r4, #0]
 80051e4:	1862      	adds	r2, r4, r1
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bf04      	itt	eq
 80051ea:	681a      	ldreq	r2, [r3, #0]
 80051ec:	685b      	ldreq	r3, [r3, #4]
 80051ee:	6063      	str	r3, [r4, #4]
 80051f0:	bf04      	itt	eq
 80051f2:	1852      	addeq	r2, r2, r1
 80051f4:	6022      	streq	r2, [r4, #0]
 80051f6:	602c      	str	r4, [r5, #0]
 80051f8:	e7ec      	b.n	80051d4 <_free_r+0x28>
 80051fa:	461a      	mov	r2, r3
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b10b      	cbz	r3, 8005204 <_free_r+0x58>
 8005200:	42a3      	cmp	r3, r4
 8005202:	d9fa      	bls.n	80051fa <_free_r+0x4e>
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	1855      	adds	r5, r2, r1
 8005208:	42a5      	cmp	r5, r4
 800520a:	d10b      	bne.n	8005224 <_free_r+0x78>
 800520c:	6824      	ldr	r4, [r4, #0]
 800520e:	4421      	add	r1, r4
 8005210:	1854      	adds	r4, r2, r1
 8005212:	42a3      	cmp	r3, r4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	d1dd      	bne.n	80051d4 <_free_r+0x28>
 8005218:	681c      	ldr	r4, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	4421      	add	r1, r4
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	e7d7      	b.n	80051d4 <_free_r+0x28>
 8005224:	d902      	bls.n	800522c <_free_r+0x80>
 8005226:	230c      	movs	r3, #12
 8005228:	6003      	str	r3, [r0, #0]
 800522a:	e7d3      	b.n	80051d4 <_free_r+0x28>
 800522c:	6825      	ldr	r5, [r4, #0]
 800522e:	1961      	adds	r1, r4, r5
 8005230:	428b      	cmp	r3, r1
 8005232:	bf04      	itt	eq
 8005234:	6819      	ldreq	r1, [r3, #0]
 8005236:	685b      	ldreq	r3, [r3, #4]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	bf04      	itt	eq
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	6054      	str	r4, [r2, #4]
 8005242:	e7c7      	b.n	80051d4 <_free_r+0x28>
 8005244:	b003      	add	sp, #12
 8005246:	bd30      	pop	{r4, r5, pc}
 8005248:	20001090 	.word	0x20001090

0800524c <_init>:
 800524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800524e:	bf00      	nop
 8005250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005252:	bc08      	pop	{r3}
 8005254:	469e      	mov	lr, r3
 8005256:	4770      	bx	lr

08005258 <_fini>:
 8005258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525a:	bf00      	nop
 800525c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800525e:	bc08      	pop	{r3}
 8005260:	469e      	mov	lr, r3
 8005262:	4770      	bx	lr
