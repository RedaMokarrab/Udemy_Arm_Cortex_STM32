
04_02_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fac  08002fac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fac  08002fac  00012fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000003c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006894  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000146a  00000000  00000000  00026934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004b8  00000000  00000000  00027da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000410  00000000  00000000  00028258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3e1  00000000  00000000  00028668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f68  00000000  00000000  00045a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9dfb  00000000  00000000  0004b9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000f57ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001884  00000000  00000000  000f5800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002eb8 	.word	0x08002eb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002eb8 	.word	0x08002eb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
 80002ce:	e009      	b.n	80002e4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	60ba      	str	r2, [r7, #8]
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ffc9 	bl	8000270 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002de:	697b      	ldr	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	617b      	str	r3, [r7, #20]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	dbf1      	blt.n	80002d0 <_write+0x12>
	}
	return len;
 80002ec:	687b      	ldr	r3, [r7, #4]
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fe:	f000 fa49 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000302:	f000 f839 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000306:	f000 f879 	bl	80003fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  uint8_t count=0;
 800030a:	2300      	movs	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800030e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000312:	4817      	ldr	r0, [pc, #92]	; (8000370 <main+0x78>)
 8000314:	f000 fd40 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8000318:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800031c:	4814      	ldr	r0, [pc, #80]	; (8000370 <main+0x78>)
 800031e:	f000 fd3b 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000326:	4812      	ldr	r0, [pc, #72]	; (8000370 <main+0x78>)
 8000328:	f000 fd36 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_12);
 800032c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000330:	480f      	ldr	r0, [pc, #60]	; (8000370 <main+0x78>)
 8000332:	f000 fd31 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_13);
 8000336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <main+0x78>)
 800033c:	f000 fd2c 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
 8000340:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000344:	480a      	ldr	r0, [pc, #40]	; (8000370 <main+0x78>)
 8000346:	f000 fd27 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_15);
 800034a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034e:	4808      	ldr	r0, [pc, #32]	; (8000370 <main+0x78>)
 8000350:	f000 fd22 	bl	8000d98 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000358:	f000 fa82 	bl	8000860 <HAL_Delay>
	  printf("Hi from print %d\n",count);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	4619      	mov	r1, r3
 8000360:	4804      	ldr	r0, [pc, #16]	; (8000374 <main+0x7c>)
 8000362:	f001 fe53 	bl	800200c <iprintf>
	  count++;
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	3301      	adds	r3, #1
 800036a:	71fb      	strb	r3, [r7, #7]
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 800036c:	e7cf      	b.n	800030e <main+0x16>
 800036e:	bf00      	nop
 8000370:	48001000 	.word	0x48001000
 8000374:	08002ed0 	.word	0x08002ed0

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	; 0x40
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	; 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fe38 	bl	8001ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	2310      	movs	r3, #16
 80003a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003aa:	2300      	movs	r3, #0
 80003ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003ae:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80003b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd07 	bl	8000dcc <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003c4:	f000 f8ce 	bl	8000564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2302      	movs	r3, #2
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2101      	movs	r1, #1
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fbfa 	bl	8001bdc <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003ee:	f000 f8b9 	bl	8000564 <Error_Handler>
  }
}
 80003f2:	bf00      	nop
 80003f4:	3740      	adds	r7, #64	; 0x40
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
	...

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	; 0x28
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0314 	add.w	r3, r7, #20
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
 8000410:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000412:	4b51      	ldr	r3, [pc, #324]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	4a50      	ldr	r2, [pc, #320]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800041c:	6153      	str	r3, [r2, #20]
 800041e:	4b4e      	ldr	r3, [pc, #312]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000426:	613b      	str	r3, [r7, #16]
 8000428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042a:	4b4b      	ldr	r3, [pc, #300]	; (8000558 <MX_GPIO_Init+0x15c>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	4a4a      	ldr	r2, [pc, #296]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b48      	ldr	r3, [pc, #288]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a44      	ldr	r2, [pc, #272]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b42      	ldr	r3, [pc, #264]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b3f      	ldr	r3, [pc, #252]	; (8000558 <MX_GPIO_Init+0x15c>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a3e      	ldr	r2, [pc, #248]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000472:	4b39      	ldr	r3, [pc, #228]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a38      	ldr	r2, [pc, #224]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <MX_GPIO_Init+0x15c>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800048a:	2200      	movs	r2, #0
 800048c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000490:	4832      	ldr	r0, [pc, #200]	; (800055c <MX_GPIO_Init+0x160>)
 8000492:	f000 fc69 	bl	8000d68 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000496:	2337      	movs	r3, #55	; 0x37
 8000498:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800049a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800049e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	4619      	mov	r1, r3
 80004aa:	482c      	ldr	r0, [pc, #176]	; (800055c <MX_GPIO_Init+0x160>)
 80004ac:	f000 fae2 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004b0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004b4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4824      	ldr	r0, [pc, #144]	; (800055c <MX_GPIO_Init+0x160>)
 80004ca:	f000 fad3 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ce:	2301      	movs	r3, #1
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	4619      	mov	r1, r3
 80004e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e4:	f000 fac6 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80004e8:	23e0      	movs	r3, #224	; 0xe0
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	2302      	movs	r3, #2
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004f8:	2305      	movs	r3, #5
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0314 	add.w	r3, r7, #20
 8000500:	4619      	mov	r1, r3
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f000 fab5 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DM_Pin DP_Pin */
  GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800050a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800050e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000510:	2302      	movs	r3, #2
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000518:	2303      	movs	r3, #3
 800051a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800051c:	230e      	movs	r3, #14
 800051e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	f107 0314 	add.w	r3, r7, #20
 8000524:	4619      	mov	r1, r3
 8000526:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052a:	f000 faa3 	bl	8000a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800052e:	23c0      	movs	r3, #192	; 0xc0
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000532:	2312      	movs	r3, #18
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800053e:	2304      	movs	r3, #4
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_GPIO_Init+0x164>)
 800054a:	f000 fa93 	bl	8000a74 <HAL_GPIO_Init>

}
 800054e:	bf00      	nop
 8000550:	3728      	adds	r7, #40	; 0x28
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	48001000 	.word	0x48001000
 8000560:	48000400 	.word	0x48000400

08000564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000568:	b672      	cpsid	i
}
 800056a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800056c:	e7fe      	b.n	800056c <Error_Handler+0x8>
	...

08000570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x44>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_MspInit+0x44>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6193      	str	r3, [r2, #24]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x44>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_MspInit+0x44>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <HAL_MspInit+0x44>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	61d3      	str	r3, [r2, #28]
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_MspInit+0x44>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a6:	2007      	movs	r0, #7
 80005a8:	f000 fa30 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <NMI_Handler+0x4>

080005be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c2:	e7fe      	b.n	80005c2 <HardFault_Handler+0x4>

080005c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <MemManage_Handler+0x4>

080005ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <BusFault_Handler+0x4>

080005d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <UsageFault_Handler+0x4>

080005d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000604:	f000 f90c 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
 800061c:	e00a      	b.n	8000634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800061e:	f3af 8000 	nop.w
 8000622:	4601      	mov	r1, r0
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	60ba      	str	r2, [r7, #8]
 800062a:	b2ca      	uxtb	r2, r1
 800062c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbf0      	blt.n	800061e <_read+0x12>
	}

return len;
 800063c:	687b      	ldr	r3, [r7, #4]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065e:	b480      	push	{r7}
 8000660:	b083      	sub	sp, #12
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066e:	605a      	str	r2, [r3, #4]
	return 0;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <_isatty>:

int _isatty(int file)
{
 800067e:	b480      	push	{r7}
 8000680:	b083      	sub	sp, #12
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	return 1;
 8000686:	2301      	movs	r3, #1
}
 8000688:	4618      	mov	r0, r3
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
	return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3714      	adds	r7, #20
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <_sbrk+0x5c>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <_sbrk+0x60>)
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <_sbrk+0x64>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <_sbrk+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d207      	bcs.n	80006f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e0:	f001 fc62 	bl	8001fa8 <__errno>
 80006e4:	4603      	mov	r3, r0
 80006e6:	220c      	movs	r2, #12
 80006e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	e009      	b.n	8000704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_sbrk+0x64>)
 8000700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000a000 	.word	0x2000a000
 8000710:	00000400 	.word	0x00000400
 8000714:	2000008c 	.word	0x2000008c
 8000718:	200000b0 	.word	0x200000b0

0800071c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <SystemInit+0x20>)
 8000722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <SystemInit+0x20>)
 8000728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800072c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000778 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopForever+0x6>)
  ldr r1, =_edata
 8000746:	490e      	ldr	r1, [pc, #56]	; (8000780 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000748:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <LoopForever+0xe>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a0b      	ldr	r2, [pc, #44]	; (8000788 <LoopForever+0x12>)
  ldr r4, =_ebss
 800075c:	4c0b      	ldr	r4, [pc, #44]	; (800078c <LoopForever+0x16>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076a:	f7ff ffd7 	bl	800071c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800076e:	f001 fc21 	bl	8001fb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000772:	f7ff fdc1 	bl	80002f8 <main>

08000776 <LoopForever>:

LoopForever:
    b LoopForever
 8000776:	e7fe      	b.n	8000776 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000778:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800077c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000780:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000784:	08002fb4 	.word	0x08002fb4
  ldr r2, =_sbss
 8000788:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800078c:	200000ac 	.word	0x200000ac

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f931 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f808 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff fede 	bl	8000570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x54>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_InitTick+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f93b 	bl	8000a5a <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00e      	b.n	800080c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d80a      	bhi.n	800080a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 f911 	bl	8000a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_InitTick+0x5c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000
 8000818:	20000008 	.word	0x20000008
 800081c:	20000004 	.word	0x20000004

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_IncTick+0x20>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_IncTick+0x24>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <HAL_IncTick+0x24>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008
 8000844:	20000098 	.word	0x20000098

08000848 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;  
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <HAL_GetTick+0x14>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000098 	.word	0x20000098

08000860 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff ffee 	bl	8000848 <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffde 	bl	8000848 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008

080008a8 <__NVIC_SetPriorityGrouping>:
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_SetPriority>:
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <SysTick_Config>:
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d8:	d301      	bcc.n	80009de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2301      	movs	r3, #1
 80009dc:	e00f      	b.n	80009fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <SysTick_Config+0x40>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e6:	210f      	movs	r1, #15
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f7ff ff8e 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SysTick_Config+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SysTick_Config+0x40>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff47 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a34:	f7ff ff5c 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff ff8e 	bl	8000960 <NVIC_EncodePriority>
 8000a44:	4602      	mov	r2, r0
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff5d 	bl	800090c <__NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffb0 	bl	80009c8 <SysTick_Config>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e154      	b.n	8000d2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8146 	beq.w	8000d28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0203 	and.w	r2, r3, #3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80a0 	beq.w	8000d28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b58      	ldr	r3, [pc, #352]	; (8000d4c <HAL_GPIO_Init+0x2d8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a57      	ldr	r2, [pc, #348]	; (8000d4c <HAL_GPIO_Init+0x2d8>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b55      	ldr	r3, [pc, #340]	; (8000d4c <HAL_GPIO_Init+0x2d8>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c00:	4a53      	ldr	r2, [pc, #332]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c2a:	d019      	beq.n	8000c60 <HAL_GPIO_Init+0x1ec>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a49      	ldr	r2, [pc, #292]	; (8000d54 <HAL_GPIO_Init+0x2e0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d013      	beq.n	8000c5c <HAL_GPIO_Init+0x1e8>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <HAL_GPIO_Init+0x2e4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d00d      	beq.n	8000c58 <HAL_GPIO_Init+0x1e4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a47      	ldr	r2, [pc, #284]	; (8000d5c <HAL_GPIO_Init+0x2e8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d007      	beq.n	8000c54 <HAL_GPIO_Init+0x1e0>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a46      	ldr	r2, [pc, #280]	; (8000d60 <HAL_GPIO_Init+0x2ec>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d101      	bne.n	8000c50 <HAL_GPIO_Init+0x1dc>
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	e008      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c50:	2305      	movs	r3, #5
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e004      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e002      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_Init+0x1ee>
 8000c60:	2300      	movs	r3, #0
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	f002 0203 	and.w	r2, r2, #3
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	4093      	lsls	r3, r2
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c72:	4937      	ldr	r1, [pc, #220]	; (8000d50 <HAL_GPIO_Init+0x2dc>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	089b      	lsrs	r3, r3, #2
 8000c78:	3302      	adds	r3, #2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c80:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ca4:	4a2f      	ldr	r2, [pc, #188]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000caa:	4b2e      	ldr	r3, [pc, #184]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cce:	4a25      	ldr	r2, [pc, #148]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d22:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa22 f303 	lsr.w	r3, r2, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f47f aea3 	bne.w	8000a84 <HAL_GPIO_Init+0x10>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000
 8000d54:	48000400 	.word	0x48000400
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000c00 	.word	0x48000c00
 8000d60:	48001000 	.word	0x48001000
 8000d64:	40010400 	.word	0x40010400

08000d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	460b      	mov	r3, r1
 8000d72:	807b      	strh	r3, [r7, #2]
 8000d74:	4613      	mov	r3, r2
 8000d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d78:	787b      	ldrb	r3, [r7, #1]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d84:	e002      	b.n	8000d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d86:	887a      	ldrh	r2, [r7, #2]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4013      	ands	r3, r2
 8000db0:	041a      	lsls	r2, r3, #16
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43d9      	mvns	r1, r3
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	400b      	ands	r3, r1
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	619a      	str	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	f000 bef4 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f000 816a 	beq.w	80010ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df6:	4bb3      	ldr	r3, [pc, #716]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	d00c      	beq.n	8000e1c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e02:	4bb0      	ldr	r3, [pc, #704]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	d159      	bne.n	8000ec2 <HAL_RCC_OscConfig+0xf6>
 8000e0e:	4bad      	ldr	r3, [pc, #692]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e1a:	d152      	bne.n	8000ec2 <HAL_RCC_OscConfig+0xf6>
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e30:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e34:	fab3 f383 	clz	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d102      	bne.n	8000e4e <HAL_RCC_OscConfig+0x82>
 8000e48:	4b9e      	ldr	r3, [pc, #632]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	e015      	b.n	8000e7a <HAL_RCC_OscConfig+0xae>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e52:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e66:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000e6e:	fa93 f3a3 	rbit	r3, r3
 8000e72:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e76:	4b93      	ldr	r3, [pc, #588]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e7e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e82:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e86:	fa92 f2a2 	rbit	r2, r2
 8000e8a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e8e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e92:	fab2 f282 	clz	r2, r2
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 810c 	beq.w	80010c8 <HAL_RCC_OscConfig+0x2fc>
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f040 8106 	bne.w	80010c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	f000 be86 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d106      	bne.n	8000edc <HAL_RCC_OscConfig+0x110>
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a7c      	ldr	r2, [pc, #496]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e030      	b.n	8000f3e <HAL_RCC_OscConfig+0x172>
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10c      	bne.n	8000f00 <HAL_RCC_OscConfig+0x134>
 8000ee6:	4b77      	ldr	r3, [pc, #476]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a76      	ldr	r2, [pc, #472]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a73      	ldr	r2, [pc, #460]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e01e      	b.n	8000f3e <HAL_RCC_OscConfig+0x172>
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0a:	d10c      	bne.n	8000f26 <HAL_RCC_OscConfig+0x15a>
 8000f0c:	4b6d      	ldr	r3, [pc, #436]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a6c      	ldr	r2, [pc, #432]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b6a      	ldr	r3, [pc, #424]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a69      	ldr	r2, [pc, #420]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	e00b      	b.n	8000f3e <HAL_RCC_OscConfig+0x172>
 8000f26:	4b67      	ldr	r3, [pc, #412]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a63      	ldr	r2, [pc, #396]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3e:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	f023 020f 	bic.w	r2, r3, #15
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	495d      	ldr	r1, [pc, #372]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d059      	beq.n	8001010 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fc74 	bl	8000848 <HAL_GetTick>
 8000f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f64:	e00a      	b.n	8000f7c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f66:	f7ff fc6f 	bl	8000848 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b64      	cmp	r3, #100	; 0x64
 8000f74:	d902      	bls.n	8000f7c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	f000 be29 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 8000f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f80:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f88:	fa93 f3a3 	rbit	r3, r3
 8000f8c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f90:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d102      	bne.n	8000fae <HAL_RCC_OscConfig+0x1e2>
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	e015      	b.n	8000fda <HAL_RCC_OscConfig+0x20e>
 8000fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000fba:	fa93 f3a3 	rbit	r3, r3
 8000fbe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fc2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fc6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000fce:	fa93 f3a3 	rbit	r3, r3
 8000fd2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fde:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000fe2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fe6:	fa92 f2a2 	rbit	r2, r2
 8000fea:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ff2:	fab2 f282 	clz	r2, r2
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	f002 021f 	and.w	r2, r2, #31
 8001002:	2101      	movs	r1, #1
 8001004:	fa01 f202 	lsl.w	r2, r1, r2
 8001008:	4013      	ands	r3, r2
 800100a:	2b00      	cmp	r3, #0
 800100c:	d0ab      	beq.n	8000f66 <HAL_RCC_OscConfig+0x19a>
 800100e:	e05c      	b.n	80010ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fc1a 	bl	8000848 <HAL_GetTick>
 8001014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800101a:	f7ff fc15 	bl	8000848 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	2b64      	cmp	r3, #100	; 0x64
 8001028:	d902      	bls.n	8001030 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	f000 bdcf 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 8001030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001034:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001038:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001044:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001048:	fab3 f383 	clz	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d102      	bne.n	8001062 <HAL_RCC_OscConfig+0x296>
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x2c2>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800107e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_RCC_OscConfig+0x2f8>)
 800108c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001092:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001096:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800109a:	fa92 f2a2 	rbit	r2, r2
 800109e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80010a2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80010a6:	fab2 f282 	clz	r2, r2
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	f042 0220 	orr.w	r2, r2, #32
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f002 021f 	and.w	r2, r2, #31
 80010b6:	2101      	movs	r1, #1
 80010b8:	fa01 f202 	lsl.w	r2, r1, r2
 80010bc:	4013      	ands	r3, r2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1ab      	bne.n	800101a <HAL_RCC_OscConfig+0x24e>
 80010c2:	e002      	b.n	80010ca <HAL_RCC_OscConfig+0x2fe>
 80010c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 816f 	beq.w	80013b8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010da:	4bd0      	ldr	r3, [pc, #832]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010e6:	4bcd      	ldr	r3, [pc, #820]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b08      	cmp	r3, #8
 80010f0:	d16c      	bne.n	80011cc <HAL_RCC_OscConfig+0x400>
 80010f2:	4bca      	ldr	r3, [pc, #808]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d166      	bne.n	80011cc <HAL_RCC_OscConfig+0x400>
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001110:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	2b01      	cmp	r3, #1
 8001126:	d102      	bne.n	800112e <HAL_RCC_OscConfig+0x362>
 8001128:	4bbc      	ldr	r3, [pc, #752]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	e013      	b.n	8001156 <HAL_RCC_OscConfig+0x38a>
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001134:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001138:	fa93 f3a3 	rbit	r3, r3
 800113c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001140:	2302      	movs	r3, #2
 8001142:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001146:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800114a:	fa93 f3a3 	rbit	r3, r3
 800114e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001152:	4bb2      	ldr	r3, [pc, #712]	; (800141c <HAL_RCC_OscConfig+0x650>)
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	2202      	movs	r2, #2
 8001158:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800115c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001160:	fa92 f2a2 	rbit	r2, r2
 8001164:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001168:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f042 0220 	orr.w	r2, r2, #32
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f002 021f 	and.w	r2, r2, #31
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d007      	beq.n	8001198 <HAL_RCC_OscConfig+0x3cc>
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d002      	beq.n	8001198 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f000 bd1b 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4ba0      	ldr	r3, [pc, #640]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	21f8      	movs	r1, #248	; 0xf8
 80011a8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011b0:	fa91 f1a1 	rbit	r1, r1
 80011b4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80011b8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80011bc:	fab1 f181 	clz	r1, r1
 80011c0:	b2c9      	uxtb	r1, r1
 80011c2:	408b      	lsls	r3, r1
 80011c4:	4995      	ldr	r1, [pc, #596]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e0f5      	b.n	80013b8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691b      	ldr	r3, [r3, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 8085 	beq.w	80012e2 <HAL_RCC_OscConfig+0x516>
 80011d8:	2301      	movs	r3, #1
 80011da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	2301      	movs	r3, #1
 8001202:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fb20 	bl	8000848 <HAL_GetTick>
 8001208:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff fb1b 	bl	8000848 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d902      	bls.n	8001224 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	f000 bcd5 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800122e:	fa93 f3a3 	rbit	r3, r3
 8001232:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001236:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	fab3 f383 	clz	r3, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	095b      	lsrs	r3, r3, #5
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x488>
 800124e:	4b73      	ldr	r3, [pc, #460]	; (800141c <HAL_RCC_OscConfig+0x650>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	e013      	b.n	800127c <HAL_RCC_OscConfig+0x4b0>
 8001254:	2302      	movs	r3, #2
 8001256:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800126c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	2202      	movs	r2, #2
 800127e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001282:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001286:	fa92 f2a2 	rbit	r2, r2
 800128a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800128e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	f042 0220 	orr.w	r2, r2, #32
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	f002 021f 	and.w	r2, r2, #31
 80012a2:	2101      	movs	r1, #1
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0af      	beq.n	800120e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	21f8      	movs	r1, #248	; 0xf8
 80012be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012c6:	fa91 f1a1 	rbit	r1, r1
 80012ca:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012ce:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012d2:	fab1 f181 	clz	r1, r1
 80012d6:	b2c9      	uxtb	r1, r1
 80012d8:	408b      	lsls	r3, r1
 80012da:	4950      	ldr	r1, [pc, #320]	; (800141c <HAL_RCC_OscConfig+0x650>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e06a      	b.n	80013b8 <HAL_RCC_OscConfig+0x5ec>
 80012e2:	2301      	movs	r3, #1
 80012e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012ec:	fa93 f3a3 	rbit	r3, r3
 80012f0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001302:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	461a      	mov	r2, r3
 800130a:	2300      	movs	r3, #0
 800130c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130e:	f7ff fa9b 	bl	8000848 <HAL_GetTick>
 8001312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fa96 	bl	8000848 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d902      	bls.n	800132e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	f000 bc50 	b.w	8001bce <HAL_RCC_OscConfig+0xe02>
 800132e:	2302      	movs	r3, #2
 8001330:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x592>
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_RCC_OscConfig+0x650>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e013      	b.n	8001386 <HAL_RCC_OscConfig+0x5ba>
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001368:	fa93 f3a3 	rbit	r3, r3
 800136c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001376:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_RCC_OscConfig+0x650>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	2202      	movs	r2, #2
 8001388:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800138c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001390:	fa92 f2a2 	rbit	r2, r2
 8001394:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001398:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800139c:	fab2 f282 	clz	r2, r2
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	f042 0220 	orr.w	r2, r2, #32
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	f002 021f 	and.w	r2, r2, #31
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f202 	lsl.w	r2, r1, r2
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1af      	bne.n	8001318 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80da 	beq.w	800157c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d069      	beq.n	80014a6 <HAL_RCC_OscConfig+0x6da>
 80013d2:	2301      	movs	r3, #1
 80013d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x654>)
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	461a      	mov	r2, r3
 80013f8:	2301      	movs	r3, #1
 80013fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fa24 	bl	8000848 <HAL_GetTick>
 8001400:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001404:	e00e      	b.n	8001424 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fa1f 	bl	8000848 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d906      	bls.n	8001424 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e3d9      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	10908120 	.word	0x10908120
 8001424:	2302      	movs	r3, #2
 8001426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800142e:	fa93 f3a3 	rbit	r3, r3
 8001432:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001436:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	fa93 f2a3 	rbit	r2, r3
 8001448:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001452:	2202      	movs	r2, #2
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	fa93 f2a3 	rbit	r2, r3
 8001460:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001464:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4ba5      	ldr	r3, [pc, #660]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800146a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800146e:	2102      	movs	r1, #2
 8001470:	6019      	str	r1, [r3, #0]
 8001472:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f1a3 	rbit	r1, r3
 800147c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001480:	6019      	str	r1, [r3, #0]
  return result;
 8001482:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	fab3 f383 	clz	r3, r3
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 031f 	and.w	r3, r3, #31
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0b0      	beq.n	8001406 <HAL_RCC_OscConfig+0x63a>
 80014a4:	e06a      	b.n	800157c <HAL_RCC_OscConfig+0x7b0>
 80014a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	fa93 f2a3 	rbit	r2, r3
 80014b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014bc:	601a      	str	r2, [r3, #0]
  return result;
 80014be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014c2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c4:	fab3 f383 	clz	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b8c      	ldr	r3, [pc, #560]	; (8001700 <HAL_RCC_OscConfig+0x934>)
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	461a      	mov	r2, r3
 80014d4:	2300      	movs	r3, #0
 80014d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff f9b6 	bl	8000848 <HAL_GetTick>
 80014dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	e009      	b.n	80014f6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e2:	f7ff f9b1 	bl	8000848 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e36b      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80014f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80014fa:	2202      	movs	r2, #2
 80014fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	fa93 f2a3 	rbit	r2, r3
 8001508:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800152a:	2202      	movs	r2, #2
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800153c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001542:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001546:	2102      	movs	r1, #2
 8001548:	6019      	str	r1, [r3, #0]
 800154a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fa93 f1a3 	rbit	r1, r3
 8001554:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001558:	6019      	str	r1, [r3, #0]
  return result;
 800155a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 031f 	and.w	r3, r3, #31
 8001570:	2101      	movs	r1, #1
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1b2      	bne.n	80014e2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8158 	beq.w	800183c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001592:	4b5a      	ldr	r3, [pc, #360]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800159e:	4b57      	ldr	r3, [pc, #348]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a56      	ldr	r2, [pc, #344]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80015a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]
 80015aa:	4b54      	ldr	r3, [pc, #336]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015be:	2301      	movs	r3, #1
 80015c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11a      	bne.n	8001606 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015da:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015dc:	f7ff f934 	bl	8000848 <HAL_GetTick>
 80015e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e009      	b.n	80015fa <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff f92f 	bl	8000848 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e2e9      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fa:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x938>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0ef      	beq.n	80015e6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d106      	bne.n	800161e <HAL_RCC_OscConfig+0x852>
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	e02f      	b.n	800167e <HAL_RCC_OscConfig+0x8b2>
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x876>
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a33      	ldr	r2, [pc, #204]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b31      	ldr	r3, [pc, #196]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800163a:	f023 0304 	bic.w	r3, r3, #4
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e01d      	b.n	800167e <HAL_RCC_OscConfig+0x8b2>
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b05      	cmp	r3, #5
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x89a>
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a2a      	ldr	r2, [pc, #168]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a27      	ldr	r2, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6213      	str	r3, [r2, #32]
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0x8b2>
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	4a24      	ldr	r2, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 800166c:	f023 0301 	bic.w	r3, r3, #1
 8001670:	6213      	str	r3, [r2, #32]
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d06b      	beq.n	8001760 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001688:	f7ff f8de 	bl	8000848 <HAL_GetTick>
 800168c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001690:	e00b      	b.n	80016aa <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff f8d9 	bl	8000848 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e291      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80016aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016c6:	2202      	movs	r2, #2
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016d8:	601a      	str	r2, [r3, #0]
  return result;
 80016da:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80016de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d109      	bne.n	8001708 <HAL_RCC_OscConfig+0x93c>
 80016f4:	4b01      	ldr	r3, [pc, #4]	; (80016fc <HAL_RCC_OscConfig+0x930>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	e014      	b.n	8001724 <HAL_RCC_OscConfig+0x958>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	10908120 	.word	0x10908120
 8001704:	40007000 	.word	0x40007000
 8001708:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	4bbb      	ldr	r3, [pc, #748]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001728:	2102      	movs	r1, #2
 800172a:	6011      	str	r1, [r2, #0]
 800172c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	fa92 f1a2 	rbit	r1, r2
 8001736:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800173a:	6011      	str	r1, [r2, #0]
  return result;
 800173c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	fab2 f282 	clz	r2, r2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f002 021f 	and.w	r2, r2, #31
 8001752:	2101      	movs	r1, #1
 8001754:	fa01 f202 	lsl.w	r2, r1, r2
 8001758:	4013      	ands	r3, r2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d099      	beq.n	8001692 <HAL_RCC_OscConfig+0x8c6>
 800175e:	e063      	b.n	8001828 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff f872 	bl	8000848 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00b      	b.n	8001782 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff f86d 	bl	8000848 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e225      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 8001782:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fa93 f2a3 	rbit	r2, r3
 80017ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b0:	601a      	str	r2, [r3, #0]
  return result;
 80017b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	fab3 f383 	clz	r3, r3
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d102      	bne.n	80017d2 <HAL_RCC_OscConfig+0xa06>
 80017cc:	4b90      	ldr	r3, [pc, #576]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	e00d      	b.n	80017ee <HAL_RCC_OscConfig+0xa22>
 80017d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017d6:	2202      	movs	r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017f2:	2102      	movs	r1, #2
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	fa92 f1a2 	rbit	r1, r2
 8001800:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001804:	6011      	str	r1, [r2, #0]
  return result;
 8001806:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1a0      	bne.n	800176a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001828:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a76      	ldr	r2, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 81c2 	beq.w	8001bcc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	f000 819c 	beq.w	8001b8e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b02      	cmp	r3, #2
 800185e:	f040 8114 	bne.w	8001a8a <HAL_RCC_OscConfig+0xcbe>
 8001862:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800186a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800187a:	601a      	str	r2, [r3, #0]
  return result;
 800187c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001880:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	2300      	movs	r3, #0
 8001896:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7fe ffd6 	bl	8000848 <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a0:	e009      	b.n	80018b6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7fe ffd1 	bl	8000848 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e18b      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80018b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018ce:	601a      	str	r2, [r3, #0]
  return result;
 80018d0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80018d4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_OscConfig+0xb24>
 80018ea:	4b49      	ldr	r3, [pc, #292]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e01b      	b.n	8001928 <HAL_RCC_OscConfig+0xb5c>
 80018f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800190e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f2a3 	rbit	r2, r3
 800191e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800192c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001930:	6011      	str	r1, [r2, #0]
 8001932:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	fa92 f1a2 	rbit	r1, r2
 800193c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001940:	6011      	str	r1, [r2, #0]
  return result;
 8001942:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fab2 f282 	clz	r2, r2
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	f002 021f 	and.w	r2, r2, #31
 8001958:	2101      	movs	r1, #1
 800195a:	fa01 f202 	lsl.w	r2, r1, r2
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d19e      	bne.n	80018a2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	430b      	orrs	r3, r1
 800197a:	4925      	ldr	r1, [pc, #148]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 800197c:	4313      	orrs	r3, r2
 800197e:	604b      	str	r3, [r1, #4]
 8001980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001998:	601a      	str	r2, [r3, #0]
  return result;
 800199a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800199e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	2301      	movs	r3, #1
 80019b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b6:	f7fe ff47 	bl	8000848 <HAL_GetTick>
 80019ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019be:	e009      	b.n	80019d4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe ff42 	bl	8000848 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0fc      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 80019d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	fa93 f2a3 	rbit	r2, r3
 80019e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019ec:	601a      	str	r2, [r3, #0]
  return result;
 80019ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f4:	fab3 f383 	clz	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0xc48>
 8001a08:	4b01      	ldr	r3, [pc, #4]	; (8001a10 <HAL_RCC_OscConfig+0xc44>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	e01e      	b.n	8001a4c <HAL_RCC_OscConfig+0xc80>
 8001a0e:	bf00      	nop
 8001a10:	40021000 	.word	0x40021000
 8001a14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	fa93 f2a3 	rbit	r2, r3
 8001a42:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a54:	6011      	str	r1, [r2, #0]
 8001a56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f042 0220 	orr.w	r2, r2, #32
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f002 021f 	and.w	r2, r2, #31
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d09b      	beq.n	80019c0 <HAL_RCC_OscConfig+0xbf4>
 8001a88:	e0a0      	b.n	8001bcc <HAL_RCC_OscConfig+0xe00>
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa2:	601a      	str	r2, [r3, #0]
  return result;
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	fab3 f383 	clz	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	461a      	mov	r2, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fec2 	bl	8000848 <HAL_GetTick>
 8001ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	e009      	b.n	8001ade <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7fe febd 	bl	8000848 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e077      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
 8001ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ae6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	601a      	str	r2, [r3, #0]
  return result;
 8001af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001afc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	095b      	lsrs	r3, r3, #5
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <HAL_RCC_OscConfig+0xd4c>
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0xd84>
 8001b18:	f107 0320 	add.w	r3, r7, #32
 8001b1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f107 0318 	add.w	r3, r7, #24
 8001b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	f107 0318 	add.w	r3, r7, #24
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	f107 0210 	add.w	r2, r7, #16
 8001b54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b58:	6011      	str	r1, [r2, #0]
 8001b5a:	f107 0210 	add.w	r2, r7, #16
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	fa92 f1a2 	rbit	r1, r2
 8001b64:	f107 020c 	add.w	r2, r7, #12
 8001b68:	6011      	str	r1, [r2, #0]
  return result;
 8001b6a:	f107 020c 	add.w	r2, r7, #12
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	fab2 f282 	clz	r2, r2
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	f042 0220 	orr.w	r2, r2, #32
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	f002 021f 	and.w	r2, r2, #31
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d19e      	bne.n	8001aca <HAL_RCC_OscConfig+0xcfe>
 8001b8c:	e01e      	b.n	8001bcc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_RCC_OscConfig+0xe0c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ba4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ba8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d108      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bbe:	1d3b      	adds	r3, r7, #4
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000

08001bdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09e      	sub	sp, #120	; 0x78
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e162      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b90      	ldr	r3, [pc, #576]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d910      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b8d      	ldr	r3, [pc, #564]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 0207 	bic.w	r2, r3, #7
 8001c0a:	498b      	ldr	r1, [pc, #556]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e14a      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c30:	4b82      	ldr	r3, [pc, #520]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	497f      	ldr	r1, [pc, #508]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80dc 	beq.w	8001e08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d13c      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xf6>
 8001c58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c5c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d102      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xa6>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	e00f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0xc6>
 8001c82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c8a:	fa93 f3a3 	rbit	r3, r3
 8001c8e:	667b      	str	r3, [r7, #100]	; 0x64
 8001c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c94:	663b      	str	r3, [r7, #96]	; 0x60
 8001c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c98:	fa93 f3a3 	rbit	r3, r3
 8001c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c9e:	4b67      	ldr	r3, [pc, #412]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001caa:	fa92 f2a2 	rbit	r2, r2
 8001cae:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d17b      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0f3      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d13c      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x178>
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	fab3 f383 	clz	r3, r3
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d102      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x128>
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_ClockConfig+0x148>
 8001d04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d08:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
 8001d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d16:	643b      	str	r3, [r7, #64]	; 0x40
 8001d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d20:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d28:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13a      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b2      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
 8001d54:	2302      	movs	r3, #2
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	095b      	lsrs	r3, r3, #5
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1a0>
 8001d76:	4b31      	ldr	r3, [pc, #196]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	e00d      	b.n	8001d98 <HAL_RCC_ClockConfig+0x1bc>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	627b      	str	r3, [r7, #36]	; 0x24
 8001d88:	2302      	movs	r3, #2
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2202      	movs	r2, #2
 8001d9a:	61ba      	str	r2, [r7, #24]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	fa92 f2a2 	rbit	r2, r2
 8001da2:	617a      	str	r2, [r7, #20]
  return result;
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	fab2 f282 	clz	r2, r2
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	f042 0220 	orr.w	r2, r2, #32
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e079      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	491a      	ldr	r1, [pc, #104]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7fe fd36 	bl	8000848 <HAL_GetTick>
 8001ddc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de0:	f7fe fd32 	bl	8000848 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e061      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_ClockConfig+0x260>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 020c 	and.w	r2, r3, #12
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1eb      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d214      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 0207 	bic.w	r2, r3, #7
 8001e1e:	4906      	ldr	r1, [pc, #24]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_RCC_ClockConfig+0x25c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e040      	b.n	8001eba <HAL_RCC_ClockConfig+0x2de>
 8001e38:	40022000 	.word	0x40022000
 8001e3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e7e:	f000 f829 	bl	8001ed4 <HAL_RCC_GetSysClockFreq>
 8001e82:	4601      	mov	r1, r0
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_ClockConfig+0x2e8>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e8c:	22f0      	movs	r2, #240	; 0xf0
 8001e8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	60fa      	str	r2, [r7, #12]
  return result;
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	40d3      	lsrs	r3, r2
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x2ec>)
 8001ea4:	5cd3      	ldrb	r3, [r2, r3]
 8001ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_RCC_ClockConfig+0x2f0>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCC_ClockConfig+0x2f4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe fc84 	bl	80007c0 <HAL_InitTick>
  
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3778      	adds	r7, #120	; 0x78
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08002ee4 	.word	0x08002ee4
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b08b      	sub	sp, #44	; 0x2c
 8001ed8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x30>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0x36>
 8001f02:	e03c      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f06:	623b      	str	r3, [r7, #32]
      break;
 8001f08:	e03c      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f10:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f14:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	607a      	str	r2, [r7, #4]
  return result;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	40d3      	lsrs	r3, r2
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f2e:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	220f      	movs	r2, #15
 8001f38:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	fa92 f2a2 	rbit	r2, r2
 8001f40:	60fa      	str	r2, [r7, #12]
  return result;
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	fab2 f282 	clz	r2, r2
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	40d3      	lsrs	r3, r2
 8001f4c:	4a14      	ldr	r2, [pc, #80]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f4e:	5cd3      	ldrb	r3, [r2, r3]
 8001f50:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6c:	e004      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	623b      	str	r3, [r7, #32]
      break;
 8001f7c:	e002      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f80:	623b      	str	r3, [r7, #32]
      break;
 8001f82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f84:	6a3b      	ldr	r3, [r7, #32]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	372c      	adds	r7, #44	; 0x2c
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	007a1200 	.word	0x007a1200
 8001f9c:	08002ef4 	.word	0x08002ef4
 8001fa0:	08002f04 	.word	0x08002f04
 8001fa4:	003d0900 	.word	0x003d0900

08001fa8 <__errno>:
 8001fa8:	4b01      	ldr	r3, [pc, #4]	; (8001fb0 <__errno+0x8>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <__libc_init_array>:
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	4d0d      	ldr	r5, [pc, #52]	; (8001fec <__libc_init_array+0x38>)
 8001fb8:	4c0d      	ldr	r4, [pc, #52]	; (8001ff0 <__libc_init_array+0x3c>)
 8001fba:	1b64      	subs	r4, r4, r5
 8001fbc:	10a4      	asrs	r4, r4, #2
 8001fbe:	2600      	movs	r6, #0
 8001fc0:	42a6      	cmp	r6, r4
 8001fc2:	d109      	bne.n	8001fd8 <__libc_init_array+0x24>
 8001fc4:	4d0b      	ldr	r5, [pc, #44]	; (8001ff4 <__libc_init_array+0x40>)
 8001fc6:	4c0c      	ldr	r4, [pc, #48]	; (8001ff8 <__libc_init_array+0x44>)
 8001fc8:	f000 ff76 	bl	8002eb8 <_init>
 8001fcc:	1b64      	subs	r4, r4, r5
 8001fce:	10a4      	asrs	r4, r4, #2
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	42a6      	cmp	r6, r4
 8001fd4:	d105      	bne.n	8001fe2 <__libc_init_array+0x2e>
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fdc:	4798      	blx	r3
 8001fde:	3601      	adds	r6, #1
 8001fe0:	e7ee      	b.n	8001fc0 <__libc_init_array+0xc>
 8001fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fe6:	4798      	blx	r3
 8001fe8:	3601      	adds	r6, #1
 8001fea:	e7f2      	b.n	8001fd2 <__libc_init_array+0x1e>
 8001fec:	08002fac 	.word	0x08002fac
 8001ff0:	08002fac 	.word	0x08002fac
 8001ff4:	08002fac 	.word	0x08002fac
 8001ff8:	08002fb0 	.word	0x08002fb0

08001ffc <memset>:
 8001ffc:	4402      	add	r2, r0
 8001ffe:	4603      	mov	r3, r0
 8002000:	4293      	cmp	r3, r2
 8002002:	d100      	bne.n	8002006 <memset+0xa>
 8002004:	4770      	bx	lr
 8002006:	f803 1b01 	strb.w	r1, [r3], #1
 800200a:	e7f9      	b.n	8002000 <memset+0x4>

0800200c <iprintf>:
 800200c:	b40f      	push	{r0, r1, r2, r3}
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <iprintf+0x2c>)
 8002010:	b513      	push	{r0, r1, r4, lr}
 8002012:	681c      	ldr	r4, [r3, #0]
 8002014:	b124      	cbz	r4, 8002020 <iprintf+0x14>
 8002016:	69a3      	ldr	r3, [r4, #24]
 8002018:	b913      	cbnz	r3, 8002020 <iprintf+0x14>
 800201a:	4620      	mov	r0, r4
 800201c:	f000 f866 	bl	80020ec <__sinit>
 8002020:	ab05      	add	r3, sp, #20
 8002022:	9a04      	ldr	r2, [sp, #16]
 8002024:	68a1      	ldr	r1, [r4, #8]
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	4620      	mov	r0, r4
 800202a:	f000 f983 	bl	8002334 <_vfiprintf_r>
 800202e:	b002      	add	sp, #8
 8002030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002034:	b004      	add	sp, #16
 8002036:	4770      	bx	lr
 8002038:	2000000c 	.word	0x2000000c

0800203c <std>:
 800203c:	2300      	movs	r3, #0
 800203e:	b510      	push	{r4, lr}
 8002040:	4604      	mov	r4, r0
 8002042:	e9c0 3300 	strd	r3, r3, [r0]
 8002046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800204a:	6083      	str	r3, [r0, #8]
 800204c:	8181      	strh	r1, [r0, #12]
 800204e:	6643      	str	r3, [r0, #100]	; 0x64
 8002050:	81c2      	strh	r2, [r0, #14]
 8002052:	6183      	str	r3, [r0, #24]
 8002054:	4619      	mov	r1, r3
 8002056:	2208      	movs	r2, #8
 8002058:	305c      	adds	r0, #92	; 0x5c
 800205a:	f7ff ffcf 	bl	8001ffc <memset>
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <std+0x38>)
 8002060:	6263      	str	r3, [r4, #36]	; 0x24
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <std+0x3c>)
 8002064:	62a3      	str	r3, [r4, #40]	; 0x28
 8002066:	4b05      	ldr	r3, [pc, #20]	; (800207c <std+0x40>)
 8002068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <std+0x44>)
 800206c:	6224      	str	r4, [r4, #32]
 800206e:	6323      	str	r3, [r4, #48]	; 0x30
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	080028dd 	.word	0x080028dd
 8002078:	080028ff 	.word	0x080028ff
 800207c:	08002937 	.word	0x08002937
 8002080:	0800295b 	.word	0x0800295b

08002084 <_cleanup_r>:
 8002084:	4901      	ldr	r1, [pc, #4]	; (800208c <_cleanup_r+0x8>)
 8002086:	f000 b8af 	b.w	80021e8 <_fwalk_reent>
 800208a:	bf00      	nop
 800208c:	08002c35 	.word	0x08002c35

08002090 <__sfmoreglue>:
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	1e4a      	subs	r2, r1, #1
 8002094:	2568      	movs	r5, #104	; 0x68
 8002096:	4355      	muls	r5, r2
 8002098:	460e      	mov	r6, r1
 800209a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800209e:	f000 f8c5 	bl	800222c <_malloc_r>
 80020a2:	4604      	mov	r4, r0
 80020a4:	b140      	cbz	r0, 80020b8 <__sfmoreglue+0x28>
 80020a6:	2100      	movs	r1, #0
 80020a8:	e9c0 1600 	strd	r1, r6, [r0]
 80020ac:	300c      	adds	r0, #12
 80020ae:	60a0      	str	r0, [r4, #8]
 80020b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020b4:	f7ff ffa2 	bl	8001ffc <memset>
 80020b8:	4620      	mov	r0, r4
 80020ba:	bd70      	pop	{r4, r5, r6, pc}

080020bc <__sfp_lock_acquire>:
 80020bc:	4801      	ldr	r0, [pc, #4]	; (80020c4 <__sfp_lock_acquire+0x8>)
 80020be:	f000 b8b3 	b.w	8002228 <__retarget_lock_acquire_recursive>
 80020c2:	bf00      	nop
 80020c4:	200000a4 	.word	0x200000a4

080020c8 <__sfp_lock_release>:
 80020c8:	4801      	ldr	r0, [pc, #4]	; (80020d0 <__sfp_lock_release+0x8>)
 80020ca:	f000 b8ae 	b.w	800222a <__retarget_lock_release_recursive>
 80020ce:	bf00      	nop
 80020d0:	200000a4 	.word	0x200000a4

080020d4 <__sinit_lock_acquire>:
 80020d4:	4801      	ldr	r0, [pc, #4]	; (80020dc <__sinit_lock_acquire+0x8>)
 80020d6:	f000 b8a7 	b.w	8002228 <__retarget_lock_acquire_recursive>
 80020da:	bf00      	nop
 80020dc:	2000009f 	.word	0x2000009f

080020e0 <__sinit_lock_release>:
 80020e0:	4801      	ldr	r0, [pc, #4]	; (80020e8 <__sinit_lock_release+0x8>)
 80020e2:	f000 b8a2 	b.w	800222a <__retarget_lock_release_recursive>
 80020e6:	bf00      	nop
 80020e8:	2000009f 	.word	0x2000009f

080020ec <__sinit>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	4604      	mov	r4, r0
 80020f0:	f7ff fff0 	bl	80020d4 <__sinit_lock_acquire>
 80020f4:	69a3      	ldr	r3, [r4, #24]
 80020f6:	b11b      	cbz	r3, 8002100 <__sinit+0x14>
 80020f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020fc:	f7ff bff0 	b.w	80020e0 <__sinit_lock_release>
 8002100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002104:	6523      	str	r3, [r4, #80]	; 0x50
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <__sinit+0x68>)
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <__sinit+0x6c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	62a2      	str	r2, [r4, #40]	; 0x28
 800210e:	42a3      	cmp	r3, r4
 8002110:	bf04      	itt	eq
 8002112:	2301      	moveq	r3, #1
 8002114:	61a3      	streq	r3, [r4, #24]
 8002116:	4620      	mov	r0, r4
 8002118:	f000 f820 	bl	800215c <__sfp>
 800211c:	6060      	str	r0, [r4, #4]
 800211e:	4620      	mov	r0, r4
 8002120:	f000 f81c 	bl	800215c <__sfp>
 8002124:	60a0      	str	r0, [r4, #8]
 8002126:	4620      	mov	r0, r4
 8002128:	f000 f818 	bl	800215c <__sfp>
 800212c:	2200      	movs	r2, #0
 800212e:	60e0      	str	r0, [r4, #12]
 8002130:	2104      	movs	r1, #4
 8002132:	6860      	ldr	r0, [r4, #4]
 8002134:	f7ff ff82 	bl	800203c <std>
 8002138:	68a0      	ldr	r0, [r4, #8]
 800213a:	2201      	movs	r2, #1
 800213c:	2109      	movs	r1, #9
 800213e:	f7ff ff7d 	bl	800203c <std>
 8002142:	68e0      	ldr	r0, [r4, #12]
 8002144:	2202      	movs	r2, #2
 8002146:	2112      	movs	r1, #18
 8002148:	f7ff ff78 	bl	800203c <std>
 800214c:	2301      	movs	r3, #1
 800214e:	61a3      	str	r3, [r4, #24]
 8002150:	e7d2      	b.n	80020f8 <__sinit+0xc>
 8002152:	bf00      	nop
 8002154:	08002f14 	.word	0x08002f14
 8002158:	08002085 	.word	0x08002085

0800215c <__sfp>:
 800215c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800215e:	4607      	mov	r7, r0
 8002160:	f7ff ffac 	bl	80020bc <__sfp_lock_acquire>
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <__sfp+0x84>)
 8002166:	681e      	ldr	r6, [r3, #0]
 8002168:	69b3      	ldr	r3, [r6, #24]
 800216a:	b913      	cbnz	r3, 8002172 <__sfp+0x16>
 800216c:	4630      	mov	r0, r6
 800216e:	f7ff ffbd 	bl	80020ec <__sinit>
 8002172:	3648      	adds	r6, #72	; 0x48
 8002174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002178:	3b01      	subs	r3, #1
 800217a:	d503      	bpl.n	8002184 <__sfp+0x28>
 800217c:	6833      	ldr	r3, [r6, #0]
 800217e:	b30b      	cbz	r3, 80021c4 <__sfp+0x68>
 8002180:	6836      	ldr	r6, [r6, #0]
 8002182:	e7f7      	b.n	8002174 <__sfp+0x18>
 8002184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002188:	b9d5      	cbnz	r5, 80021c0 <__sfp+0x64>
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <__sfp+0x88>)
 800218c:	60e3      	str	r3, [r4, #12]
 800218e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002192:	6665      	str	r5, [r4, #100]	; 0x64
 8002194:	f000 f847 	bl	8002226 <__retarget_lock_init_recursive>
 8002198:	f7ff ff96 	bl	80020c8 <__sfp_lock_release>
 800219c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021a4:	6025      	str	r5, [r4, #0]
 80021a6:	61a5      	str	r5, [r4, #24]
 80021a8:	2208      	movs	r2, #8
 80021aa:	4629      	mov	r1, r5
 80021ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021b0:	f7ff ff24 	bl	8001ffc <memset>
 80021b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80021bc:	4620      	mov	r0, r4
 80021be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021c0:	3468      	adds	r4, #104	; 0x68
 80021c2:	e7d9      	b.n	8002178 <__sfp+0x1c>
 80021c4:	2104      	movs	r1, #4
 80021c6:	4638      	mov	r0, r7
 80021c8:	f7ff ff62 	bl	8002090 <__sfmoreglue>
 80021cc:	4604      	mov	r4, r0
 80021ce:	6030      	str	r0, [r6, #0]
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d1d5      	bne.n	8002180 <__sfp+0x24>
 80021d4:	f7ff ff78 	bl	80020c8 <__sfp_lock_release>
 80021d8:	230c      	movs	r3, #12
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	e7ee      	b.n	80021bc <__sfp+0x60>
 80021de:	bf00      	nop
 80021e0:	08002f14 	.word	0x08002f14
 80021e4:	ffff0001 	.word	0xffff0001

080021e8 <_fwalk_reent>:
 80021e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ec:	4606      	mov	r6, r0
 80021ee:	4688      	mov	r8, r1
 80021f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021f4:	2700      	movs	r7, #0
 80021f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021fa:	f1b9 0901 	subs.w	r9, r9, #1
 80021fe:	d505      	bpl.n	800220c <_fwalk_reent+0x24>
 8002200:	6824      	ldr	r4, [r4, #0]
 8002202:	2c00      	cmp	r4, #0
 8002204:	d1f7      	bne.n	80021f6 <_fwalk_reent+0xe>
 8002206:	4638      	mov	r0, r7
 8002208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800220c:	89ab      	ldrh	r3, [r5, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d907      	bls.n	8002222 <_fwalk_reent+0x3a>
 8002212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002216:	3301      	adds	r3, #1
 8002218:	d003      	beq.n	8002222 <_fwalk_reent+0x3a>
 800221a:	4629      	mov	r1, r5
 800221c:	4630      	mov	r0, r6
 800221e:	47c0      	blx	r8
 8002220:	4307      	orrs	r7, r0
 8002222:	3568      	adds	r5, #104	; 0x68
 8002224:	e7e9      	b.n	80021fa <_fwalk_reent+0x12>

08002226 <__retarget_lock_init_recursive>:
 8002226:	4770      	bx	lr

08002228 <__retarget_lock_acquire_recursive>:
 8002228:	4770      	bx	lr

0800222a <__retarget_lock_release_recursive>:
 800222a:	4770      	bx	lr

0800222c <_malloc_r>:
 800222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222e:	1ccd      	adds	r5, r1, #3
 8002230:	f025 0503 	bic.w	r5, r5, #3
 8002234:	3508      	adds	r5, #8
 8002236:	2d0c      	cmp	r5, #12
 8002238:	bf38      	it	cc
 800223a:	250c      	movcc	r5, #12
 800223c:	2d00      	cmp	r5, #0
 800223e:	4606      	mov	r6, r0
 8002240:	db01      	blt.n	8002246 <_malloc_r+0x1a>
 8002242:	42a9      	cmp	r1, r5
 8002244:	d903      	bls.n	800224e <_malloc_r+0x22>
 8002246:	230c      	movs	r3, #12
 8002248:	6033      	str	r3, [r6, #0]
 800224a:	2000      	movs	r0, #0
 800224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800224e:	f000 fda3 	bl	8002d98 <__malloc_lock>
 8002252:	4921      	ldr	r1, [pc, #132]	; (80022d8 <_malloc_r+0xac>)
 8002254:	680a      	ldr	r2, [r1, #0]
 8002256:	4614      	mov	r4, r2
 8002258:	b99c      	cbnz	r4, 8002282 <_malloc_r+0x56>
 800225a:	4f20      	ldr	r7, [pc, #128]	; (80022dc <_malloc_r+0xb0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b923      	cbnz	r3, 800226a <_malloc_r+0x3e>
 8002260:	4621      	mov	r1, r4
 8002262:	4630      	mov	r0, r6
 8002264:	f000 fb2a 	bl	80028bc <_sbrk_r>
 8002268:	6038      	str	r0, [r7, #0]
 800226a:	4629      	mov	r1, r5
 800226c:	4630      	mov	r0, r6
 800226e:	f000 fb25 	bl	80028bc <_sbrk_r>
 8002272:	1c43      	adds	r3, r0, #1
 8002274:	d123      	bne.n	80022be <_malloc_r+0x92>
 8002276:	230c      	movs	r3, #12
 8002278:	6033      	str	r3, [r6, #0]
 800227a:	4630      	mov	r0, r6
 800227c:	f000 fd92 	bl	8002da4 <__malloc_unlock>
 8002280:	e7e3      	b.n	800224a <_malloc_r+0x1e>
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	1b5b      	subs	r3, r3, r5
 8002286:	d417      	bmi.n	80022b8 <_malloc_r+0x8c>
 8002288:	2b0b      	cmp	r3, #11
 800228a:	d903      	bls.n	8002294 <_malloc_r+0x68>
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	441c      	add	r4, r3
 8002290:	6025      	str	r5, [r4, #0]
 8002292:	e004      	b.n	800229e <_malloc_r+0x72>
 8002294:	6863      	ldr	r3, [r4, #4]
 8002296:	42a2      	cmp	r2, r4
 8002298:	bf0c      	ite	eq
 800229a:	600b      	streq	r3, [r1, #0]
 800229c:	6053      	strne	r3, [r2, #4]
 800229e:	4630      	mov	r0, r6
 80022a0:	f000 fd80 	bl	8002da4 <__malloc_unlock>
 80022a4:	f104 000b 	add.w	r0, r4, #11
 80022a8:	1d23      	adds	r3, r4, #4
 80022aa:	f020 0007 	bic.w	r0, r0, #7
 80022ae:	1ac2      	subs	r2, r0, r3
 80022b0:	d0cc      	beq.n	800224c <_malloc_r+0x20>
 80022b2:	1a1b      	subs	r3, r3, r0
 80022b4:	50a3      	str	r3, [r4, r2]
 80022b6:	e7c9      	b.n	800224c <_malloc_r+0x20>
 80022b8:	4622      	mov	r2, r4
 80022ba:	6864      	ldr	r4, [r4, #4]
 80022bc:	e7cc      	b.n	8002258 <_malloc_r+0x2c>
 80022be:	1cc4      	adds	r4, r0, #3
 80022c0:	f024 0403 	bic.w	r4, r4, #3
 80022c4:	42a0      	cmp	r0, r4
 80022c6:	d0e3      	beq.n	8002290 <_malloc_r+0x64>
 80022c8:	1a21      	subs	r1, r4, r0
 80022ca:	4630      	mov	r0, r6
 80022cc:	f000 faf6 	bl	80028bc <_sbrk_r>
 80022d0:	3001      	adds	r0, #1
 80022d2:	d1dd      	bne.n	8002290 <_malloc_r+0x64>
 80022d4:	e7cf      	b.n	8002276 <_malloc_r+0x4a>
 80022d6:	bf00      	nop
 80022d8:	20000090 	.word	0x20000090
 80022dc:	20000094 	.word	0x20000094

080022e0 <__sfputc_r>:
 80022e0:	6893      	ldr	r3, [r2, #8]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	b410      	push	{r4}
 80022e8:	6093      	str	r3, [r2, #8]
 80022ea:	da08      	bge.n	80022fe <__sfputc_r+0x1e>
 80022ec:	6994      	ldr	r4, [r2, #24]
 80022ee:	42a3      	cmp	r3, r4
 80022f0:	db01      	blt.n	80022f6 <__sfputc_r+0x16>
 80022f2:	290a      	cmp	r1, #10
 80022f4:	d103      	bne.n	80022fe <__sfputc_r+0x1e>
 80022f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022fa:	f000 bb33 	b.w	8002964 <__swbuf_r>
 80022fe:	6813      	ldr	r3, [r2, #0]
 8002300:	1c58      	adds	r0, r3, #1
 8002302:	6010      	str	r0, [r2, #0]
 8002304:	7019      	strb	r1, [r3, #0]
 8002306:	4608      	mov	r0, r1
 8002308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800230c:	4770      	bx	lr

0800230e <__sfputs_r>:
 800230e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002310:	4606      	mov	r6, r0
 8002312:	460f      	mov	r7, r1
 8002314:	4614      	mov	r4, r2
 8002316:	18d5      	adds	r5, r2, r3
 8002318:	42ac      	cmp	r4, r5
 800231a:	d101      	bne.n	8002320 <__sfputs_r+0x12>
 800231c:	2000      	movs	r0, #0
 800231e:	e007      	b.n	8002330 <__sfputs_r+0x22>
 8002320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002324:	463a      	mov	r2, r7
 8002326:	4630      	mov	r0, r6
 8002328:	f7ff ffda 	bl	80022e0 <__sfputc_r>
 800232c:	1c43      	adds	r3, r0, #1
 800232e:	d1f3      	bne.n	8002318 <__sfputs_r+0xa>
 8002330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002334 <_vfiprintf_r>:
 8002334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002338:	460d      	mov	r5, r1
 800233a:	b09d      	sub	sp, #116	; 0x74
 800233c:	4614      	mov	r4, r2
 800233e:	4698      	mov	r8, r3
 8002340:	4606      	mov	r6, r0
 8002342:	b118      	cbz	r0, 800234c <_vfiprintf_r+0x18>
 8002344:	6983      	ldr	r3, [r0, #24]
 8002346:	b90b      	cbnz	r3, 800234c <_vfiprintf_r+0x18>
 8002348:	f7ff fed0 	bl	80020ec <__sinit>
 800234c:	4b89      	ldr	r3, [pc, #548]	; (8002574 <_vfiprintf_r+0x240>)
 800234e:	429d      	cmp	r5, r3
 8002350:	d11b      	bne.n	800238a <_vfiprintf_r+0x56>
 8002352:	6875      	ldr	r5, [r6, #4]
 8002354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002356:	07d9      	lsls	r1, r3, #31
 8002358:	d405      	bmi.n	8002366 <_vfiprintf_r+0x32>
 800235a:	89ab      	ldrh	r3, [r5, #12]
 800235c:	059a      	lsls	r2, r3, #22
 800235e:	d402      	bmi.n	8002366 <_vfiprintf_r+0x32>
 8002360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002362:	f7ff ff61 	bl	8002228 <__retarget_lock_acquire_recursive>
 8002366:	89ab      	ldrh	r3, [r5, #12]
 8002368:	071b      	lsls	r3, r3, #28
 800236a:	d501      	bpl.n	8002370 <_vfiprintf_r+0x3c>
 800236c:	692b      	ldr	r3, [r5, #16]
 800236e:	b9eb      	cbnz	r3, 80023ac <_vfiprintf_r+0x78>
 8002370:	4629      	mov	r1, r5
 8002372:	4630      	mov	r0, r6
 8002374:	f000 fb5a 	bl	8002a2c <__swsetup_r>
 8002378:	b1c0      	cbz	r0, 80023ac <_vfiprintf_r+0x78>
 800237a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800237c:	07dc      	lsls	r4, r3, #31
 800237e:	d50e      	bpl.n	800239e <_vfiprintf_r+0x6a>
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	b01d      	add	sp, #116	; 0x74
 8002386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800238a:	4b7b      	ldr	r3, [pc, #492]	; (8002578 <_vfiprintf_r+0x244>)
 800238c:	429d      	cmp	r5, r3
 800238e:	d101      	bne.n	8002394 <_vfiprintf_r+0x60>
 8002390:	68b5      	ldr	r5, [r6, #8]
 8002392:	e7df      	b.n	8002354 <_vfiprintf_r+0x20>
 8002394:	4b79      	ldr	r3, [pc, #484]	; (800257c <_vfiprintf_r+0x248>)
 8002396:	429d      	cmp	r5, r3
 8002398:	bf08      	it	eq
 800239a:	68f5      	ldreq	r5, [r6, #12]
 800239c:	e7da      	b.n	8002354 <_vfiprintf_r+0x20>
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	0598      	lsls	r0, r3, #22
 80023a2:	d4ed      	bmi.n	8002380 <_vfiprintf_r+0x4c>
 80023a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023a6:	f7ff ff40 	bl	800222a <__retarget_lock_release_recursive>
 80023aa:	e7e9      	b.n	8002380 <_vfiprintf_r+0x4c>
 80023ac:	2300      	movs	r3, #0
 80023ae:	9309      	str	r3, [sp, #36]	; 0x24
 80023b0:	2320      	movs	r3, #32
 80023b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80023ba:	2330      	movs	r3, #48	; 0x30
 80023bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002580 <_vfiprintf_r+0x24c>
 80023c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023c4:	f04f 0901 	mov.w	r9, #1
 80023c8:	4623      	mov	r3, r4
 80023ca:	469a      	mov	sl, r3
 80023cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023d0:	b10a      	cbz	r2, 80023d6 <_vfiprintf_r+0xa2>
 80023d2:	2a25      	cmp	r2, #37	; 0x25
 80023d4:	d1f9      	bne.n	80023ca <_vfiprintf_r+0x96>
 80023d6:	ebba 0b04 	subs.w	fp, sl, r4
 80023da:	d00b      	beq.n	80023f4 <_vfiprintf_r+0xc0>
 80023dc:	465b      	mov	r3, fp
 80023de:	4622      	mov	r2, r4
 80023e0:	4629      	mov	r1, r5
 80023e2:	4630      	mov	r0, r6
 80023e4:	f7ff ff93 	bl	800230e <__sfputs_r>
 80023e8:	3001      	adds	r0, #1
 80023ea:	f000 80aa 	beq.w	8002542 <_vfiprintf_r+0x20e>
 80023ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023f0:	445a      	add	r2, fp
 80023f2:	9209      	str	r2, [sp, #36]	; 0x24
 80023f4:	f89a 3000 	ldrb.w	r3, [sl]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a2 	beq.w	8002542 <_vfiprintf_r+0x20e>
 80023fe:	2300      	movs	r3, #0
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002408:	f10a 0a01 	add.w	sl, sl, #1
 800240c:	9304      	str	r3, [sp, #16]
 800240e:	9307      	str	r3, [sp, #28]
 8002410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002414:	931a      	str	r3, [sp, #104]	; 0x68
 8002416:	4654      	mov	r4, sl
 8002418:	2205      	movs	r2, #5
 800241a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800241e:	4858      	ldr	r0, [pc, #352]	; (8002580 <_vfiprintf_r+0x24c>)
 8002420:	f7fd fed6 	bl	80001d0 <memchr>
 8002424:	9a04      	ldr	r2, [sp, #16]
 8002426:	b9d8      	cbnz	r0, 8002460 <_vfiprintf_r+0x12c>
 8002428:	06d1      	lsls	r1, r2, #27
 800242a:	bf44      	itt	mi
 800242c:	2320      	movmi	r3, #32
 800242e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002432:	0713      	lsls	r3, r2, #28
 8002434:	bf44      	itt	mi
 8002436:	232b      	movmi	r3, #43	; 0x2b
 8002438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800243c:	f89a 3000 	ldrb.w	r3, [sl]
 8002440:	2b2a      	cmp	r3, #42	; 0x2a
 8002442:	d015      	beq.n	8002470 <_vfiprintf_r+0x13c>
 8002444:	9a07      	ldr	r2, [sp, #28]
 8002446:	4654      	mov	r4, sl
 8002448:	2000      	movs	r0, #0
 800244a:	f04f 0c0a 	mov.w	ip, #10
 800244e:	4621      	mov	r1, r4
 8002450:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002454:	3b30      	subs	r3, #48	; 0x30
 8002456:	2b09      	cmp	r3, #9
 8002458:	d94e      	bls.n	80024f8 <_vfiprintf_r+0x1c4>
 800245a:	b1b0      	cbz	r0, 800248a <_vfiprintf_r+0x156>
 800245c:	9207      	str	r2, [sp, #28]
 800245e:	e014      	b.n	800248a <_vfiprintf_r+0x156>
 8002460:	eba0 0308 	sub.w	r3, r0, r8
 8002464:	fa09 f303 	lsl.w	r3, r9, r3
 8002468:	4313      	orrs	r3, r2
 800246a:	9304      	str	r3, [sp, #16]
 800246c:	46a2      	mov	sl, r4
 800246e:	e7d2      	b.n	8002416 <_vfiprintf_r+0xe2>
 8002470:	9b03      	ldr	r3, [sp, #12]
 8002472:	1d19      	adds	r1, r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	9103      	str	r1, [sp, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	bfbb      	ittet	lt
 800247c:	425b      	neglt	r3, r3
 800247e:	f042 0202 	orrlt.w	r2, r2, #2
 8002482:	9307      	strge	r3, [sp, #28]
 8002484:	9307      	strlt	r3, [sp, #28]
 8002486:	bfb8      	it	lt
 8002488:	9204      	strlt	r2, [sp, #16]
 800248a:	7823      	ldrb	r3, [r4, #0]
 800248c:	2b2e      	cmp	r3, #46	; 0x2e
 800248e:	d10c      	bne.n	80024aa <_vfiprintf_r+0x176>
 8002490:	7863      	ldrb	r3, [r4, #1]
 8002492:	2b2a      	cmp	r3, #42	; 0x2a
 8002494:	d135      	bne.n	8002502 <_vfiprintf_r+0x1ce>
 8002496:	9b03      	ldr	r3, [sp, #12]
 8002498:	1d1a      	adds	r2, r3, #4
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	9203      	str	r2, [sp, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bfb8      	it	lt
 80024a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80024a6:	3402      	adds	r4, #2
 80024a8:	9305      	str	r3, [sp, #20]
 80024aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002590 <_vfiprintf_r+0x25c>
 80024ae:	7821      	ldrb	r1, [r4, #0]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4650      	mov	r0, sl
 80024b4:	f7fd fe8c 	bl	80001d0 <memchr>
 80024b8:	b140      	cbz	r0, 80024cc <_vfiprintf_r+0x198>
 80024ba:	2340      	movs	r3, #64	; 0x40
 80024bc:	eba0 000a 	sub.w	r0, r0, sl
 80024c0:	fa03 f000 	lsl.w	r0, r3, r0
 80024c4:	9b04      	ldr	r3, [sp, #16]
 80024c6:	4303      	orrs	r3, r0
 80024c8:	3401      	adds	r4, #1
 80024ca:	9304      	str	r3, [sp, #16]
 80024cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024d0:	482c      	ldr	r0, [pc, #176]	; (8002584 <_vfiprintf_r+0x250>)
 80024d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024d6:	2206      	movs	r2, #6
 80024d8:	f7fd fe7a 	bl	80001d0 <memchr>
 80024dc:	2800      	cmp	r0, #0
 80024de:	d03f      	beq.n	8002560 <_vfiprintf_r+0x22c>
 80024e0:	4b29      	ldr	r3, [pc, #164]	; (8002588 <_vfiprintf_r+0x254>)
 80024e2:	bb1b      	cbnz	r3, 800252c <_vfiprintf_r+0x1f8>
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	3307      	adds	r3, #7
 80024e8:	f023 0307 	bic.w	r3, r3, #7
 80024ec:	3308      	adds	r3, #8
 80024ee:	9303      	str	r3, [sp, #12]
 80024f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024f2:	443b      	add	r3, r7
 80024f4:	9309      	str	r3, [sp, #36]	; 0x24
 80024f6:	e767      	b.n	80023c8 <_vfiprintf_r+0x94>
 80024f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80024fc:	460c      	mov	r4, r1
 80024fe:	2001      	movs	r0, #1
 8002500:	e7a5      	b.n	800244e <_vfiprintf_r+0x11a>
 8002502:	2300      	movs	r3, #0
 8002504:	3401      	adds	r4, #1
 8002506:	9305      	str	r3, [sp, #20]
 8002508:	4619      	mov	r1, r3
 800250a:	f04f 0c0a 	mov.w	ip, #10
 800250e:	4620      	mov	r0, r4
 8002510:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002514:	3a30      	subs	r2, #48	; 0x30
 8002516:	2a09      	cmp	r2, #9
 8002518:	d903      	bls.n	8002522 <_vfiprintf_r+0x1ee>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0c5      	beq.n	80024aa <_vfiprintf_r+0x176>
 800251e:	9105      	str	r1, [sp, #20]
 8002520:	e7c3      	b.n	80024aa <_vfiprintf_r+0x176>
 8002522:	fb0c 2101 	mla	r1, ip, r1, r2
 8002526:	4604      	mov	r4, r0
 8002528:	2301      	movs	r3, #1
 800252a:	e7f0      	b.n	800250e <_vfiprintf_r+0x1da>
 800252c:	ab03      	add	r3, sp, #12
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	462a      	mov	r2, r5
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <_vfiprintf_r+0x258>)
 8002534:	a904      	add	r1, sp, #16
 8002536:	4630      	mov	r0, r6
 8002538:	f3af 8000 	nop.w
 800253c:	4607      	mov	r7, r0
 800253e:	1c78      	adds	r0, r7, #1
 8002540:	d1d6      	bne.n	80024f0 <_vfiprintf_r+0x1bc>
 8002542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002544:	07d9      	lsls	r1, r3, #31
 8002546:	d405      	bmi.n	8002554 <_vfiprintf_r+0x220>
 8002548:	89ab      	ldrh	r3, [r5, #12]
 800254a:	059a      	lsls	r2, r3, #22
 800254c:	d402      	bmi.n	8002554 <_vfiprintf_r+0x220>
 800254e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002550:	f7ff fe6b 	bl	800222a <__retarget_lock_release_recursive>
 8002554:	89ab      	ldrh	r3, [r5, #12]
 8002556:	065b      	lsls	r3, r3, #25
 8002558:	f53f af12 	bmi.w	8002380 <_vfiprintf_r+0x4c>
 800255c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800255e:	e711      	b.n	8002384 <_vfiprintf_r+0x50>
 8002560:	ab03      	add	r3, sp, #12
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	462a      	mov	r2, r5
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <_vfiprintf_r+0x258>)
 8002568:	a904      	add	r1, sp, #16
 800256a:	4630      	mov	r0, r6
 800256c:	f000 f880 	bl	8002670 <_printf_i>
 8002570:	e7e4      	b.n	800253c <_vfiprintf_r+0x208>
 8002572:	bf00      	nop
 8002574:	08002f38 	.word	0x08002f38
 8002578:	08002f58 	.word	0x08002f58
 800257c:	08002f18 	.word	0x08002f18
 8002580:	08002f78 	.word	0x08002f78
 8002584:	08002f82 	.word	0x08002f82
 8002588:	00000000 	.word	0x00000000
 800258c:	0800230f 	.word	0x0800230f
 8002590:	08002f7e 	.word	0x08002f7e

08002594 <_printf_common>:
 8002594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002598:	4616      	mov	r6, r2
 800259a:	4699      	mov	r9, r3
 800259c:	688a      	ldr	r2, [r1, #8]
 800259e:	690b      	ldr	r3, [r1, #16]
 80025a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025a4:	4293      	cmp	r3, r2
 80025a6:	bfb8      	it	lt
 80025a8:	4613      	movlt	r3, r2
 80025aa:	6033      	str	r3, [r6, #0]
 80025ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025b0:	4607      	mov	r7, r0
 80025b2:	460c      	mov	r4, r1
 80025b4:	b10a      	cbz	r2, 80025ba <_printf_common+0x26>
 80025b6:	3301      	adds	r3, #1
 80025b8:	6033      	str	r3, [r6, #0]
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	0699      	lsls	r1, r3, #26
 80025be:	bf42      	ittt	mi
 80025c0:	6833      	ldrmi	r3, [r6, #0]
 80025c2:	3302      	addmi	r3, #2
 80025c4:	6033      	strmi	r3, [r6, #0]
 80025c6:	6825      	ldr	r5, [r4, #0]
 80025c8:	f015 0506 	ands.w	r5, r5, #6
 80025cc:	d106      	bne.n	80025dc <_printf_common+0x48>
 80025ce:	f104 0a19 	add.w	sl, r4, #25
 80025d2:	68e3      	ldr	r3, [r4, #12]
 80025d4:	6832      	ldr	r2, [r6, #0]
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	42ab      	cmp	r3, r5
 80025da:	dc26      	bgt.n	800262a <_printf_common+0x96>
 80025dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025e0:	1e13      	subs	r3, r2, #0
 80025e2:	6822      	ldr	r2, [r4, #0]
 80025e4:	bf18      	it	ne
 80025e6:	2301      	movne	r3, #1
 80025e8:	0692      	lsls	r2, r2, #26
 80025ea:	d42b      	bmi.n	8002644 <_printf_common+0xb0>
 80025ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025f0:	4649      	mov	r1, r9
 80025f2:	4638      	mov	r0, r7
 80025f4:	47c0      	blx	r8
 80025f6:	3001      	adds	r0, #1
 80025f8:	d01e      	beq.n	8002638 <_printf_common+0xa4>
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	68e5      	ldr	r5, [r4, #12]
 80025fe:	6832      	ldr	r2, [r6, #0]
 8002600:	f003 0306 	and.w	r3, r3, #6
 8002604:	2b04      	cmp	r3, #4
 8002606:	bf08      	it	eq
 8002608:	1aad      	subeq	r5, r5, r2
 800260a:	68a3      	ldr	r3, [r4, #8]
 800260c:	6922      	ldr	r2, [r4, #16]
 800260e:	bf0c      	ite	eq
 8002610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002614:	2500      	movne	r5, #0
 8002616:	4293      	cmp	r3, r2
 8002618:	bfc4      	itt	gt
 800261a:	1a9b      	subgt	r3, r3, r2
 800261c:	18ed      	addgt	r5, r5, r3
 800261e:	2600      	movs	r6, #0
 8002620:	341a      	adds	r4, #26
 8002622:	42b5      	cmp	r5, r6
 8002624:	d11a      	bne.n	800265c <_printf_common+0xc8>
 8002626:	2000      	movs	r0, #0
 8002628:	e008      	b.n	800263c <_printf_common+0xa8>
 800262a:	2301      	movs	r3, #1
 800262c:	4652      	mov	r2, sl
 800262e:	4649      	mov	r1, r9
 8002630:	4638      	mov	r0, r7
 8002632:	47c0      	blx	r8
 8002634:	3001      	adds	r0, #1
 8002636:	d103      	bne.n	8002640 <_printf_common+0xac>
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002640:	3501      	adds	r5, #1
 8002642:	e7c6      	b.n	80025d2 <_printf_common+0x3e>
 8002644:	18e1      	adds	r1, r4, r3
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	2030      	movs	r0, #48	; 0x30
 800264a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800264e:	4422      	add	r2, r4
 8002650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002658:	3302      	adds	r3, #2
 800265a:	e7c7      	b.n	80025ec <_printf_common+0x58>
 800265c:	2301      	movs	r3, #1
 800265e:	4622      	mov	r2, r4
 8002660:	4649      	mov	r1, r9
 8002662:	4638      	mov	r0, r7
 8002664:	47c0      	blx	r8
 8002666:	3001      	adds	r0, #1
 8002668:	d0e6      	beq.n	8002638 <_printf_common+0xa4>
 800266a:	3601      	adds	r6, #1
 800266c:	e7d9      	b.n	8002622 <_printf_common+0x8e>
	...

08002670 <_printf_i>:
 8002670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002674:	460c      	mov	r4, r1
 8002676:	4691      	mov	r9, r2
 8002678:	7e27      	ldrb	r7, [r4, #24]
 800267a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800267c:	2f78      	cmp	r7, #120	; 0x78
 800267e:	4680      	mov	r8, r0
 8002680:	469a      	mov	sl, r3
 8002682:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002686:	d807      	bhi.n	8002698 <_printf_i+0x28>
 8002688:	2f62      	cmp	r7, #98	; 0x62
 800268a:	d80a      	bhi.n	80026a2 <_printf_i+0x32>
 800268c:	2f00      	cmp	r7, #0
 800268e:	f000 80d8 	beq.w	8002842 <_printf_i+0x1d2>
 8002692:	2f58      	cmp	r7, #88	; 0x58
 8002694:	f000 80a3 	beq.w	80027de <_printf_i+0x16e>
 8002698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800269c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026a0:	e03a      	b.n	8002718 <_printf_i+0xa8>
 80026a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026a6:	2b15      	cmp	r3, #21
 80026a8:	d8f6      	bhi.n	8002698 <_printf_i+0x28>
 80026aa:	a001      	add	r0, pc, #4	; (adr r0, 80026b0 <_printf_i+0x40>)
 80026ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80026b0:	08002709 	.word	0x08002709
 80026b4:	0800271d 	.word	0x0800271d
 80026b8:	08002699 	.word	0x08002699
 80026bc:	08002699 	.word	0x08002699
 80026c0:	08002699 	.word	0x08002699
 80026c4:	08002699 	.word	0x08002699
 80026c8:	0800271d 	.word	0x0800271d
 80026cc:	08002699 	.word	0x08002699
 80026d0:	08002699 	.word	0x08002699
 80026d4:	08002699 	.word	0x08002699
 80026d8:	08002699 	.word	0x08002699
 80026dc:	08002829 	.word	0x08002829
 80026e0:	0800274d 	.word	0x0800274d
 80026e4:	0800280b 	.word	0x0800280b
 80026e8:	08002699 	.word	0x08002699
 80026ec:	08002699 	.word	0x08002699
 80026f0:	0800284b 	.word	0x0800284b
 80026f4:	08002699 	.word	0x08002699
 80026f8:	0800274d 	.word	0x0800274d
 80026fc:	08002699 	.word	0x08002699
 8002700:	08002699 	.word	0x08002699
 8002704:	08002813 	.word	0x08002813
 8002708:	680b      	ldr	r3, [r1, #0]
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	600a      	str	r2, [r1, #0]
 8002710:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002718:	2301      	movs	r3, #1
 800271a:	e0a3      	b.n	8002864 <_printf_i+0x1f4>
 800271c:	6825      	ldr	r5, [r4, #0]
 800271e:	6808      	ldr	r0, [r1, #0]
 8002720:	062e      	lsls	r6, r5, #24
 8002722:	f100 0304 	add.w	r3, r0, #4
 8002726:	d50a      	bpl.n	800273e <_printf_i+0xce>
 8002728:	6805      	ldr	r5, [r0, #0]
 800272a:	600b      	str	r3, [r1, #0]
 800272c:	2d00      	cmp	r5, #0
 800272e:	da03      	bge.n	8002738 <_printf_i+0xc8>
 8002730:	232d      	movs	r3, #45	; 0x2d
 8002732:	426d      	negs	r5, r5
 8002734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002738:	485e      	ldr	r0, [pc, #376]	; (80028b4 <_printf_i+0x244>)
 800273a:	230a      	movs	r3, #10
 800273c:	e019      	b.n	8002772 <_printf_i+0x102>
 800273e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002742:	6805      	ldr	r5, [r0, #0]
 8002744:	600b      	str	r3, [r1, #0]
 8002746:	bf18      	it	ne
 8002748:	b22d      	sxthne	r5, r5
 800274a:	e7ef      	b.n	800272c <_printf_i+0xbc>
 800274c:	680b      	ldr	r3, [r1, #0]
 800274e:	6825      	ldr	r5, [r4, #0]
 8002750:	1d18      	adds	r0, r3, #4
 8002752:	6008      	str	r0, [r1, #0]
 8002754:	0628      	lsls	r0, r5, #24
 8002756:	d501      	bpl.n	800275c <_printf_i+0xec>
 8002758:	681d      	ldr	r5, [r3, #0]
 800275a:	e002      	b.n	8002762 <_printf_i+0xf2>
 800275c:	0669      	lsls	r1, r5, #25
 800275e:	d5fb      	bpl.n	8002758 <_printf_i+0xe8>
 8002760:	881d      	ldrh	r5, [r3, #0]
 8002762:	4854      	ldr	r0, [pc, #336]	; (80028b4 <_printf_i+0x244>)
 8002764:	2f6f      	cmp	r7, #111	; 0x6f
 8002766:	bf0c      	ite	eq
 8002768:	2308      	moveq	r3, #8
 800276a:	230a      	movne	r3, #10
 800276c:	2100      	movs	r1, #0
 800276e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002772:	6866      	ldr	r6, [r4, #4]
 8002774:	60a6      	str	r6, [r4, #8]
 8002776:	2e00      	cmp	r6, #0
 8002778:	bfa2      	ittt	ge
 800277a:	6821      	ldrge	r1, [r4, #0]
 800277c:	f021 0104 	bicge.w	r1, r1, #4
 8002780:	6021      	strge	r1, [r4, #0]
 8002782:	b90d      	cbnz	r5, 8002788 <_printf_i+0x118>
 8002784:	2e00      	cmp	r6, #0
 8002786:	d04d      	beq.n	8002824 <_printf_i+0x1b4>
 8002788:	4616      	mov	r6, r2
 800278a:	fbb5 f1f3 	udiv	r1, r5, r3
 800278e:	fb03 5711 	mls	r7, r3, r1, r5
 8002792:	5dc7      	ldrb	r7, [r0, r7]
 8002794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002798:	462f      	mov	r7, r5
 800279a:	42bb      	cmp	r3, r7
 800279c:	460d      	mov	r5, r1
 800279e:	d9f4      	bls.n	800278a <_printf_i+0x11a>
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d10b      	bne.n	80027bc <_printf_i+0x14c>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	07df      	lsls	r7, r3, #31
 80027a8:	d508      	bpl.n	80027bc <_printf_i+0x14c>
 80027aa:	6923      	ldr	r3, [r4, #16]
 80027ac:	6861      	ldr	r1, [r4, #4]
 80027ae:	4299      	cmp	r1, r3
 80027b0:	bfde      	ittt	le
 80027b2:	2330      	movle	r3, #48	; 0x30
 80027b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80027b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80027bc:	1b92      	subs	r2, r2, r6
 80027be:	6122      	str	r2, [r4, #16]
 80027c0:	f8cd a000 	str.w	sl, [sp]
 80027c4:	464b      	mov	r3, r9
 80027c6:	aa03      	add	r2, sp, #12
 80027c8:	4621      	mov	r1, r4
 80027ca:	4640      	mov	r0, r8
 80027cc:	f7ff fee2 	bl	8002594 <_printf_common>
 80027d0:	3001      	adds	r0, #1
 80027d2:	d14c      	bne.n	800286e <_printf_i+0x1fe>
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	b004      	add	sp, #16
 80027da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027de:	4835      	ldr	r0, [pc, #212]	; (80028b4 <_printf_i+0x244>)
 80027e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	680e      	ldr	r6, [r1, #0]
 80027e8:	061f      	lsls	r7, r3, #24
 80027ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80027ee:	600e      	str	r6, [r1, #0]
 80027f0:	d514      	bpl.n	800281c <_printf_i+0x1ac>
 80027f2:	07d9      	lsls	r1, r3, #31
 80027f4:	bf44      	itt	mi
 80027f6:	f043 0320 	orrmi.w	r3, r3, #32
 80027fa:	6023      	strmi	r3, [r4, #0]
 80027fc:	b91d      	cbnz	r5, 8002806 <_printf_i+0x196>
 80027fe:	6823      	ldr	r3, [r4, #0]
 8002800:	f023 0320 	bic.w	r3, r3, #32
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	2310      	movs	r3, #16
 8002808:	e7b0      	b.n	800276c <_printf_i+0xfc>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	f043 0320 	orr.w	r3, r3, #32
 8002810:	6023      	str	r3, [r4, #0]
 8002812:	2378      	movs	r3, #120	; 0x78
 8002814:	4828      	ldr	r0, [pc, #160]	; (80028b8 <_printf_i+0x248>)
 8002816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800281a:	e7e3      	b.n	80027e4 <_printf_i+0x174>
 800281c:	065e      	lsls	r6, r3, #25
 800281e:	bf48      	it	mi
 8002820:	b2ad      	uxthmi	r5, r5
 8002822:	e7e6      	b.n	80027f2 <_printf_i+0x182>
 8002824:	4616      	mov	r6, r2
 8002826:	e7bb      	b.n	80027a0 <_printf_i+0x130>
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	6826      	ldr	r6, [r4, #0]
 800282c:	6960      	ldr	r0, [r4, #20]
 800282e:	1d1d      	adds	r5, r3, #4
 8002830:	600d      	str	r5, [r1, #0]
 8002832:	0635      	lsls	r5, r6, #24
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	d501      	bpl.n	800283c <_printf_i+0x1cc>
 8002838:	6018      	str	r0, [r3, #0]
 800283a:	e002      	b.n	8002842 <_printf_i+0x1d2>
 800283c:	0671      	lsls	r1, r6, #25
 800283e:	d5fb      	bpl.n	8002838 <_printf_i+0x1c8>
 8002840:	8018      	strh	r0, [r3, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	6123      	str	r3, [r4, #16]
 8002846:	4616      	mov	r6, r2
 8002848:	e7ba      	b.n	80027c0 <_printf_i+0x150>
 800284a:	680b      	ldr	r3, [r1, #0]
 800284c:	1d1a      	adds	r2, r3, #4
 800284e:	600a      	str	r2, [r1, #0]
 8002850:	681e      	ldr	r6, [r3, #0]
 8002852:	6862      	ldr	r2, [r4, #4]
 8002854:	2100      	movs	r1, #0
 8002856:	4630      	mov	r0, r6
 8002858:	f7fd fcba 	bl	80001d0 <memchr>
 800285c:	b108      	cbz	r0, 8002862 <_printf_i+0x1f2>
 800285e:	1b80      	subs	r0, r0, r6
 8002860:	6060      	str	r0, [r4, #4]
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	6123      	str	r3, [r4, #16]
 8002866:	2300      	movs	r3, #0
 8002868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800286c:	e7a8      	b.n	80027c0 <_printf_i+0x150>
 800286e:	6923      	ldr	r3, [r4, #16]
 8002870:	4632      	mov	r2, r6
 8002872:	4649      	mov	r1, r9
 8002874:	4640      	mov	r0, r8
 8002876:	47d0      	blx	sl
 8002878:	3001      	adds	r0, #1
 800287a:	d0ab      	beq.n	80027d4 <_printf_i+0x164>
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	079b      	lsls	r3, r3, #30
 8002880:	d413      	bmi.n	80028aa <_printf_i+0x23a>
 8002882:	68e0      	ldr	r0, [r4, #12]
 8002884:	9b03      	ldr	r3, [sp, #12]
 8002886:	4298      	cmp	r0, r3
 8002888:	bfb8      	it	lt
 800288a:	4618      	movlt	r0, r3
 800288c:	e7a4      	b.n	80027d8 <_printf_i+0x168>
 800288e:	2301      	movs	r3, #1
 8002890:	4632      	mov	r2, r6
 8002892:	4649      	mov	r1, r9
 8002894:	4640      	mov	r0, r8
 8002896:	47d0      	blx	sl
 8002898:	3001      	adds	r0, #1
 800289a:	d09b      	beq.n	80027d4 <_printf_i+0x164>
 800289c:	3501      	adds	r5, #1
 800289e:	68e3      	ldr	r3, [r4, #12]
 80028a0:	9903      	ldr	r1, [sp, #12]
 80028a2:	1a5b      	subs	r3, r3, r1
 80028a4:	42ab      	cmp	r3, r5
 80028a6:	dcf2      	bgt.n	800288e <_printf_i+0x21e>
 80028a8:	e7eb      	b.n	8002882 <_printf_i+0x212>
 80028aa:	2500      	movs	r5, #0
 80028ac:	f104 0619 	add.w	r6, r4, #25
 80028b0:	e7f5      	b.n	800289e <_printf_i+0x22e>
 80028b2:	bf00      	nop
 80028b4:	08002f89 	.word	0x08002f89
 80028b8:	08002f9a 	.word	0x08002f9a

080028bc <_sbrk_r>:
 80028bc:	b538      	push	{r3, r4, r5, lr}
 80028be:	4d06      	ldr	r5, [pc, #24]	; (80028d8 <_sbrk_r+0x1c>)
 80028c0:	2300      	movs	r3, #0
 80028c2:	4604      	mov	r4, r0
 80028c4:	4608      	mov	r0, r1
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	f7fd fef2 	bl	80006b0 <_sbrk>
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	d102      	bne.n	80028d6 <_sbrk_r+0x1a>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	b103      	cbz	r3, 80028d6 <_sbrk_r+0x1a>
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	200000a8 	.word	0x200000a8

080028dc <__sread>:
 80028dc:	b510      	push	{r4, lr}
 80028de:	460c      	mov	r4, r1
 80028e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e4:	f000 fab4 	bl	8002e50 <_read_r>
 80028e8:	2800      	cmp	r0, #0
 80028ea:	bfab      	itete	ge
 80028ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028ee:	89a3      	ldrhlt	r3, [r4, #12]
 80028f0:	181b      	addge	r3, r3, r0
 80028f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028f6:	bfac      	ite	ge
 80028f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80028fa:	81a3      	strhlt	r3, [r4, #12]
 80028fc:	bd10      	pop	{r4, pc}

080028fe <__swrite>:
 80028fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002902:	461f      	mov	r7, r3
 8002904:	898b      	ldrh	r3, [r1, #12]
 8002906:	05db      	lsls	r3, r3, #23
 8002908:	4605      	mov	r5, r0
 800290a:	460c      	mov	r4, r1
 800290c:	4616      	mov	r6, r2
 800290e:	d505      	bpl.n	800291c <__swrite+0x1e>
 8002910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002914:	2302      	movs	r3, #2
 8002916:	2200      	movs	r2, #0
 8002918:	f000 f9c8 	bl	8002cac <_lseek_r>
 800291c:	89a3      	ldrh	r3, [r4, #12]
 800291e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002926:	81a3      	strh	r3, [r4, #12]
 8002928:	4632      	mov	r2, r6
 800292a:	463b      	mov	r3, r7
 800292c:	4628      	mov	r0, r5
 800292e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002932:	f000 b869 	b.w	8002a08 <_write_r>

08002936 <__sseek>:
 8002936:	b510      	push	{r4, lr}
 8002938:	460c      	mov	r4, r1
 800293a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800293e:	f000 f9b5 	bl	8002cac <_lseek_r>
 8002942:	1c43      	adds	r3, r0, #1
 8002944:	89a3      	ldrh	r3, [r4, #12]
 8002946:	bf15      	itete	ne
 8002948:	6560      	strne	r0, [r4, #84]	; 0x54
 800294a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800294e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002952:	81a3      	strheq	r3, [r4, #12]
 8002954:	bf18      	it	ne
 8002956:	81a3      	strhne	r3, [r4, #12]
 8002958:	bd10      	pop	{r4, pc}

0800295a <__sclose>:
 800295a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800295e:	f000 b8d3 	b.w	8002b08 <_close_r>
	...

08002964 <__swbuf_r>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	460e      	mov	r6, r1
 8002968:	4614      	mov	r4, r2
 800296a:	4605      	mov	r5, r0
 800296c:	b118      	cbz	r0, 8002976 <__swbuf_r+0x12>
 800296e:	6983      	ldr	r3, [r0, #24]
 8002970:	b90b      	cbnz	r3, 8002976 <__swbuf_r+0x12>
 8002972:	f7ff fbbb 	bl	80020ec <__sinit>
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <__swbuf_r+0x98>)
 8002978:	429c      	cmp	r4, r3
 800297a:	d12b      	bne.n	80029d4 <__swbuf_r+0x70>
 800297c:	686c      	ldr	r4, [r5, #4]
 800297e:	69a3      	ldr	r3, [r4, #24]
 8002980:	60a3      	str	r3, [r4, #8]
 8002982:	89a3      	ldrh	r3, [r4, #12]
 8002984:	071a      	lsls	r2, r3, #28
 8002986:	d52f      	bpl.n	80029e8 <__swbuf_r+0x84>
 8002988:	6923      	ldr	r3, [r4, #16]
 800298a:	b36b      	cbz	r3, 80029e8 <__swbuf_r+0x84>
 800298c:	6923      	ldr	r3, [r4, #16]
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	1ac0      	subs	r0, r0, r3
 8002992:	6963      	ldr	r3, [r4, #20]
 8002994:	b2f6      	uxtb	r6, r6
 8002996:	4283      	cmp	r3, r0
 8002998:	4637      	mov	r7, r6
 800299a:	dc04      	bgt.n	80029a6 <__swbuf_r+0x42>
 800299c:	4621      	mov	r1, r4
 800299e:	4628      	mov	r0, r5
 80029a0:	f000 f948 	bl	8002c34 <_fflush_r>
 80029a4:	bb30      	cbnz	r0, 80029f4 <__swbuf_r+0x90>
 80029a6:	68a3      	ldr	r3, [r4, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60a3      	str	r3, [r4, #8]
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	6022      	str	r2, [r4, #0]
 80029b2:	701e      	strb	r6, [r3, #0]
 80029b4:	6963      	ldr	r3, [r4, #20]
 80029b6:	3001      	adds	r0, #1
 80029b8:	4283      	cmp	r3, r0
 80029ba:	d004      	beq.n	80029c6 <__swbuf_r+0x62>
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	07db      	lsls	r3, r3, #31
 80029c0:	d506      	bpl.n	80029d0 <__swbuf_r+0x6c>
 80029c2:	2e0a      	cmp	r6, #10
 80029c4:	d104      	bne.n	80029d0 <__swbuf_r+0x6c>
 80029c6:	4621      	mov	r1, r4
 80029c8:	4628      	mov	r0, r5
 80029ca:	f000 f933 	bl	8002c34 <_fflush_r>
 80029ce:	b988      	cbnz	r0, 80029f4 <__swbuf_r+0x90>
 80029d0:	4638      	mov	r0, r7
 80029d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <__swbuf_r+0x9c>)
 80029d6:	429c      	cmp	r4, r3
 80029d8:	d101      	bne.n	80029de <__swbuf_r+0x7a>
 80029da:	68ac      	ldr	r4, [r5, #8]
 80029dc:	e7cf      	b.n	800297e <__swbuf_r+0x1a>
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <__swbuf_r+0xa0>)
 80029e0:	429c      	cmp	r4, r3
 80029e2:	bf08      	it	eq
 80029e4:	68ec      	ldreq	r4, [r5, #12]
 80029e6:	e7ca      	b.n	800297e <__swbuf_r+0x1a>
 80029e8:	4621      	mov	r1, r4
 80029ea:	4628      	mov	r0, r5
 80029ec:	f000 f81e 	bl	8002a2c <__swsetup_r>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d0cb      	beq.n	800298c <__swbuf_r+0x28>
 80029f4:	f04f 37ff 	mov.w	r7, #4294967295
 80029f8:	e7ea      	b.n	80029d0 <__swbuf_r+0x6c>
 80029fa:	bf00      	nop
 80029fc:	08002f38 	.word	0x08002f38
 8002a00:	08002f58 	.word	0x08002f58
 8002a04:	08002f18 	.word	0x08002f18

08002a08 <_write_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4d07      	ldr	r5, [pc, #28]	; (8002a28 <_write_r+0x20>)
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	4608      	mov	r0, r1
 8002a10:	4611      	mov	r1, r2
 8002a12:	2200      	movs	r2, #0
 8002a14:	602a      	str	r2, [r5, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f7fd fc51 	bl	80002be <_write>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d102      	bne.n	8002a26 <_write_r+0x1e>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b103      	cbz	r3, 8002a26 <_write_r+0x1e>
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	200000a8 	.word	0x200000a8

08002a2c <__swsetup_r>:
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <__swsetup_r+0xcc>)
 8002a2e:	b570      	push	{r4, r5, r6, lr}
 8002a30:	681d      	ldr	r5, [r3, #0]
 8002a32:	4606      	mov	r6, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	b125      	cbz	r5, 8002a42 <__swsetup_r+0x16>
 8002a38:	69ab      	ldr	r3, [r5, #24]
 8002a3a:	b913      	cbnz	r3, 8002a42 <__swsetup_r+0x16>
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	f7ff fb55 	bl	80020ec <__sinit>
 8002a42:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <__swsetup_r+0xd0>)
 8002a44:	429c      	cmp	r4, r3
 8002a46:	d10f      	bne.n	8002a68 <__swsetup_r+0x3c>
 8002a48:	686c      	ldr	r4, [r5, #4]
 8002a4a:	89a3      	ldrh	r3, [r4, #12]
 8002a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a50:	0719      	lsls	r1, r3, #28
 8002a52:	d42c      	bmi.n	8002aae <__swsetup_r+0x82>
 8002a54:	06dd      	lsls	r5, r3, #27
 8002a56:	d411      	bmi.n	8002a7c <__swsetup_r+0x50>
 8002a58:	2309      	movs	r3, #9
 8002a5a:	6033      	str	r3, [r6, #0]
 8002a5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002a60:	81a3      	strh	r3, [r4, #12]
 8002a62:	f04f 30ff 	mov.w	r0, #4294967295
 8002a66:	e03e      	b.n	8002ae6 <__swsetup_r+0xba>
 8002a68:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <__swsetup_r+0xd4>)
 8002a6a:	429c      	cmp	r4, r3
 8002a6c:	d101      	bne.n	8002a72 <__swsetup_r+0x46>
 8002a6e:	68ac      	ldr	r4, [r5, #8]
 8002a70:	e7eb      	b.n	8002a4a <__swsetup_r+0x1e>
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <__swsetup_r+0xd8>)
 8002a74:	429c      	cmp	r4, r3
 8002a76:	bf08      	it	eq
 8002a78:	68ec      	ldreq	r4, [r5, #12]
 8002a7a:	e7e6      	b.n	8002a4a <__swsetup_r+0x1e>
 8002a7c:	0758      	lsls	r0, r3, #29
 8002a7e:	d512      	bpl.n	8002aa6 <__swsetup_r+0x7a>
 8002a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a82:	b141      	cbz	r1, 8002a96 <__swsetup_r+0x6a>
 8002a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	d002      	beq.n	8002a92 <__swsetup_r+0x66>
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	f000 f98f 	bl	8002db0 <_free_r>
 8002a92:	2300      	movs	r3, #0
 8002a94:	6363      	str	r3, [r4, #52]	; 0x34
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a9c:	81a3      	strh	r3, [r4, #12]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6063      	str	r3, [r4, #4]
 8002aa2:	6923      	ldr	r3, [r4, #16]
 8002aa4:	6023      	str	r3, [r4, #0]
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	6923      	ldr	r3, [r4, #16]
 8002ab0:	b94b      	cbnz	r3, 8002ac6 <__swsetup_r+0x9a>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002abc:	d003      	beq.n	8002ac6 <__swsetup_r+0x9a>
 8002abe:	4621      	mov	r1, r4
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f000 f929 	bl	8002d18 <__smakebuf_r>
 8002ac6:	89a0      	ldrh	r0, [r4, #12]
 8002ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002acc:	f010 0301 	ands.w	r3, r0, #1
 8002ad0:	d00a      	beq.n	8002ae8 <__swsetup_r+0xbc>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60a3      	str	r3, [r4, #8]
 8002ad6:	6963      	ldr	r3, [r4, #20]
 8002ad8:	425b      	negs	r3, r3
 8002ada:	61a3      	str	r3, [r4, #24]
 8002adc:	6923      	ldr	r3, [r4, #16]
 8002ade:	b943      	cbnz	r3, 8002af2 <__swsetup_r+0xc6>
 8002ae0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ae4:	d1ba      	bne.n	8002a5c <__swsetup_r+0x30>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	0781      	lsls	r1, r0, #30
 8002aea:	bf58      	it	pl
 8002aec:	6963      	ldrpl	r3, [r4, #20]
 8002aee:	60a3      	str	r3, [r4, #8]
 8002af0:	e7f4      	b.n	8002adc <__swsetup_r+0xb0>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e7f7      	b.n	8002ae6 <__swsetup_r+0xba>
 8002af6:	bf00      	nop
 8002af8:	2000000c 	.word	0x2000000c
 8002afc:	08002f38 	.word	0x08002f38
 8002b00:	08002f58 	.word	0x08002f58
 8002b04:	08002f18 	.word	0x08002f18

08002b08 <_close_r>:
 8002b08:	b538      	push	{r3, r4, r5, lr}
 8002b0a:	4d06      	ldr	r5, [pc, #24]	; (8002b24 <_close_r+0x1c>)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4608      	mov	r0, r1
 8002b12:	602b      	str	r3, [r5, #0]
 8002b14:	f7fd fd97 	bl	8000646 <_close>
 8002b18:	1c43      	adds	r3, r0, #1
 8002b1a:	d102      	bne.n	8002b22 <_close_r+0x1a>
 8002b1c:	682b      	ldr	r3, [r5, #0]
 8002b1e:	b103      	cbz	r3, 8002b22 <_close_r+0x1a>
 8002b20:	6023      	str	r3, [r4, #0]
 8002b22:	bd38      	pop	{r3, r4, r5, pc}
 8002b24:	200000a8 	.word	0x200000a8

08002b28 <__sflush_r>:
 8002b28:	898a      	ldrh	r2, [r1, #12]
 8002b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2e:	4605      	mov	r5, r0
 8002b30:	0710      	lsls	r0, r2, #28
 8002b32:	460c      	mov	r4, r1
 8002b34:	d458      	bmi.n	8002be8 <__sflush_r+0xc0>
 8002b36:	684b      	ldr	r3, [r1, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dc05      	bgt.n	8002b48 <__sflush_r+0x20>
 8002b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dc02      	bgt.n	8002b48 <__sflush_r+0x20>
 8002b42:	2000      	movs	r0, #0
 8002b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b4a:	2e00      	cmp	r6, #0
 8002b4c:	d0f9      	beq.n	8002b42 <__sflush_r+0x1a>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b54:	682f      	ldr	r7, [r5, #0]
 8002b56:	602b      	str	r3, [r5, #0]
 8002b58:	d032      	beq.n	8002bc0 <__sflush_r+0x98>
 8002b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	075a      	lsls	r2, r3, #29
 8002b60:	d505      	bpl.n	8002b6e <__sflush_r+0x46>
 8002b62:	6863      	ldr	r3, [r4, #4]
 8002b64:	1ac0      	subs	r0, r0, r3
 8002b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b68:	b10b      	cbz	r3, 8002b6e <__sflush_r+0x46>
 8002b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b6c:	1ac0      	subs	r0, r0, r3
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4602      	mov	r2, r0
 8002b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b74:	6a21      	ldr	r1, [r4, #32]
 8002b76:	4628      	mov	r0, r5
 8002b78:	47b0      	blx	r6
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	d106      	bne.n	8002b8e <__sflush_r+0x66>
 8002b80:	6829      	ldr	r1, [r5, #0]
 8002b82:	291d      	cmp	r1, #29
 8002b84:	d82c      	bhi.n	8002be0 <__sflush_r+0xb8>
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <__sflush_r+0x108>)
 8002b88:	40ca      	lsrs	r2, r1
 8002b8a:	07d6      	lsls	r6, r2, #31
 8002b8c:	d528      	bpl.n	8002be0 <__sflush_r+0xb8>
 8002b8e:	2200      	movs	r2, #0
 8002b90:	6062      	str	r2, [r4, #4]
 8002b92:	04d9      	lsls	r1, r3, #19
 8002b94:	6922      	ldr	r2, [r4, #16]
 8002b96:	6022      	str	r2, [r4, #0]
 8002b98:	d504      	bpl.n	8002ba4 <__sflush_r+0x7c>
 8002b9a:	1c42      	adds	r2, r0, #1
 8002b9c:	d101      	bne.n	8002ba2 <__sflush_r+0x7a>
 8002b9e:	682b      	ldr	r3, [r5, #0]
 8002ba0:	b903      	cbnz	r3, 8002ba4 <__sflush_r+0x7c>
 8002ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8002ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ba6:	602f      	str	r7, [r5, #0]
 8002ba8:	2900      	cmp	r1, #0
 8002baa:	d0ca      	beq.n	8002b42 <__sflush_r+0x1a>
 8002bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bb0:	4299      	cmp	r1, r3
 8002bb2:	d002      	beq.n	8002bba <__sflush_r+0x92>
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f000 f8fb 	bl	8002db0 <_free_r>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8002bbe:	e7c1      	b.n	8002b44 <__sflush_r+0x1c>
 8002bc0:	6a21      	ldr	r1, [r4, #32]
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	47b0      	blx	r6
 8002bc8:	1c41      	adds	r1, r0, #1
 8002bca:	d1c7      	bne.n	8002b5c <__sflush_r+0x34>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0c4      	beq.n	8002b5c <__sflush_r+0x34>
 8002bd2:	2b1d      	cmp	r3, #29
 8002bd4:	d001      	beq.n	8002bda <__sflush_r+0xb2>
 8002bd6:	2b16      	cmp	r3, #22
 8002bd8:	d101      	bne.n	8002bde <__sflush_r+0xb6>
 8002bda:	602f      	str	r7, [r5, #0]
 8002bdc:	e7b1      	b.n	8002b42 <__sflush_r+0x1a>
 8002bde:	89a3      	ldrh	r3, [r4, #12]
 8002be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be4:	81a3      	strh	r3, [r4, #12]
 8002be6:	e7ad      	b.n	8002b44 <__sflush_r+0x1c>
 8002be8:	690f      	ldr	r7, [r1, #16]
 8002bea:	2f00      	cmp	r7, #0
 8002bec:	d0a9      	beq.n	8002b42 <__sflush_r+0x1a>
 8002bee:	0793      	lsls	r3, r2, #30
 8002bf0:	680e      	ldr	r6, [r1, #0]
 8002bf2:	bf08      	it	eq
 8002bf4:	694b      	ldreq	r3, [r1, #20]
 8002bf6:	600f      	str	r7, [r1, #0]
 8002bf8:	bf18      	it	ne
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	eba6 0807 	sub.w	r8, r6, r7
 8002c00:	608b      	str	r3, [r1, #8]
 8002c02:	f1b8 0f00 	cmp.w	r8, #0
 8002c06:	dd9c      	ble.n	8002b42 <__sflush_r+0x1a>
 8002c08:	6a21      	ldr	r1, [r4, #32]
 8002c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c0c:	4643      	mov	r3, r8
 8002c0e:	463a      	mov	r2, r7
 8002c10:	4628      	mov	r0, r5
 8002c12:	47b0      	blx	r6
 8002c14:	2800      	cmp	r0, #0
 8002c16:	dc06      	bgt.n	8002c26 <__sflush_r+0xfe>
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c1e:	81a3      	strh	r3, [r4, #12]
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	e78e      	b.n	8002b44 <__sflush_r+0x1c>
 8002c26:	4407      	add	r7, r0
 8002c28:	eba8 0800 	sub.w	r8, r8, r0
 8002c2c:	e7e9      	b.n	8002c02 <__sflush_r+0xda>
 8002c2e:	bf00      	nop
 8002c30:	20400001 	.word	0x20400001

08002c34 <_fflush_r>:
 8002c34:	b538      	push	{r3, r4, r5, lr}
 8002c36:	690b      	ldr	r3, [r1, #16]
 8002c38:	4605      	mov	r5, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	b913      	cbnz	r3, 8002c44 <_fflush_r+0x10>
 8002c3e:	2500      	movs	r5, #0
 8002c40:	4628      	mov	r0, r5
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	b118      	cbz	r0, 8002c4e <_fflush_r+0x1a>
 8002c46:	6983      	ldr	r3, [r0, #24]
 8002c48:	b90b      	cbnz	r3, 8002c4e <_fflush_r+0x1a>
 8002c4a:	f7ff fa4f 	bl	80020ec <__sinit>
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <_fflush_r+0x6c>)
 8002c50:	429c      	cmp	r4, r3
 8002c52:	d11b      	bne.n	8002c8c <_fflush_r+0x58>
 8002c54:	686c      	ldr	r4, [r5, #4]
 8002c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ef      	beq.n	8002c3e <_fflush_r+0xa>
 8002c5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c60:	07d0      	lsls	r0, r2, #31
 8002c62:	d404      	bmi.n	8002c6e <_fflush_r+0x3a>
 8002c64:	0599      	lsls	r1, r3, #22
 8002c66:	d402      	bmi.n	8002c6e <_fflush_r+0x3a>
 8002c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c6a:	f7ff fadd 	bl	8002228 <__retarget_lock_acquire_recursive>
 8002c6e:	4628      	mov	r0, r5
 8002c70:	4621      	mov	r1, r4
 8002c72:	f7ff ff59 	bl	8002b28 <__sflush_r>
 8002c76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c78:	07da      	lsls	r2, r3, #31
 8002c7a:	4605      	mov	r5, r0
 8002c7c:	d4e0      	bmi.n	8002c40 <_fflush_r+0xc>
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	059b      	lsls	r3, r3, #22
 8002c82:	d4dd      	bmi.n	8002c40 <_fflush_r+0xc>
 8002c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c86:	f7ff fad0 	bl	800222a <__retarget_lock_release_recursive>
 8002c8a:	e7d9      	b.n	8002c40 <_fflush_r+0xc>
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <_fflush_r+0x70>)
 8002c8e:	429c      	cmp	r4, r3
 8002c90:	d101      	bne.n	8002c96 <_fflush_r+0x62>
 8002c92:	68ac      	ldr	r4, [r5, #8]
 8002c94:	e7df      	b.n	8002c56 <_fflush_r+0x22>
 8002c96:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <_fflush_r+0x74>)
 8002c98:	429c      	cmp	r4, r3
 8002c9a:	bf08      	it	eq
 8002c9c:	68ec      	ldreq	r4, [r5, #12]
 8002c9e:	e7da      	b.n	8002c56 <_fflush_r+0x22>
 8002ca0:	08002f38 	.word	0x08002f38
 8002ca4:	08002f58 	.word	0x08002f58
 8002ca8:	08002f18 	.word	0x08002f18

08002cac <_lseek_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	4d07      	ldr	r5, [pc, #28]	; (8002ccc <_lseek_r+0x20>)
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	4608      	mov	r0, r1
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	602a      	str	r2, [r5, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	f7fd fcea 	bl	8000694 <_lseek>
 8002cc0:	1c43      	adds	r3, r0, #1
 8002cc2:	d102      	bne.n	8002cca <_lseek_r+0x1e>
 8002cc4:	682b      	ldr	r3, [r5, #0]
 8002cc6:	b103      	cbz	r3, 8002cca <_lseek_r+0x1e>
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	200000a8 	.word	0x200000a8

08002cd0 <__swhatbuf_r>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	460e      	mov	r6, r1
 8002cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd8:	2900      	cmp	r1, #0
 8002cda:	b096      	sub	sp, #88	; 0x58
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	da07      	bge.n	8002cf2 <__swhatbuf_r+0x22>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	602b      	str	r3, [r5, #0]
 8002ce6:	89b3      	ldrh	r3, [r6, #12]
 8002ce8:	061a      	lsls	r2, r3, #24
 8002cea:	d410      	bmi.n	8002d0e <__swhatbuf_r+0x3e>
 8002cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf0:	e00e      	b.n	8002d10 <__swhatbuf_r+0x40>
 8002cf2:	466a      	mov	r2, sp
 8002cf4:	f000 f8be 	bl	8002e74 <_fstat_r>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	dbf2      	blt.n	8002ce2 <__swhatbuf_r+0x12>
 8002cfc:	9a01      	ldr	r2, [sp, #4]
 8002cfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d06:	425a      	negs	r2, r3
 8002d08:	415a      	adcs	r2, r3
 8002d0a:	602a      	str	r2, [r5, #0]
 8002d0c:	e7ee      	b.n	8002cec <__swhatbuf_r+0x1c>
 8002d0e:	2340      	movs	r3, #64	; 0x40
 8002d10:	2000      	movs	r0, #0
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	b016      	add	sp, #88	; 0x58
 8002d16:	bd70      	pop	{r4, r5, r6, pc}

08002d18 <__smakebuf_r>:
 8002d18:	898b      	ldrh	r3, [r1, #12]
 8002d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d1c:	079d      	lsls	r5, r3, #30
 8002d1e:	4606      	mov	r6, r0
 8002d20:	460c      	mov	r4, r1
 8002d22:	d507      	bpl.n	8002d34 <__smakebuf_r+0x1c>
 8002d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	6163      	str	r3, [r4, #20]
 8002d30:	b002      	add	sp, #8
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
 8002d34:	ab01      	add	r3, sp, #4
 8002d36:	466a      	mov	r2, sp
 8002d38:	f7ff ffca 	bl	8002cd0 <__swhatbuf_r>
 8002d3c:	9900      	ldr	r1, [sp, #0]
 8002d3e:	4605      	mov	r5, r0
 8002d40:	4630      	mov	r0, r6
 8002d42:	f7ff fa73 	bl	800222c <_malloc_r>
 8002d46:	b948      	cbnz	r0, 8002d5c <__smakebuf_r+0x44>
 8002d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d4c:	059a      	lsls	r2, r3, #22
 8002d4e:	d4ef      	bmi.n	8002d30 <__smakebuf_r+0x18>
 8002d50:	f023 0303 	bic.w	r3, r3, #3
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	81a3      	strh	r3, [r4, #12]
 8002d5a:	e7e3      	b.n	8002d24 <__smakebuf_r+0xc>
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <__smakebuf_r+0x7c>)
 8002d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d60:	89a3      	ldrh	r3, [r4, #12]
 8002d62:	6020      	str	r0, [r4, #0]
 8002d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d68:	81a3      	strh	r3, [r4, #12]
 8002d6a:	9b00      	ldr	r3, [sp, #0]
 8002d6c:	6163      	str	r3, [r4, #20]
 8002d6e:	9b01      	ldr	r3, [sp, #4]
 8002d70:	6120      	str	r0, [r4, #16]
 8002d72:	b15b      	cbz	r3, 8002d8c <__smakebuf_r+0x74>
 8002d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f000 f88d 	bl	8002e98 <_isatty_r>
 8002d7e:	b128      	cbz	r0, 8002d8c <__smakebuf_r+0x74>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	81a3      	strh	r3, [r4, #12]
 8002d8c:	89a0      	ldrh	r0, [r4, #12]
 8002d8e:	4305      	orrs	r5, r0
 8002d90:	81a5      	strh	r5, [r4, #12]
 8002d92:	e7cd      	b.n	8002d30 <__smakebuf_r+0x18>
 8002d94:	08002085 	.word	0x08002085

08002d98 <__malloc_lock>:
 8002d98:	4801      	ldr	r0, [pc, #4]	; (8002da0 <__malloc_lock+0x8>)
 8002d9a:	f7ff ba45 	b.w	8002228 <__retarget_lock_acquire_recursive>
 8002d9e:	bf00      	nop
 8002da0:	200000a0 	.word	0x200000a0

08002da4 <__malloc_unlock>:
 8002da4:	4801      	ldr	r0, [pc, #4]	; (8002dac <__malloc_unlock+0x8>)
 8002da6:	f7ff ba40 	b.w	800222a <__retarget_lock_release_recursive>
 8002daa:	bf00      	nop
 8002dac:	200000a0 	.word	0x200000a0

08002db0 <_free_r>:
 8002db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002db2:	2900      	cmp	r1, #0
 8002db4:	d048      	beq.n	8002e48 <_free_r+0x98>
 8002db6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dba:	9001      	str	r0, [sp, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f1a1 0404 	sub.w	r4, r1, #4
 8002dc2:	bfb8      	it	lt
 8002dc4:	18e4      	addlt	r4, r4, r3
 8002dc6:	f7ff ffe7 	bl	8002d98 <__malloc_lock>
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <_free_r+0x9c>)
 8002dcc:	9801      	ldr	r0, [sp, #4]
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	4615      	mov	r5, r2
 8002dd2:	b933      	cbnz	r3, 8002de2 <_free_r+0x32>
 8002dd4:	6063      	str	r3, [r4, #4]
 8002dd6:	6014      	str	r4, [r2, #0]
 8002dd8:	b003      	add	sp, #12
 8002dda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dde:	f7ff bfe1 	b.w	8002da4 <__malloc_unlock>
 8002de2:	42a3      	cmp	r3, r4
 8002de4:	d90b      	bls.n	8002dfe <_free_r+0x4e>
 8002de6:	6821      	ldr	r1, [r4, #0]
 8002de8:	1862      	adds	r2, r4, r1
 8002dea:	4293      	cmp	r3, r2
 8002dec:	bf04      	itt	eq
 8002dee:	681a      	ldreq	r2, [r3, #0]
 8002df0:	685b      	ldreq	r3, [r3, #4]
 8002df2:	6063      	str	r3, [r4, #4]
 8002df4:	bf04      	itt	eq
 8002df6:	1852      	addeq	r2, r2, r1
 8002df8:	6022      	streq	r2, [r4, #0]
 8002dfa:	602c      	str	r4, [r5, #0]
 8002dfc:	e7ec      	b.n	8002dd8 <_free_r+0x28>
 8002dfe:	461a      	mov	r2, r3
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	b10b      	cbz	r3, 8002e08 <_free_r+0x58>
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	d9fa      	bls.n	8002dfe <_free_r+0x4e>
 8002e08:	6811      	ldr	r1, [r2, #0]
 8002e0a:	1855      	adds	r5, r2, r1
 8002e0c:	42a5      	cmp	r5, r4
 8002e0e:	d10b      	bne.n	8002e28 <_free_r+0x78>
 8002e10:	6824      	ldr	r4, [r4, #0]
 8002e12:	4421      	add	r1, r4
 8002e14:	1854      	adds	r4, r2, r1
 8002e16:	42a3      	cmp	r3, r4
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	d1dd      	bne.n	8002dd8 <_free_r+0x28>
 8002e1c:	681c      	ldr	r4, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	6053      	str	r3, [r2, #4]
 8002e22:	4421      	add	r1, r4
 8002e24:	6011      	str	r1, [r2, #0]
 8002e26:	e7d7      	b.n	8002dd8 <_free_r+0x28>
 8002e28:	d902      	bls.n	8002e30 <_free_r+0x80>
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	6003      	str	r3, [r0, #0]
 8002e2e:	e7d3      	b.n	8002dd8 <_free_r+0x28>
 8002e30:	6825      	ldr	r5, [r4, #0]
 8002e32:	1961      	adds	r1, r4, r5
 8002e34:	428b      	cmp	r3, r1
 8002e36:	bf04      	itt	eq
 8002e38:	6819      	ldreq	r1, [r3, #0]
 8002e3a:	685b      	ldreq	r3, [r3, #4]
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	bf04      	itt	eq
 8002e40:	1949      	addeq	r1, r1, r5
 8002e42:	6021      	streq	r1, [r4, #0]
 8002e44:	6054      	str	r4, [r2, #4]
 8002e46:	e7c7      	b.n	8002dd8 <_free_r+0x28>
 8002e48:	b003      	add	sp, #12
 8002e4a:	bd30      	pop	{r4, r5, pc}
 8002e4c:	20000090 	.word	0x20000090

08002e50 <_read_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4d07      	ldr	r5, [pc, #28]	; (8002e70 <_read_r+0x20>)
 8002e54:	4604      	mov	r4, r0
 8002e56:	4608      	mov	r0, r1
 8002e58:	4611      	mov	r1, r2
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	602a      	str	r2, [r5, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f7fd fbd4 	bl	800060c <_read>
 8002e64:	1c43      	adds	r3, r0, #1
 8002e66:	d102      	bne.n	8002e6e <_read_r+0x1e>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	b103      	cbz	r3, 8002e6e <_read_r+0x1e>
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	bd38      	pop	{r3, r4, r5, pc}
 8002e70:	200000a8 	.word	0x200000a8

08002e74 <_fstat_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4d07      	ldr	r5, [pc, #28]	; (8002e94 <_fstat_r+0x20>)
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	f7fd fbec 	bl	800065e <_fstat>
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	d102      	bne.n	8002e90 <_fstat_r+0x1c>
 8002e8a:	682b      	ldr	r3, [r5, #0]
 8002e8c:	b103      	cbz	r3, 8002e90 <_fstat_r+0x1c>
 8002e8e:	6023      	str	r3, [r4, #0]
 8002e90:	bd38      	pop	{r3, r4, r5, pc}
 8002e92:	bf00      	nop
 8002e94:	200000a8 	.word	0x200000a8

08002e98 <_isatty_r>:
 8002e98:	b538      	push	{r3, r4, r5, lr}
 8002e9a:	4d06      	ldr	r5, [pc, #24]	; (8002eb4 <_isatty_r+0x1c>)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4608      	mov	r0, r1
 8002ea2:	602b      	str	r3, [r5, #0]
 8002ea4:	f7fd fbeb 	bl	800067e <_isatty>
 8002ea8:	1c43      	adds	r3, r0, #1
 8002eaa:	d102      	bne.n	8002eb2 <_isatty_r+0x1a>
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	b103      	cbz	r3, 8002eb2 <_isatty_r+0x1a>
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	bd38      	pop	{r3, r4, r5, pc}
 8002eb4:	200000a8 	.word	0x200000a8

08002eb8 <_init>:
 8002eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eba:	bf00      	nop
 8002ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ebe:	bc08      	pop	{r3}
 8002ec0:	469e      	mov	lr, r3
 8002ec2:	4770      	bx	lr

08002ec4 <_fini>:
 8002ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec6:	bf00      	nop
 8002ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eca:	bc08      	pop	{r3}
 8002ecc:	469e      	mov	lr, r3
 8002ece:	4770      	bx	lr
